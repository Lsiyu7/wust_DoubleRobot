// Generated by gencpp from file csv_msgs/csvfile.msg
// DO NOT EDIT!


#ifndef CSV_MSGS_MESSAGE_CSVFILE_H
#define CSV_MSGS_MESSAGE_CSVFILE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace csv_msgs
{
template <class ContainerAllocator>
struct csvfile_
{
  typedef csvfile_<ContainerAllocator> Type;

  csvfile_()
    : Time(0.0)
    , RightC7Shoulder(0.0)
    , RightShoulder(0.0)
    , RightElbow(0.0)
    , RightWrist(0.0)  {
    }
  csvfile_(const ContainerAllocator& _alloc)
    : Time(0.0)
    , RightC7Shoulder(0.0)
    , RightShoulder(0.0)
    , RightElbow(0.0)
    , RightWrist(0.0)  {
  (void)_alloc;
    }



   typedef float _Time_type;
  _Time_type Time;

   typedef float _RightC7Shoulder_type;
  _RightC7Shoulder_type RightC7Shoulder;

   typedef float _RightShoulder_type;
  _RightShoulder_type RightShoulder;

   typedef float _RightElbow_type;
  _RightElbow_type RightElbow;

   typedef float _RightWrist_type;
  _RightWrist_type RightWrist;





  typedef boost::shared_ptr< ::csv_msgs::csvfile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::csv_msgs::csvfile_<ContainerAllocator> const> ConstPtr;

}; // struct csvfile_

typedef ::csv_msgs::csvfile_<std::allocator<void> > csvfile;

typedef boost::shared_ptr< ::csv_msgs::csvfile > csvfilePtr;
typedef boost::shared_ptr< ::csv_msgs::csvfile const> csvfileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::csv_msgs::csvfile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::csv_msgs::csvfile_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace csv_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'csv_msgs': ['/home/yumenghui/catkin_ws/src/wust_robot/csv_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::csv_msgs::csvfile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::csv_msgs::csvfile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::csv_msgs::csvfile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::csv_msgs::csvfile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::csv_msgs::csvfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::csv_msgs::csvfile_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::csv_msgs::csvfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34dbd2050eabe306f510a061084b9163";
  }

  static const char* value(const ::csv_msgs::csvfile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34dbd2050eabe306ULL;
  static const uint64_t static_value2 = 0xf510a061084b9163ULL;
};

template<class ContainerAllocator>
struct DataType< ::csv_msgs::csvfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "csv_msgs/csvfile";
  }

  static const char* value(const ::csv_msgs::csvfile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::csv_msgs::csvfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Time\n\
float32 RightC7Shoulder\n\
float32 RightShoulder\n\
float32 RightElbow\n\
float32 RightWrist\n\
\n\
";
  }

  static const char* value(const ::csv_msgs::csvfile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::csv_msgs::csvfile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Time);
      stream.next(m.RightC7Shoulder);
      stream.next(m.RightShoulder);
      stream.next(m.RightElbow);
      stream.next(m.RightWrist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct csvfile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::csv_msgs::csvfile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::csv_msgs::csvfile_<ContainerAllocator>& v)
  {
    s << indent << "Time: ";
    Printer<float>::stream(s, indent + "  ", v.Time);
    s << indent << "RightC7Shoulder: ";
    Printer<float>::stream(s, indent + "  ", v.RightC7Shoulder);
    s << indent << "RightShoulder: ";
    Printer<float>::stream(s, indent + "  ", v.RightShoulder);
    s << indent << "RightElbow: ";
    Printer<float>::stream(s, indent + "  ", v.RightElbow);
    s << indent << "RightWrist: ";
    Printer<float>::stream(s, indent + "  ", v.RightWrist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CSV_MSGS_MESSAGE_CSVFILE_H
