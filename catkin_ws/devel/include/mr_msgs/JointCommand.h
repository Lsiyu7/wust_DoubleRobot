// Generated by gencpp from file mr_msgs/JointCommand.msg
// DO NOT EDIT!


#ifndef MR_MSGS_MESSAGE_JOINTCOMMAND_H
#define MR_MSGS_MESSAGE_JOINTCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mr_msgs
{
template <class ContainerAllocator>
struct JointCommand_
{
  typedef JointCommand_<ContainerAllocator> Type;

  JointCommand_()
    : command(0)
    , names()
    , cmdPos()
    , cmdspd()
    , cmdCurr()  {
    }
  JointCommand_(const ContainerAllocator& _alloc)
    : command(0)
    , names(_alloc)
    , cmdPos(_alloc)
    , cmdspd(_alloc)
    , cmdCurr(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _command_type;
  _command_type command;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  _names_type names;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cmdPos_type;
  _cmdPos_type cmdPos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cmdspd_type;
  _cmdspd_type cmdspd;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cmdCurr_type;
  _cmdCurr_type cmdCurr;



  enum {
    CURRENT_CMD = 1,
    SPEED_CMD = 2,
    POSITION_CMD = 3,
    TRAJECTORY_CMD = 3,
  };


  typedef boost::shared_ptr< ::mr_msgs::JointCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mr_msgs::JointCommand_<ContainerAllocator> const> ConstPtr;

}; // struct JointCommand_

typedef ::mr_msgs::JointCommand_<std::allocator<void> > JointCommand;

typedef boost::shared_ptr< ::mr_msgs::JointCommand > JointCommandPtr;
typedef boost::shared_ptr< ::mr_msgs::JointCommand const> JointCommandConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mr_msgs::JointCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mr_msgs::JointCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mr_msgs': ['/home/yumenghui/catkin_ws/src/wust_robot/mr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mr_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mr_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mr_msgs::JointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mr_msgs::JointCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mr_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mr_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mr_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "316fe6f888e87acbb2cf55d67ad8f983";
  }

  static const char* value(const ::mr_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x316fe6f888e87acbULL;
  static const uint64_t static_value2 = 0xb2cf55d67ad8f983ULL;
};

template<class ContainerAllocator>
struct DataType< ::mr_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mr_msgs/JointCommand";
  }

  static const char* value(const ::mr_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mr_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 command\n\
string[]  names\n\
float64[] cmdPos\n\
float64[] cmdspd\n\
float64[] cmdCurr\n\
\n\
int32 CURRENT_CMD=1\n\
int32 SPEED_CMD=2\n\
int32 POSITION_CMD=3\n\
int32 TRAJECTORY_CMD=3\n\
";
  }

  static const char* value(const ::mr_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mr_msgs::JointCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.names);
      stream.next(m.cmdPos);
      stream.next(m.cmdspd);
      stream.next(m.cmdCurr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mr_msgs::JointCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mr_msgs::JointCommand_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command);
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "cmdPos[]" << std::endl;
    for (size_t i = 0; i < v.cmdPos.size(); ++i)
    {
      s << indent << "  cmdPos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cmdPos[i]);
    }
    s << indent << "cmdspd[]" << std::endl;
    for (size_t i = 0; i < v.cmdspd.size(); ++i)
    {
      s << indent << "  cmdspd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cmdspd[i]);
    }
    s << indent << "cmdCurr[]" << std::endl;
    for (size_t i = 0; i < v.cmdCurr.size(); ++i)
    {
      s << indent << "  cmdCurr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cmdCurr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MR_MSGS_MESSAGE_JOINTCOMMAND_H
