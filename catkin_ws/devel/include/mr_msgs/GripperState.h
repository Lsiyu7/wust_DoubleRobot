// Generated by gencpp from file mr_msgs/GripperState.msg
// DO NOT EDIT!


#ifndef MR_MSGS_MESSAGE_GRIPPERSTATE_H
#define MR_MSGS_MESSAGE_GRIPPERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mr_msgs
{
template <class ContainerAllocator>
struct GripperState_
{
  typedef GripperState_<ContainerAllocator> Type;

  GripperState_()
    : header()
    , names()
    , positionsL()
    , positionsR()
    , torqueL()
    , torqueR()  {
    }
  GripperState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , names(_alloc)
    , positionsL(_alloc)
    , positionsR(_alloc)
    , torqueL(_alloc)
    , torqueR(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  _names_type names;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positionsL_type;
  _positionsL_type positionsL;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positionsR_type;
  _positionsR_type positionsR;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torqueL_type;
  _torqueL_type torqueL;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torqueR_type;
  _torqueR_type torqueR;



  enum {
    OPEN = 1,
    CLOSE = 0,
  };


  typedef boost::shared_ptr< ::mr_msgs::GripperState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mr_msgs::GripperState_<ContainerAllocator> const> ConstPtr;

}; // struct GripperState_

typedef ::mr_msgs::GripperState_<std::allocator<void> > GripperState;

typedef boost::shared_ptr< ::mr_msgs::GripperState > GripperStatePtr;
typedef boost::shared_ptr< ::mr_msgs::GripperState const> GripperStateConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mr_msgs::GripperState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mr_msgs::GripperState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mr_msgs': ['/home/yumenghui/catkin_ws/src/wust_robot/mr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mr_msgs::GripperState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mr_msgs::GripperState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mr_msgs::GripperState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mr_msgs::GripperState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mr_msgs::GripperState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mr_msgs::GripperState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mr_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e09f13f34e6efdfa5ea653e97d62200";
  }

  static const char* value(const ::mr_msgs::GripperState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e09f13f34e6efdfULL;
  static const uint64_t static_value2 = 0xa5ea653e97d62200ULL;
};

template<class ContainerAllocator>
struct DataType< ::mr_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mr_msgs/GripperState";
  }

  static const char* value(const ::mr_msgs::GripperState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mr_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
string[]  names\n\
float64[] positionsL\n\
float64[] positionsR\n\
float64[] torqueL\n\
float64[] torqueR\n\
\n\
int32 OPEN=1\n\
int32 CLOSE=0\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::mr_msgs::GripperState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mr_msgs::GripperState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.names);
      stream.next(m.positionsL);
      stream.next(m.positionsR);
      stream.next(m.torqueL);
      stream.next(m.torqueR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mr_msgs::GripperState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mr_msgs::GripperState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "positionsL[]" << std::endl;
    for (size_t i = 0; i < v.positionsL.size(); ++i)
    {
      s << indent << "  positionsL[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positionsL[i]);
    }
    s << indent << "positionsR[]" << std::endl;
    for (size_t i = 0; i < v.positionsR.size(); ++i)
    {
      s << indent << "  positionsR[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positionsR[i]);
    }
    s << indent << "torqueL[]" << std::endl;
    for (size_t i = 0; i < v.torqueL.size(); ++i)
    {
      s << indent << "  torqueL[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torqueL[i]);
    }
    s << indent << "torqueR[]" << std::endl;
    for (size_t i = 0; i < v.torqueR.size(); ++i)
    {
      s << indent << "  torqueR[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torqueR[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MR_MSGS_MESSAGE_GRIPPERSTATE_H
