/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-08-19 21:47:52.297365
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.23409)*x6);
x15=((1.0)*x5);
x16=((0.23409)*x5);
x17=((1.0)*x6);
x18=((0.24199)*x0);
x19=((1.0)*x4);
x20=((0.23409)*x9);
x21=((0.23409)*x8);
x22=((1.0)*x11);
x23=((1.0)*x3);
x24=((1.0)*x12);
x25=((0.24199)*x3);
x26=(x2*x7);
x27=(x6*x7);
x28=(x3*x7);
x29=(x1*x2);
x30=(x0*x7);
x31=(x19*x3);
x32=(x1*x17);
x33=(x4*x7*x9);
x34=(x15*x30);
x35=(x17*x30);
x36=(x15*x28);
x37=(x17*x28);
x38=((((-1.0)*x31))+((x0*x29)));
x39=(((x29*x3))+((x0*x4)));
x40=((((-1.0)*x1*x31))+((x0*x2)));
x41=((((-1.0)*x32))+((x26*x5)));
x42=((((-1.0)*x0*x29))+x31);
x43=((((-1.0)*x0*x1*x19))+(((-1.0)*x2*x23)));
x44=((((-1.0)*x0*x19))+(((-1.0)*x23*x29)));
x45=(((x1*x15))+((x17*x26)));
x46=((-1.0)*x45);
x47=(x11*x41);
x48=(x38*x6);
x49=(x43*x9);
x50=((((-1.0)*x34))+x48);
x51=((((-1.0)*x36))+((x39*x6)));
x52=((((-1.0)*x35))+((x42*x5)));
x53=((((-1.0)*x37))+((x44*x5)));
x54=(((x4*x7*x8))+((x45*x9)));
x55=(((x46*x8))+x33);
x56=(x11*x53);
x57=(((x51*x8))+((x40*x9)));
x58=(((x9*(((((-1.0)*x17*x39))+x36))))+((x40*x8)));
x59=(((x50*x8))+x49);
x60=(x12*x57);
x61=(((x9*(((((-1.0)*x48))+x34))))+((x43*x8)));
eerot[0]=(((x13*((((x12*x59))+((x11*x52))))))+((x10*x61)));
eerot[1]=(((x13*x61))+((x10*(((((-1.0)*x22*x52))+(((-1.0)*x24*x59)))))));
eerot[2]=(((x12*(((((-1.0)*x15*x42))+x35))))+((x11*x59)));
eetrans[0]=(((x18*x27))+(((0.00036098)*x0))+((x12*((((x14*x30))+(((-1.0)*x16*x42))))))+((x11*((((x20*x43))+((x21*x50))))))+((x5*((((x18*x29))+(((-1.0)*x25*x4))))))+(((0.29199)*x30)));
eerot[3]=(((x13*((x56+x60))))+((x10*x58)));
eerot[4]=(((x13*x58))+((x10*(((((-1.0)*x22*x53))+(((-1.0)*x24*x57)))))));
eerot[5]=(((x11*x57))+((x12*(((((-1.0)*x15*x44))+x37)))));
eetrans[1]=((((0.29199)*x28))+(((0.00036098)*x3))+((x5*((((x18*x4))+((x25*x29))))))+((x25*x27))+((x12*((((x14*x28))+(((-1.0)*x16*x44))))))+((x11*((((x20*x40))+((x21*x51)))))));
eerot[6]=(((x13*((((x12*x55))+x47))))+((x10*x54)));
eerot[7]=(((x13*x54))+((x10*(((((-1.0)*x22*x41))+(((-1.0)*x24*x55)))))));
eerot[8]=(((x11*x55))+((x12*(((((-1.0)*x15*x26))+x32)))));
eetrans[2]=((0.1745)+(((0.24199)*x1*x6))+((x11*((((x20*x4*x7))+((x21*x46))))))+((x12*((((x1*x14))+(((-1.0)*x16*x26))))))+(((0.29199)*x1))+(((-0.24199)*x26*x5)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,j13,cj13,sj13,htj13,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij11[2], _nj11,_ij12[2], _nj12,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17,_ij13[2], _nj13;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1;  _ij13[0] = -1; _ij13[1] = -1; _nj13 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j13=pfree[0]; cj13=cos(pfree[0]); sj13=sin(pfree[0]), htj13=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.23409)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.23409)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1745)+pz+(((-0.23409)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x62=((1.0)*px);
IkReal x63=((1.0)*pz);
IkReal x64=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x64))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x63)));
rxp0_2=((((-1.0)*r10*x62))+((py*r00)));
rxp1_0=((((-1.0)*r21*x64))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x63)));
rxp1_2=((((-1.0)*r11*x62))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x64)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x63)));
rxp2_2=((((-1.0)*r12*x62))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x65=((0.00072196)*px);
IkReal x66=((1.0)*pp);
IkReal x67=((0.28513451009344)+x65+(((-1.0)*x66)));
IkReal x68=((0.0024998696934396)+x65+(((-1.0)*x66)));
IkReal x69=(x65+x66);
IkReal x70=((0.28513451009344)+(((-1.0)*x69)));
IkReal x71=((0.0024998696934396)+(((-1.0)*x69)));
IkReal gconst0=x67;
IkReal gconst1=x68;
IkReal gconst2=x67;
IkReal gconst3=x68;
IkReal gconst4=x70;
IkReal gconst5=x71;
IkReal gconst6=x70;
IkReal gconst7=x71;
IkReal x72=py*py;
IkReal x73=sj13*sj13;
IkReal x74=px*px;
IkReal x75=((1.0)*gconst4);
IkReal x76=(gconst5*gconst7);
IkReal x77=(gconst0*gconst3);
IkReal x78=(gconst1*gconst2);
IkReal x79=((2.0)*gconst5);
IkReal x80=((1.0)*gconst0);
IkReal x81=(gconst1*gconst7);
IkReal x82=(gconst0*gconst6);
IkReal x83=(gconst1*gconst3);
IkReal x84=(gconst4*gconst7);
IkReal x85=((2.0)*gconst0);
IkReal x86=(gconst1*gconst6);
IkReal x87=(gconst0*gconst7);
IkReal x88=(gconst2*gconst5);
IkReal x89=((2.0)*gconst4);
IkReal x90=(gconst3*gconst5);
IkReal x91=(gconst3*gconst4);
IkReal x92=(gconst2*gconst4);
IkReal x93=(gconst4*gconst6);
IkReal x94=(gconst5*gconst6);
IkReal x95=(gconst0*gconst2);
IkReal x96=((0.319529359816149)*px*py);
IkReal x97=(gconst6*x72);
IkReal x98=((4.0)*px*py);
IkReal x99=((4.0)*x74);
IkReal x100=(gconst2*x72);
IkReal x101=((2.0)*x72);
IkReal x102=((0.2342366404)*x73);
IkReal x103=((1.0)*x72);
IkReal x104=((0.4684732808)*x73);
IkReal x105=(py*x73);
IkReal x106=(x72*x84);
IkReal x107=(x72*x94);
IkReal x108=(x72*x88);
IkReal x109=(x72*x91);
IkReal x110=(x72*x87);
IkReal x111=(x72*x86);
IkReal x112=((9.72834036124119e-5)*x105);
IkReal x113=(x72*x78);
IkReal x114=(x72*x77);
IkReal x115=(gconst6*x102);
IkReal x116=(x72*x73);
IkReal x117=((0.000676437939612736)*x105);
IkReal x118=(x102*x94);
IkReal x119=(x103*x76);
IkReal x120=(x75*x97);
IkReal x121=(x92*x98);
IkReal x122=(x81*x98);
IkReal x123=(x90*x98);
IkReal x124=(x82*x98);
IkReal x125=(x91*x98);
IkReal x126=(x87*x98);
IkReal x127=(x88*x98);
IkReal x128=(x86*x98);
IkReal x129=(x103*x81);
IkReal x130=(x100*x75);
IkReal x131=(x102*x88);
IkReal x132=((4.88361134882811e-7)*x116);
IkReal x133=(x80*x97);
IkReal x134=(x103*x90);
IkReal x135=(x102*x86);
IkReal x136=(pp*x117);
IkReal x137=((4.88361134882811e-7)*px*x105);
IkReal x138=(x100*x80);
IkReal x139=(x103*x83);
IkReal x140=(x102*x78);
IkReal x141=(x113+x114);
IkReal x142=(x106+x107);
IkReal x143=(x120+x119+x118);
IkReal x144=(x140+x139+x138);
IkReal x145=(x111+x110+x108+x109);
IkReal x146=(x126+x127+x125+x128);
IkReal x147=(x124+x122+x123+x121);
IkReal x148=(x135+x134+x131+x130+x133+x132+x129);
op[0]=((((-1.0)*x143))+x142);
op[1]=((((-1.0)*x112))+x137+x136+(((-1.0)*x96)));
op[2]=((((-1.0)*x148))+((x89*x97))+((x101*x76))+x145+(((-1.0)*x79*x97))+(((-1.0)*x76*x99))+(((-1.0)*x101*x84))+(((-1.0)*x93*x99))+(((-1.0)*x104*x94))+((x94*x99))+((x84*x99)));
op[3]=((((-1.0)*x147))+(((-0.000338218969806368)*gconst1*x105))+(((-1.0)*x94*x98))+(((-0.000338218969806368)*gconst2*x105))+x146+(((-1.0)*gconst6*x117))+((x76*x98))+((x93*x98))+(((-1.0)*x84*x98))+(((-1.0)*gconst5*x117)));
op[4]=((((-1.0)*x144))+(((-1.0)*x143))+(((-1.0)*x82*x99))+((gconst3*x72*x79))+((x87*x99))+((x100*x89))+((x101*x82))+((x101*x81))+(((-1.0)*x90*x99))+((x86*x99))+(((-1.0)*gconst3*x72*x89))+(((-1.0)*gconst7*x72*x85))+x141+x142+((x88*x99))+(((-1.0)*x92*x99))+(((-9.76722269765622e-7)*x116))+(((-1.0)*x101*x86))+(((-1.0)*x100*x79))+(((-1.0)*x104*x88))+(((-1.0)*x104*x86))+(((-1.0)*x81*x99))+((x91*x99)));
op[5]=((((-1.0)*x146))+(((-1.0)*x95*x98))+(((-0.000338218969806368)*gconst6*x105))+(((-1.0)*gconst2*x117))+(((-1.0)*x83*x98))+((x78*x98))+(((-1.0)*gconst1*x117))+x147+(((-0.000338218969806368)*gconst5*x105))+((x77*x98)));
op[6]=((((-1.0)*x148))+(((-1.0)*x95*x99))+((x100*x85))+((x101*x83))+(((-1.0)*x83*x99))+((x78*x99))+x145+(((-1.0)*x101*x78))+(((-1.0)*x101*x77))+(((-1.0)*x104*x78))+((x77*x99)));
op[7]=((((-1.0)*x112))+x136+(((-1.0)*x137))+x96);
op[8]=((((-1.0)*x144))+x141);
polyroots8(op,zeror,numroots);
IkReal j11array[8], cj11array[8], sj11array[8], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[8]={true,true,true,true,true,true,true,true};
_nj11 = 8;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
IkReal j12eval[2];
IkReal x149=cj11*cj11;
IkReal x150=py*py;
IkReal x151=px*px;
IkReal x152=pz*pz;
IkReal x153=((7674210.69921818)*sj13);
IkReal x154=(cj11*px);
IkReal x155=((29199.0)*sj13);
IkReal x156=(py*sj11*sj13);
IkReal x157=(x149*x150);
IkReal x158=(x149*x151);
j12eval[0]=(((x153*x158))+(((-1.0)*x153*x157))+((x150*x153))+((x152*x153))+sj13+(((15348421.3984364)*x154*x156))+(((-5540.47315640756)*x156))+(((-5540.47315640756)*sj13*x154)));
j12eval[1]=IKsign(((((-21.08051004)*x156))+((x150*x155))+(((58398.0)*x154*x156))+((x152*x155))+((x155*x158))+(((-1.0)*x155*x157))+(((0.0038048212571196)*sj13))+(((-21.08051004)*sj13*x154))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
cj14array[0]=((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x159=(py*sj11);
IkReal x160=(cj11*px);
IkReal x161=((2419900000.0)*cj14);
IkReal x162=((2419900000.0)*sj14);
j12eval[0]=((-1.01769068360808)+(((-1.0)*cj14)));
j12eval[1]=IKsign(((-1438173202.0)+(((-1413173202.0)*cj14))));
j12eval[2]=((IKabs(((((-1.0)*x159*x162))+(((-1.0)*x160*x162))+(((-2919900000.0)*pz))+(((-1.0)*pz*x161))+(((873535.502)*sj14)))))+(IKabs(((1054025.502)+((pz*x162))+(((-1.0)*x159*x161))+(((-1.0)*x160*x161))+(((873535.502)*cj14))+(((-2919900000.0)*x160))+(((-2919900000.0)*x159))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x163=(cj11*px);
IkReal x164=((24199.0)*cj14);
IkReal x165=(py*sj11);
IkReal x166=((100000.0)*pz);
IkReal x167=((2770.23657820378)*cj14);
IkReal x168=(pz*sj14);
j12eval[0]=((1.20662010826894)+(((-1.0)*x163*x167))+(((-3342.62315992281)*x165))+(((-3342.62315992281)*x163))+cj14+(((-2770.23657820378)*x168))+(((-1.0)*x165*x167)));
j12eval[1]=((IKabs(((-8525.81601)+((pz*x166))+(((-14131.73202)*cj14))+(((-5855.91601)*(cj14*cj14))))))+(IKabs(((((-7065.86601)*sj14))+(((-1.0)*x163*x166))+(((-5855.91601)*cj14*sj14))+(((-1.0)*x165*x166))+(((36.098)*pz))))));
j12eval[2]=IKsign(((10.54025502)+(((-29199.0)*x163))+(((-29199.0)*x165))+(((-1.0)*x163*x164))+(((-24199.0)*x168))+(((8.73535502)*cj14))+(((-1.0)*x164*x165))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x169=py*py;
IkReal x170=cj11*cj11;
IkReal x171=px*px;
IkReal x172=pz*pz;
IkReal x173=(py*sj11);
IkReal x174=((24199.0)*sj14);
IkReal x175=(cj11*px);
IkReal x176=((24199.0)*cj14);
IkReal x177=((100000.0)*x169);
IkReal x178=((7674210.69921818)*x169);
IkReal x179=(x170*x171);
j12eval[0]=((-1.0)+(((-7674210.69921818)*x179))+(((-7674210.69921818)*x172))+(((-15348421.3984364)*x173*x175))+(((-1.0)*x178))+(((5540.47315640756)*x173))+(((5540.47315640756)*x175))+((x170*x178)));
j12eval[1]=((IKabs(((10.54025502)+((pz*x174))+(((-1.0)*x175*x176))+(((-29199.0)*x175))+(((-29199.0)*x173))+(((-1.0)*x173*x176))+(((8.73535502)*cj14)))))+(IKabs(((((-1.0)*x174*x175))+(((-29199.0)*pz))+(((8.73535502)*sj14))+(((-1.0)*pz*x176))+(((-1.0)*x173*x174))))));
j12eval[2]=IKsign(((-0.01303065604)+(((-100000.0)*x179))+(((-100000.0)*x172))+(((-1.0)*x177))+(((72.196)*x175))+(((72.196)*x173))+(((-200000.0)*x173*x175))+((x170*x177))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x180=py*py;
IkReal x181=cj11*cj11;
IkReal x182=(py*sj11);
IkReal x183=((24199.0)*cj14);
IkReal x184=((24199.0)*sj14);
IkReal x185=(cj11*px);
IkReal x186=((100000.0)*x181);
CheckValue<IkReal> x187=IKPowWithIntegerCheck(IKsign(((-0.01303065604)+((x180*x186))+(((72.196)*x185))+(((72.196)*x182))+(((-100000.0)*x180))+(((-100000.0)*(pz*pz)))+(((-200000.0)*x182*x185))+(((-1.0)*x186*(px*px))))),-1);
if(!x187.valid){
continue;
}
CheckValue<IkReal> x188 = IKatan2WithCheck(IkReal(((10.54025502)+((pz*x184))+(((-29199.0)*x182))+(((-29199.0)*x185))+(((-1.0)*x183*x185))+(((-1.0)*x182*x183))+(((8.73535502)*cj14)))),IkReal(((((-29199.0)*pz))+(((-1.0)*pz*x183))+(((8.73535502)*sj14))+(((-1.0)*x184*x185))+(((-1.0)*x182*x184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x188.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x187.value)))+(x188.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x189=IKcos(j12);
IkReal x190=IKsin(j12);
IkReal x191=((0.24199)*cj14);
IkReal x192=((0.24199)*sj14);
IkReal x193=(cj11*px);
IkReal x194=(py*sj11);
IkReal x195=((0.24199)*x190);
IkReal x196=((1.0)*x194);
IkReal x197=((0.58398)*x190);
IkReal x198=(pz*x189);
evalcond[0]=((((-1.0)*x189*x191))+(((-0.29199)*x189))+pz+((x190*x192)));
evalcond[1]=((-0.29199)+(((-1.0)*x191))+x198+(((-0.00036098)*x190))+((x190*x193))+((x190*x194)));
evalcond[2]=((0.00036098)+(((0.29199)*x190))+(((-1.0)*x193))+(((-1.0)*x196))+((x189*x192))+((x190*x191)));
evalcond[3]=((((-1.0)*x189*x196))+(((-1.0)*x189*x193))+x192+(((0.00036098)*x189))+((pz*x190)));
evalcond[4]=((-0.0266991303065604)+((x193*x197))+(((0.58398)*x198))+(((-1.0)*pp))+((x194*x197))+(((-0.0002108051004)*x190))+(((0.00072196)*x193))+(((0.00072196)*x194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x721=((24199.0)*cj14);
IkReal x722=(py*sj11);
IkReal x723=(cj11*px);
IkReal x724=((100000.0)*pz);
CheckValue<IkReal> x725=IKPowWithIntegerCheck(IKsign(((10.54025502)+(((-29199.0)*x723))+(((-29199.0)*x722))+(((-24199.0)*pz*sj14))+(((-1.0)*x721*x723))+(((-1.0)*x721*x722))+(((8.73535502)*cj14)))),-1);
if(!x725.valid){
continue;
}
CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal(((-8525.81601)+(((-14131.73202)*cj14))+(((-5855.91601)*(cj14*cj14)))+((pz*x724)))),IkReal(((((-7065.86601)*sj14))+(((-1.0)*x723*x724))+(((-1.0)*x722*x724))+(((-5855.91601)*cj14*sj14))+(((36.098)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x725.value)))+(x726.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x727=IKcos(j12);
IkReal x728=IKsin(j12);
IkReal x729=((0.24199)*cj14);
IkReal x730=((0.24199)*sj14);
IkReal x731=(cj11*px);
IkReal x732=(py*sj11);
IkReal x733=((0.24199)*x728);
IkReal x734=((1.0)*x732);
IkReal x735=((0.58398)*x728);
IkReal x736=(pz*x727);
evalcond[0]=((((-1.0)*x727*x729))+(((-0.29199)*x727))+((x728*x730))+pz);
evalcond[1]=((-0.29199)+((x728*x731))+((x728*x732))+(((-1.0)*x729))+(((-0.00036098)*x728))+x736);
evalcond[2]=((0.00036098)+((x727*x730))+((x728*x729))+(((-1.0)*x731))+(((-1.0)*x734))+(((0.29199)*x728)));
evalcond[3]=((((-1.0)*x727*x734))+(((0.00036098)*x727))+x730+((pz*x728))+(((-1.0)*x727*x731)));
evalcond[4]=((-0.0266991303065604)+((x731*x735))+(((-0.0002108051004)*x728))+(((-1.0)*pp))+(((0.58398)*x736))+(((0.00072196)*x732))+(((0.00072196)*x731))+((x732*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x737=(py*sj11);
IkReal x738=(cj11*px);
IkReal x739=((2419900000.0)*cj14);
IkReal x740=((2419900000.0)*sj14);
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(((1054025.502)+(((-2919900000.0)*x737))+(((-2919900000.0)*x738))+(((873535.502)*cj14))+(((-1.0)*x737*x739))+(((-1.0)*x738*x739))+((pz*x740)))),IkReal(((((-1.0)*x737*x740))+(((-2919900000.0)*pz))+(((-1.0)*x738*x740))+(((873535.502)*sj14))+(((-1.0)*pz*x739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
CheckValue<IkReal> x742=IKPowWithIntegerCheck(IKsign(((-1438173202.0)+(((-1413173202.0)*cj14)))),-1);
if(!x742.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x741.value)+(((1.5707963267949)*(x742.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x743=IKcos(j12);
IkReal x744=IKsin(j12);
IkReal x745=((0.24199)*cj14);
IkReal x746=((0.24199)*sj14);
IkReal x747=(cj11*px);
IkReal x748=(py*sj11);
IkReal x749=((0.24199)*x744);
IkReal x750=((1.0)*x748);
IkReal x751=((0.58398)*x744);
IkReal x752=(pz*x743);
evalcond[0]=(((x744*x746))+pz+(((-1.0)*x743*x745))+(((-0.29199)*x743)));
evalcond[1]=((-0.29199)+(((-0.00036098)*x744))+((x744*x747))+((x744*x748))+x752+(((-1.0)*x745)));
evalcond[2]=((0.00036098)+((x744*x745))+((x743*x746))+(((-1.0)*x747))+(((-1.0)*x750))+(((0.29199)*x744)));
evalcond[3]=((((0.00036098)*x743))+(((-1.0)*x743*x750))+x746+(((-1.0)*x743*x747))+((pz*x744)));
evalcond[4]=((-0.0266991303065604)+(((0.00072196)*x747))+(((0.00072196)*x748))+((x747*x751))+(((0.58398)*x752))+(((-1.0)*pp))+(((-0.0002108051004)*x744))+((x748*x751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
cj14array[0]=((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x753=(py*sj11);
IkReal x754=(cj11*px);
IkReal x755=((2419900000.0)*cj14);
IkReal x756=((2419900000.0)*sj14);
j12eval[0]=((-1.01769068360808)+(((-1.0)*cj14)));
j12eval[1]=IKsign(((-1438173202.0)+(((-1413173202.0)*cj14))));
j12eval[2]=((IKabs(((((-2919900000.0)*pz))+(((-873535.502)*sj14))+(((-1.0)*pz*x755))+((x753*x756))+((x754*x756)))))+(IKabs(((1054025.502)+(((-1.0)*x754*x755))+(((873535.502)*cj14))+(((-1.0)*x753*x755))+(((-1.0)*pz*x756))+(((-2919900000.0)*x753))+(((-2919900000.0)*x754))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x757=(cj11*px);
IkReal x758=((24199.0)*cj14);
IkReal x759=(py*sj11);
IkReal x760=(pz*sj14);
IkReal x761=((2770.23657820378)*cj14);
IkReal x762=((100000.0)*pz);
j12eval[0]=((1.20662010826894)+cj14+(((-1.0)*x757*x761))+(((-3342.62315992281)*x759))+(((-3342.62315992281)*x757))+(((2770.23657820378)*x760))+(((-1.0)*x759*x761)));
j12eval[1]=IKsign(((10.54025502)+(((-29199.0)*x757))+(((-29199.0)*x759))+(((-1.0)*x758*x759))+(((-1.0)*x757*x758))+(((24199.0)*x760))+(((8.73535502)*cj14))));
j12eval[2]=((IKabs(((((5855.91601)*cj14*sj14))+(((7065.86601)*sj14))+(((-1.0)*x757*x762))+(((36.098)*pz))+(((-1.0)*x759*x762)))))+(IKabs(((-8525.81601)+(((-14131.73202)*cj14))+((pz*x762))+(((-5855.91601)*(cj14*cj14)))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x763=cj11*cj11;
IkReal x764=py*py;
IkReal x765=px*px;
IkReal x766=pz*pz;
IkReal x767=(py*sj11);
IkReal x768=((24199.0)*sj14);
IkReal x769=(cj11*px);
IkReal x770=((24199.0)*cj14);
IkReal x771=((100000.0)*x764);
IkReal x772=((7674210.69921818)*x764);
IkReal x773=(x763*x765);
j12eval[0]=((1.0)+(((-5540.47315640756)*x767))+(((-5540.47315640756)*x769))+(((15348421.3984364)*x767*x769))+(((7674210.69921818)*x766))+x772+(((-1.0)*x763*x772))+(((7674210.69921818)*x773)));
j12eval[1]=IKsign(((0.01303065604)+(((200000.0)*x767*x769))+(((100000.0)*x766))+(((-72.196)*x767))+(((-72.196)*x769))+x771+(((-1.0)*x763*x771))+(((100000.0)*x773))));
j12eval[2]=((IKabs(((-10.54025502)+(((-8.73535502)*cj14))+(((29199.0)*x767))+(((29199.0)*x769))+((x767*x770))+((x769*x770))+((pz*x768)))))+(IKabs((((pz*x770))+(((29199.0)*pz))+(((8.73535502)*sj14))+(((-1.0)*x767*x768))+(((-1.0)*x768*x769))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x774=cj11*cj11;
IkReal x775=py*py;
IkReal x776=(py*sj11);
IkReal x777=((24199.0)*cj14);
IkReal x778=((24199.0)*sj14);
IkReal x779=(cj11*px);
IkReal x780=((100000.0)*x774);
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(((-10.54025502)+((x776*x777))+((pz*x778))+((x777*x779))+(((-8.73535502)*cj14))+(((29199.0)*x779))+(((29199.0)*x776)))),IkReal((((pz*x777))+(((29199.0)*pz))+(((-1.0)*x778*x779))+(((8.73535502)*sj14))+(((-1.0)*x776*x778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
CheckValue<IkReal> x782=IKPowWithIntegerCheck(IKsign(((0.01303065604)+(((200000.0)*x776*x779))+((x780*(px*px)))+(((-1.0)*x775*x780))+(((-72.196)*x779))+(((-72.196)*x776))+(((100000.0)*(pz*pz)))+(((100000.0)*x775)))),-1);
if(!x782.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x781.value)+(((1.5707963267949)*(x782.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x783=IKcos(j12);
IkReal x784=IKsin(j12);
IkReal x785=(py*sj11);
IkReal x786=((0.24199)*cj14);
IkReal x787=((0.24199)*sj14);
IkReal x788=(cj11*px);
IkReal x789=((0.24199)*x784);
IkReal x790=((0.58398)*x784);
IkReal x791=(pz*x783);
evalcond[0]=((((-0.29199)*x783))+pz+(((-1.0)*x784*x787))+(((-1.0)*x783*x786)));
evalcond[1]=((-0.29199)+(((-1.0)*x786))+((x784*x788))+((x784*x785))+(((-0.00036098)*x784))+x791);
evalcond[2]=((0.00036098)+((x784*x786))+(((0.29199)*x784))+(((-1.0)*x785))+(((-1.0)*x788))+(((-1.0)*x783*x787)));
evalcond[3]=(((x783*x788))+((x783*x785))+(((-0.00036098)*x783))+(((-1.0)*pz*x784))+x787);
evalcond[4]=((-0.0266991303065604)+((x785*x790))+(((0.00072196)*x785))+(((0.00072196)*x788))+((x788*x790))+(((-1.0)*pp))+(((-0.0002108051004)*x784))+(((0.58398)*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x792=((24199.0)*cj14);
IkReal x793=(py*sj11);
IkReal x794=(cj11*px);
IkReal x795=((100000.0)*pz);
CheckValue<IkReal> x796=IKPowWithIntegerCheck(IKsign(((10.54025502)+(((-29199.0)*x793))+(((-29199.0)*x794))+(((-1.0)*x792*x794))+(((-1.0)*x792*x793))+(((24199.0)*pz*sj14))+(((8.73535502)*cj14)))),-1);
if(!x796.valid){
continue;
}
CheckValue<IkReal> x797 = IKatan2WithCheck(IkReal(((-8525.81601)+((pz*x795))+(((-14131.73202)*cj14))+(((-5855.91601)*(cj14*cj14))))),IkReal(((((-1.0)*x794*x795))+(((5855.91601)*cj14*sj14))+(((-1.0)*x793*x795))+(((7065.86601)*sj14))+(((36.098)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x797.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x796.value)))+(x797.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x798=IKcos(j12);
IkReal x799=IKsin(j12);
IkReal x800=(py*sj11);
IkReal x801=((0.24199)*cj14);
IkReal x802=((0.24199)*sj14);
IkReal x803=(cj11*px);
IkReal x804=((0.24199)*x799);
IkReal x805=((0.58398)*x799);
IkReal x806=(pz*x798);
evalcond[0]=((((-1.0)*x798*x801))+(((-1.0)*x799*x802))+(((-0.29199)*x798))+pz);
evalcond[1]=((-0.29199)+((x799*x800))+((x799*x803))+(((-0.00036098)*x799))+x806+(((-1.0)*x801)));
evalcond[2]=((0.00036098)+(((-1.0)*x800))+(((-1.0)*x803))+(((-1.0)*x798*x802))+(((0.29199)*x799))+((x799*x801)));
evalcond[3]=(((x798*x800))+((x798*x803))+(((-0.00036098)*x798))+(((-1.0)*pz*x799))+x802);
evalcond[4]=((-0.0266991303065604)+(((0.58398)*x806))+((x800*x805))+((x803*x805))+(((-1.0)*pp))+(((-0.0002108051004)*x799))+(((0.00072196)*x800))+(((0.00072196)*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x807=(py*sj11);
IkReal x808=(cj11*px);
IkReal x809=((2419900000.0)*cj14);
IkReal x810=((2419900000.0)*sj14);
CheckValue<IkReal> x811 = IKatan2WithCheck(IkReal(((1054025.502)+(((-1.0)*x807*x809))+(((-2919900000.0)*x807))+(((-2919900000.0)*x808))+(((-1.0)*pz*x810))+(((873535.502)*cj14))+(((-1.0)*x808*x809)))),IkReal(((((-2919900000.0)*pz))+((x808*x810))+((x807*x810))+(((-873535.502)*sj14))+(((-1.0)*pz*x809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x811.valid){
continue;
}
CheckValue<IkReal> x812=IKPowWithIntegerCheck(IKsign(((-1438173202.0)+(((-1413173202.0)*cj14)))),-1);
if(!x812.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x811.value)+(((1.5707963267949)*(x812.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x813=IKcos(j12);
IkReal x814=IKsin(j12);
IkReal x815=(py*sj11);
IkReal x816=((0.24199)*cj14);
IkReal x817=((0.24199)*sj14);
IkReal x818=(cj11*px);
IkReal x819=((0.24199)*x814);
IkReal x820=((0.58398)*x814);
IkReal x821=(pz*x813);
evalcond[0]=((((-1.0)*x814*x817))+pz+(((-1.0)*x813*x816))+(((-0.29199)*x813)));
evalcond[1]=((-0.29199)+(((-1.0)*x816))+(((-0.00036098)*x814))+((x814*x815))+((x814*x818))+x821);
evalcond[2]=((0.00036098)+((x814*x816))+(((-1.0)*x815))+(((-1.0)*x818))+(((-1.0)*x813*x817))+(((0.29199)*x814)));
evalcond[3]=((((-0.00036098)*x813))+((x813*x818))+((x813*x815))+(((-1.0)*pz*x814))+x817);
evalcond[4]=((-0.0266991303065604)+((x815*x820))+(((0.00072196)*x818))+(((0.00072196)*x815))+(((-0.0002108051004)*x814))+(((-1.0)*pp))+((x818*x820))+(((0.58398)*x821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x822=IKPowWithIntegerCheck(sj13,-1);
if(!x822.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x822.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x822.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))))+IKsqr(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x822.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))), ((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=(((px*sj11))+(((0.24199)*sj13*(IKsin(j14))))+(((-1.0)*cj11*py)));
evalcond[1]=((0.14381718989344)+(((0.00072196)*py*sj11))+(((0.1413173202)*(IKcos(j14))))+(((-1.0)*pp))+(((0.00072196)*cj11*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[3];
IkReal x823=(cj11*px);
IkReal x824=((24199.0)*cj14);
IkReal x825=(py*sj11);
IkReal x826=((100000.0)*pz);
IkReal x827=((2770.23657820378)*cj14);
IkReal x828=(cj13*sj14);
IkReal x829=(pz*x828);
j12eval[0]=((-1.20662010826894)+((x825*x827))+((x823*x827))+(((-1.0)*cj14))+(((2770.23657820378)*x829))+(((3342.62315992281)*x823))+(((3342.62315992281)*x825)));
j12eval[1]=((IKabs(((((-36.098)*pz))+(((5855.91601)*cj14*x828))+((x825*x826))+((x823*x826))+(((7065.86601)*x828)))))+(IKabs(((8525.81601)+(((-1.0)*pz*x826))+(((5855.91601)*(cj14*cj14)))+(((14131.73202)*cj14))))));
j12eval[2]=IKsign(((-10.54025502)+(((-8.73535502)*cj14))+((x824*x825))+(((29199.0)*x825))+(((29199.0)*x823))+((x823*x824))+(((24199.0)*x829))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x830=cj13*cj13;
IkReal x831=cj14*cj14;
IkReal x832=(py*sj11);
IkReal x833=(cj11*px);
IkReal x834=((2419900000.0)*cj14);
IkReal x835=((2419900000.0)*cj13*sj14);
IkReal x836=(x830*x831);
j12eval[0]=((1.45593208567894)+(((2.41324021653787)*cj14))+(((-1.0)*x836))+x830+x831);
j12eval[1]=((IKabs(((((-873535.502)*cj13*sj14))+((x832*x835))+((x833*x835))+((pz*x834))+(((2919900000.0)*pz)))))+(IKabs(((-1054025.502)+(((-1.0)*pz*x835))+((x832*x834))+((x833*x834))+(((-873535.502)*cj14))+(((2919900000.0)*x832))+(((2919900000.0)*x833))))));
j12eval[2]=IKsign(((852581601.0)+(((1413173202.0)*cj14))+(((585591601.0)*x830))+(((585591601.0)*x831))+(((-585591601.0)*x836))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x837=(pz*sj13);
IkReal x838=(cj11*px);
IkReal x839=(py*sj11);
IkReal x840=(cj13*sj13*sj14);
j12eval[0]=((((-3342.62315992281)*x837))+(((2770.23657820378)*x838*x840))+(((2770.23657820378)*x839*x840))+(((-1.0)*x840))+(((-2770.23657820378)*cj14*x837)));
j12eval[1]=IKsign(((((-8.73535502)*x840))+(((-24199.0)*cj14*x837))+(((-29199.0)*x837))+(((24199.0)*x839*x840))+(((24199.0)*x838*x840))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x841=(py*sj11);
IkReal x842=(cj11*px);
IkReal x843=((2419900000.0)*cj14);
IkReal x844=((2419900000.0)*sj14);
j12eval[0]=((-1.01769068360808)+(((-1.0)*cj14)));
j12eval[1]=IKsign(((-1438173202.0)+(((-1413173202.0)*cj14))));
j12eval[2]=((IKabs(((((-1.0)*x841*x844))+(((-1.0)*pz*x843))+(((-2919900000.0)*pz))+(((-1.0)*x842*x844))+(((873535.502)*sj14)))))+(IKabs(((1054025.502)+(((-1.0)*x841*x843))+(((873535.502)*cj14))+(((-2919900000.0)*x842))+(((-2919900000.0)*x841))+(((-1.0)*x842*x843))+((pz*x844))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x845=(cj11*px);
IkReal x846=((24199.0)*cj14);
IkReal x847=(py*sj11);
IkReal x848=((100000.0)*pz);
IkReal x849=((2770.23657820378)*cj14);
IkReal x850=(pz*sj14);
j12eval[0]=((1.20662010826894)+(((-1.0)*x847*x849))+(((-2770.23657820378)*x850))+cj14+(((-3342.62315992281)*x847))+(((-3342.62315992281)*x845))+(((-1.0)*x845*x849)));
j12eval[1]=((IKabs(((-8525.81601)+((pz*x848))+(((-14131.73202)*cj14))+(((-5855.91601)*(cj14*cj14))))))+(IKabs(((((-1.0)*x847*x848))+(((-7065.86601)*sj14))+(((-5855.91601)*cj14*sj14))+(((-1.0)*x845*x848))+(((36.098)*pz))))));
j12eval[2]=IKsign(((10.54025502)+(((-29199.0)*x847))+(((-29199.0)*x845))+(((-1.0)*x846*x847))+(((-24199.0)*x850))+(((-1.0)*x845*x846))+(((8.73535502)*cj14))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x851=py*py;
IkReal x852=cj11*cj11;
IkReal x853=px*px;
IkReal x854=pz*pz;
IkReal x855=(py*sj11);
IkReal x856=((24199.0)*sj14);
IkReal x857=(cj11*px);
IkReal x858=((24199.0)*cj14);
IkReal x859=((100000.0)*x851);
IkReal x860=((7674210.69921818)*x851);
IkReal x861=(x852*x853);
j12eval[0]=((-1.0)+(((-7674210.69921818)*x854))+(((-1.0)*x860))+(((-7674210.69921818)*x861))+(((-15348421.3984364)*x855*x857))+(((5540.47315640756)*x855))+(((5540.47315640756)*x857))+((x852*x860)));
j12eval[1]=((IKabs(((10.54025502)+(((-1.0)*x855*x858))+(((-29199.0)*x857))+(((-29199.0)*x855))+(((-1.0)*x857*x858))+(((8.73535502)*cj14))+((pz*x856)))))+(IKabs(((((-29199.0)*pz))+(((8.73535502)*sj14))+(((-1.0)*pz*x858))+(((-1.0)*x856*x857))+(((-1.0)*x855*x856))))));
j12eval[2]=IKsign(((-0.01303065604)+(((-1.0)*x859))+(((-200000.0)*x855*x857))+(((-100000.0)*x854))+(((-100000.0)*x861))+(((72.196)*x857))+(((72.196)*x855))+((x852*x859))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x862=py*py;
IkReal x863=cj11*cj11;
IkReal x864=(py*sj11);
IkReal x865=((24199.0)*cj14);
IkReal x866=((24199.0)*sj14);
IkReal x867=(cj11*px);
IkReal x868=((100000.0)*x863);
CheckValue<IkReal> x869=IKPowWithIntegerCheck(IKsign(((-0.01303065604)+(((-100000.0)*(pz*pz)))+(((-100000.0)*x862))+((x862*x868))+(((72.196)*x867))+(((72.196)*x864))+(((-1.0)*x868*(px*px)))+(((-200000.0)*x864*x867)))),-1);
if(!x869.valid){
continue;
}
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal(((10.54025502)+(((-1.0)*x865*x867))+(((-1.0)*x864*x865))+(((-29199.0)*x867))+(((-29199.0)*x864))+((pz*x866))+(((8.73535502)*cj14)))),IkReal(((((-29199.0)*pz))+(((-1.0)*x866*x867))+(((8.73535502)*sj14))+(((-1.0)*x864*x866))+(((-1.0)*pz*x865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x869.value)))+(x870.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x871=IKcos(j12);
IkReal x872=IKsin(j12);
IkReal x873=((0.24199)*cj14);
IkReal x874=((0.24199)*sj14);
IkReal x875=(cj11*px);
IkReal x876=(py*sj11);
IkReal x877=((0.24199)*x872);
IkReal x878=((1.0)*x876);
IkReal x879=((0.58398)*x872);
IkReal x880=(pz*x871);
evalcond[0]=(((x872*x874))+(((-1.0)*x871*x873))+pz+(((-0.29199)*x871)));
evalcond[1]=((-0.29199)+((x872*x875))+((x872*x876))+(((-0.00036098)*x872))+x880+(((-1.0)*x873)));
evalcond[2]=((0.00036098)+((x872*x873))+((x871*x874))+(((-1.0)*x875))+(((0.29199)*x872))+(((-1.0)*x878)));
evalcond[3]=((((-1.0)*x871*x878))+(((-1.0)*x871*x875))+(((0.00036098)*x871))+x874+((pz*x872)));
evalcond[4]=((-0.0266991303065604)+((x876*x879))+(((-0.0002108051004)*x872))+(((0.00072196)*x875))+(((0.00072196)*x876))+(((-1.0)*pp))+(((0.58398)*x880))+((x875*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x881=((24199.0)*cj14);
IkReal x882=(py*sj11);
IkReal x883=(cj11*px);
IkReal x884=((100000.0)*pz);
CheckValue<IkReal> x885 = IKatan2WithCheck(IkReal(((-8525.81601)+((pz*x884))+(((-14131.73202)*cj14))+(((-5855.91601)*(cj14*cj14))))),IkReal(((((-1.0)*x883*x884))+(((-1.0)*x882*x884))+(((-7065.86601)*sj14))+(((-5855.91601)*cj14*sj14))+(((36.098)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x885.valid){
continue;
}
CheckValue<IkReal> x886=IKPowWithIntegerCheck(IKsign(((10.54025502)+(((-29199.0)*x882))+(((-29199.0)*x883))+(((-1.0)*x881*x883))+(((-1.0)*x881*x882))+(((-24199.0)*pz*sj14))+(((8.73535502)*cj14)))),-1);
if(!x886.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x885.value)+(((1.5707963267949)*(x886.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x887=IKcos(j12);
IkReal x888=IKsin(j12);
IkReal x889=((0.24199)*cj14);
IkReal x890=((0.24199)*sj14);
IkReal x891=(cj11*px);
IkReal x892=(py*sj11);
IkReal x893=((0.24199)*x888);
IkReal x894=((1.0)*x892);
IkReal x895=((0.58398)*x888);
IkReal x896=(pz*x887);
evalcond[0]=((((-1.0)*x887*x889))+pz+((x888*x890))+(((-0.29199)*x887)));
evalcond[1]=((-0.29199)+(((-1.0)*x889))+(((-0.00036098)*x888))+x896+((x888*x892))+((x888*x891)));
evalcond[2]=((0.00036098)+(((-1.0)*x894))+(((-1.0)*x891))+((x888*x889))+(((0.29199)*x888))+((x887*x890)));
evalcond[3]=((((-1.0)*x887*x891))+((pz*x888))+(((0.00036098)*x887))+x890+(((-1.0)*x887*x894)));
evalcond[4]=((-0.0266991303065604)+(((0.00072196)*x892))+(((0.00072196)*x891))+(((-1.0)*pp))+(((-0.0002108051004)*x888))+((x892*x895))+(((0.58398)*x896))+((x891*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x897=(py*sj11);
IkReal x898=(cj11*px);
IkReal x899=((2419900000.0)*cj14);
IkReal x900=((2419900000.0)*sj14);
CheckValue<IkReal> x901 = IKatan2WithCheck(IkReal(((1054025.502)+(((-1.0)*x898*x899))+(((873535.502)*cj14))+(((-2919900000.0)*x898))+(((-2919900000.0)*x897))+(((-1.0)*x897*x899))+((pz*x900)))),IkReal(((((-1.0)*x897*x900))+(((-1.0)*pz*x899))+(((-2919900000.0)*pz))+(((-1.0)*x898*x900))+(((873535.502)*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902=IKPowWithIntegerCheck(IKsign(((-1438173202.0)+(((-1413173202.0)*cj14)))),-1);
if(!x902.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x901.value)+(((1.5707963267949)*(x902.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x903=IKcos(j12);
IkReal x904=IKsin(j12);
IkReal x905=((0.24199)*cj14);
IkReal x906=((0.24199)*sj14);
IkReal x907=(cj11*px);
IkReal x908=(py*sj11);
IkReal x909=((0.24199)*x904);
IkReal x910=((1.0)*x908);
IkReal x911=((0.58398)*x904);
IkReal x912=(pz*x903);
evalcond[0]=((((-1.0)*x903*x905))+(((-0.29199)*x903))+pz+((x904*x906)));
evalcond[1]=((-0.29199)+(((-1.0)*x905))+(((-0.00036098)*x904))+x912+((x904*x907))+((x904*x908)));
evalcond[2]=((0.00036098)+(((0.29199)*x904))+((x903*x906))+(((-1.0)*x910))+(((-1.0)*x907))+((x904*x905)));
evalcond[3]=((((0.00036098)*x903))+(((-1.0)*x903*x907))+((pz*x904))+x906+(((-1.0)*x903*x910)));
evalcond[4]=((-0.0266991303065604)+(((0.58398)*x912))+(((-1.0)*pp))+((x907*x911))+((x908*x911))+(((-0.0002108051004)*x904))+(((0.00072196)*x907))+(((0.00072196)*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x913=(py*sj11);
IkReal x914=(cj11*px);
IkReal x915=((2419900000.0)*cj14);
IkReal x916=((2419900000.0)*sj14);
j12eval[0]=((-1.01769068360808)+(((-1.0)*cj14)));
j12eval[1]=IKsign(((-1438173202.0)+(((-1413173202.0)*cj14))));
j12eval[2]=((IKabs(((((-2919900000.0)*pz))+((x914*x916))+(((-1.0)*pz*x915))+(((-873535.502)*sj14))+((x913*x916)))))+(IKabs(((1054025.502)+(((-1.0)*x913*x915))+(((-2919900000.0)*x914))+(((-2919900000.0)*x913))+(((873535.502)*cj14))+(((-1.0)*pz*x916))+(((-1.0)*x914*x915))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x917=(cj11*px);
IkReal x918=((24199.0)*cj14);
IkReal x919=(py*sj11);
IkReal x920=(pz*sj14);
IkReal x921=((2770.23657820378)*cj14);
IkReal x922=((100000.0)*pz);
j12eval[0]=((1.20662010826894)+(((-3342.62315992281)*x919))+(((-3342.62315992281)*x917))+cj14+(((-1.0)*x919*x921))+(((2770.23657820378)*x920))+(((-1.0)*x917*x921)));
j12eval[1]=IKsign(((10.54025502)+(((-1.0)*x918*x919))+(((24199.0)*x920))+(((-29199.0)*x919))+(((-29199.0)*x917))+(((8.73535502)*cj14))+(((-1.0)*x917*x918))));
j12eval[2]=((IKabs(((-8525.81601)+(((-14131.73202)*cj14))+((pz*x922))+(((-5855.91601)*(cj14*cj14))))))+(IKabs(((((5855.91601)*cj14*sj14))+(((7065.86601)*sj14))+(((-1.0)*x919*x922))+(((36.098)*pz))+(((-1.0)*x917*x922))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x923=cj11*cj11;
IkReal x924=py*py;
IkReal x925=px*px;
IkReal x926=pz*pz;
IkReal x927=(py*sj11);
IkReal x928=((24199.0)*sj14);
IkReal x929=(cj11*px);
IkReal x930=((24199.0)*cj14);
IkReal x931=((100000.0)*x924);
IkReal x932=((7674210.69921818)*x924);
IkReal x933=(x923*x925);
j12eval[0]=((1.0)+(((7674210.69921818)*x933))+(((7674210.69921818)*x926))+(((-5540.47315640756)*x929))+(((-5540.47315640756)*x927))+(((15348421.3984364)*x927*x929))+x932+(((-1.0)*x923*x932)));
j12eval[1]=IKsign(((0.01303065604)+(((100000.0)*x926))+(((100000.0)*x933))+(((-72.196)*x927))+(((-72.196)*x929))+x931+(((-1.0)*x923*x931))+(((200000.0)*x927*x929))));
j12eval[2]=((IKabs(((((29199.0)*pz))+(((-1.0)*x928*x929))+(((8.73535502)*sj14))+(((-1.0)*x927*x928))+((pz*x930)))))+(IKabs(((-10.54025502)+(((-8.73535502)*cj14))+((x927*x930))+(((29199.0)*x929))+(((29199.0)*x927))+((pz*x928))+((x929*x930))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x934=cj11*cj11;
IkReal x935=py*py;
IkReal x936=(py*sj11);
IkReal x937=((24199.0)*cj14);
IkReal x938=((24199.0)*sj14);
IkReal x939=(cj11*px);
IkReal x940=((100000.0)*x934);
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(((-10.54025502)+((x936*x937))+((x937*x939))+(((-8.73535502)*cj14))+(((29199.0)*x939))+(((29199.0)*x936))+((pz*x938)))),IkReal(((((29199.0)*pz))+(((8.73535502)*sj14))+((pz*x937))+(((-1.0)*x938*x939))+(((-1.0)*x936*x938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign(((0.01303065604)+(((100000.0)*x935))+(((200000.0)*x936*x939))+(((-72.196)*x939))+(((-72.196)*x936))+((x940*(px*px)))+(((100000.0)*(pz*pz)))+(((-1.0)*x935*x940)))),-1);
if(!x942.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x941.value)+(((1.5707963267949)*(x942.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x943=IKcos(j12);
IkReal x944=IKsin(j12);
IkReal x945=(py*sj11);
IkReal x946=((0.24199)*cj14);
IkReal x947=((0.24199)*sj14);
IkReal x948=(cj11*px);
IkReal x949=((0.24199)*x944);
IkReal x950=((0.58398)*x944);
IkReal x951=(pz*x943);
evalcond[0]=((((-1.0)*x944*x947))+pz+(((-1.0)*x943*x946))+(((-0.29199)*x943)));
evalcond[1]=((-0.29199)+(((-1.0)*x946))+((x944*x948))+((x944*x945))+x951+(((-0.00036098)*x944)));
evalcond[2]=((0.00036098)+(((0.29199)*x944))+(((-1.0)*x945))+(((-1.0)*x948))+(((-1.0)*x943*x947))+((x944*x946)));
evalcond[3]=(((x943*x948))+((x943*x945))+(((-1.0)*pz*x944))+x947+(((-0.00036098)*x943)));
evalcond[4]=((-0.0266991303065604)+(((0.58398)*x951))+((x948*x950))+(((-1.0)*pp))+(((-0.0002108051004)*x944))+(((0.00072196)*x948))+(((0.00072196)*x945))+((x945*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x952=((24199.0)*cj14);
IkReal x953=(py*sj11);
IkReal x954=(cj11*px);
IkReal x955=((100000.0)*pz);
CheckValue<IkReal> x956=IKPowWithIntegerCheck(IKsign(((10.54025502)+(((-29199.0)*x953))+(((-29199.0)*x954))+(((24199.0)*pz*sj14))+(((-1.0)*x952*x954))+(((-1.0)*x952*x953))+(((8.73535502)*cj14)))),-1);
if(!x956.valid){
continue;
}
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal(((-8525.81601)+((pz*x955))+(((-14131.73202)*cj14))+(((-5855.91601)*(cj14*cj14))))),IkReal(((((5855.91601)*cj14*sj14))+(((7065.86601)*sj14))+(((-1.0)*x953*x955))+(((-1.0)*x954*x955))+(((36.098)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x956.value)))+(x957.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x958=IKcos(j12);
IkReal x959=IKsin(j12);
IkReal x960=(py*sj11);
IkReal x961=((0.24199)*cj14);
IkReal x962=((0.24199)*sj14);
IkReal x963=(cj11*px);
IkReal x964=((0.24199)*x959);
IkReal x965=((0.58398)*x959);
IkReal x966=(pz*x958);
evalcond[0]=((((-1.0)*x958*x961))+(((-1.0)*x959*x962))+pz+(((-0.29199)*x958)));
evalcond[1]=((-0.29199)+((x959*x963))+((x959*x960))+(((-0.00036098)*x959))+x966+(((-1.0)*x961)));
evalcond[2]=((0.00036098)+(((-1.0)*x963))+(((-1.0)*x960))+(((-1.0)*x958*x962))+((x959*x961))+(((0.29199)*x959)));
evalcond[3]=(((x958*x960))+((x958*x963))+(((-1.0)*pz*x959))+(((-0.00036098)*x958))+x962);
evalcond[4]=((-0.0266991303065604)+(((0.58398)*x966))+(((-0.0002108051004)*x959))+((x960*x965))+(((-1.0)*pp))+(((0.00072196)*x963))+(((0.00072196)*x960))+((x963*x965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x967=(py*sj11);
IkReal x968=(cj11*px);
IkReal x969=((2419900000.0)*cj14);
IkReal x970=((2419900000.0)*sj14);
CheckValue<IkReal> x971 = IKatan2WithCheck(IkReal(((1054025.502)+(((-1.0)*pz*x970))+(((-1.0)*x967*x969))+(((873535.502)*cj14))+(((-1.0)*x968*x969))+(((-2919900000.0)*x967))+(((-2919900000.0)*x968)))),IkReal(((((-1.0)*pz*x969))+(((-2919900000.0)*pz))+((x968*x970))+(((-873535.502)*sj14))+((x967*x970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x971.valid){
continue;
}
CheckValue<IkReal> x972=IKPowWithIntegerCheck(IKsign(((-1438173202.0)+(((-1413173202.0)*cj14)))),-1);
if(!x972.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x971.value)+(((1.5707963267949)*(x972.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x973=IKcos(j12);
IkReal x974=IKsin(j12);
IkReal x975=(py*sj11);
IkReal x976=((0.24199)*cj14);
IkReal x977=((0.24199)*sj14);
IkReal x978=(cj11*px);
IkReal x979=((0.24199)*x974);
IkReal x980=((0.58398)*x974);
IkReal x981=(pz*x973);
evalcond[0]=((((-1.0)*x974*x977))+pz+(((-0.29199)*x973))+(((-1.0)*x973*x976)));
evalcond[1]=((-0.29199)+((x974*x975))+((x974*x978))+(((-0.00036098)*x974))+x981+(((-1.0)*x976)));
evalcond[2]=((0.00036098)+(((-1.0)*x978))+(((-1.0)*x975))+((x974*x976))+(((0.29199)*x974))+(((-1.0)*x973*x977)));
evalcond[3]=(((x973*x975))+((x973*x978))+(((-1.0)*pz*x974))+(((-0.00036098)*x973))+x977);
evalcond[4]=((-0.0266991303065604)+((x975*x980))+(((-0.0002108051004)*x974))+(((0.00072196)*x975))+(((0.00072196)*x978))+(((-1.0)*pp))+(((0.58398)*x981))+((x978*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x982=cj13*cj13;
IkReal x983=((100000.0)*sj13);
IkReal x984=(pz*sj13);
IkReal x985=(cj11*px);
IkReal x986=((24199.0)*cj14);
IkReal x987=((29199.0)*cj13);
IkReal x988=(px*sj11);
IkReal x989=(py*sj11);
IkReal x990=((24199.0)*cj11*py);
IkReal x991=(sj14*x982);
IkReal x992=(cj13*sj13*sj14);
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign(((((24199.0)*x985*x992))+(((-29199.0)*x984))+(((24199.0)*x989*x992))+(((-8.73535502)*x992))+(((-1.0)*x984*x986)))),-1);
if(!x993.valid){
continue;
}
CheckValue<IkReal> x994 = IKatan2WithCheck(IkReal((((cj11*py*x987))+(((-1.0)*pz*x983*x989))+(((-1.0)*pz*x983*x985))+(((36.098)*x984))+((cj11*cj13*py*x986))+(((-1.0)*cj13*x986*x988))+(((-1.0)*x987*x988)))),IkReal(((((-1.0)*x983*(pz*pz)))+((x990*x991))+(((-24199.0)*x988*x991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x994.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x993.value)))+(x994.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x995=IKcos(j12);
IkReal x996=IKsin(j12);
IkReal x997=((0.24199)*cj14);
IkReal x998=((1.0)*py);
IkReal x999=(cj11*sj13);
IkReal x1000=(cj11*px);
IkReal x1001=(px*sj11);
IkReal x1002=(py*sj11);
IkReal x1003=(pz*x995);
IkReal x1004=((1.0)*cj11*cj13);
IkReal x1005=(px*x995);
IkReal x1006=(pz*x996);
IkReal x1007=((0.00036098)*x995);
IkReal x1008=((0.58398)*x996);
IkReal x1009=((0.24199)*cj13*sj14);
evalcond[0]=((((-0.29199)*x995))+(((-1.0)*x995*x997))+((x1009*x996))+pz);
evalcond[1]=((-0.29199)+((x1000*x996))+x1003+(((-1.0)*x997))+(((-0.00036098)*x996))+((x1002*x996)));
evalcond[2]=((0.00036098)+(((-1.0)*x1000))+((x1009*x995))+(((0.29199)*x996))+(((-1.0)*sj11*x998))+((x996*x997)));
evalcond[3]=((((-1.0)*sj13*x1007))+((cj13*x1001))+(((-1.0)*cj11*cj13*x998))+(((-1.0)*sj13*x1006))+((sj13*x1002*x995))+((x1005*x999)));
evalcond[4]=((-0.0266991303065604)+(((0.58398)*x1003))+(((0.00072196)*x1002))+(((0.00072196)*x1000))+((x1000*x1008))+(((-1.0)*pp))+((x1002*x1008))+(((-0.0002108051004)*x996)));
evalcond[5]=((((-1.0)*cj13*x1000*x995))+((cj13*x1006))+((cj13*x1007))+(((0.24199)*sj14))+(((-1.0)*cj13*sj11*x995*x998))+((sj13*x1001))+(((-1.0)*x998*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1010=cj13*cj13;
IkReal x1011=cj14*cj14;
IkReal x1012=(py*sj11);
IkReal x1013=(cj11*px);
IkReal x1014=((2419900000.0)*cj14);
IkReal x1015=((2419900000.0)*cj13*sj14);
IkReal x1016=((585591601.0)*x1011);
CheckValue<IkReal> x1017 = IKatan2WithCheck(IkReal(((-1054025.502)+(((2919900000.0)*x1012))+(((2919900000.0)*x1013))+(((-1.0)*pz*x1015))+((x1013*x1014))+((x1012*x1014))+(((-873535.502)*cj14)))),IkReal(((((-873535.502)*cj13*sj14))+((x1013*x1015))+((x1012*x1015))+((pz*x1014))+(((2919900000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1017.valid){
continue;
}
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(IKsign(((852581601.0)+(((-1.0)*x1010*x1016))+x1016+(((1413173202.0)*cj14))+(((585591601.0)*x1010)))),-1);
if(!x1018.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1017.value)+(((1.5707963267949)*(x1018.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1019=IKcos(j12);
IkReal x1020=IKsin(j12);
IkReal x1021=((0.24199)*cj14);
IkReal x1022=((1.0)*py);
IkReal x1023=(cj11*sj13);
IkReal x1024=(cj11*px);
IkReal x1025=(px*sj11);
IkReal x1026=(py*sj11);
IkReal x1027=(pz*x1019);
IkReal x1028=((1.0)*cj11*cj13);
IkReal x1029=(px*x1019);
IkReal x1030=(pz*x1020);
IkReal x1031=((0.00036098)*x1019);
IkReal x1032=((0.58398)*x1020);
IkReal x1033=((0.24199)*cj13*sj14);
evalcond[0]=(((x1020*x1033))+(((-0.29199)*x1019))+(((-1.0)*x1019*x1021))+pz);
evalcond[1]=((-0.29199)+(((-0.00036098)*x1020))+x1027+(((-1.0)*x1021))+((x1020*x1024))+((x1020*x1026)));
evalcond[2]=((0.00036098)+(((-1.0)*x1024))+(((0.29199)*x1020))+((x1020*x1021))+((x1019*x1033))+(((-1.0)*sj11*x1022)));
evalcond[3]=(((sj13*x1019*x1026))+(((-1.0)*sj13*x1031))+((cj13*x1025))+((x1023*x1029))+(((-1.0)*sj13*x1030))+(((-1.0)*cj11*cj13*x1022)));
evalcond[4]=((-0.0266991303065604)+(((0.00072196)*x1024))+(((0.00072196)*x1026))+((x1026*x1032))+(((-0.0002108051004)*x1020))+(((-1.0)*pp))+(((0.58398)*x1027))+((x1024*x1032)));
evalcond[5]=(((cj13*x1031))+((cj13*x1030))+((sj13*x1025))+(((-1.0)*x1022*x1023))+(((-1.0)*cj13*x1019*x1024))+(((-1.0)*cj13*sj11*x1019*x1022))+(((0.24199)*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1034=((24199.0)*cj14);
IkReal x1035=(py*sj11);
IkReal x1036=(cj13*sj14);
IkReal x1037=(cj11*px);
IkReal x1038=((100000.0)*pz);
CheckValue<IkReal> x1039=IKPowWithIntegerCheck(IKsign(((-10.54025502)+(((-8.73535502)*cj14))+((x1034*x1037))+((x1034*x1035))+(((24199.0)*pz*x1036))+(((29199.0)*x1037))+(((29199.0)*x1035)))),-1);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040 = IKatan2WithCheck(IkReal(((8525.81601)+(((-1.0)*pz*x1038))+(((5855.91601)*(cj14*cj14)))+(((14131.73202)*cj14)))),IkReal(((((-36.098)*pz))+(((5855.91601)*cj14*x1036))+((x1035*x1038))+(((7065.86601)*x1036))+((x1037*x1038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1040.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1039.value)))+(x1040.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1041=IKcos(j12);
IkReal x1042=IKsin(j12);
IkReal x1043=((0.24199)*cj14);
IkReal x1044=((1.0)*py);
IkReal x1045=(cj11*sj13);
IkReal x1046=(cj11*px);
IkReal x1047=(px*sj11);
IkReal x1048=(py*sj11);
IkReal x1049=(pz*x1041);
IkReal x1050=((1.0)*cj11*cj13);
IkReal x1051=(px*x1041);
IkReal x1052=(pz*x1042);
IkReal x1053=((0.00036098)*x1041);
IkReal x1054=((0.58398)*x1042);
IkReal x1055=((0.24199)*cj13*sj14);
evalcond[0]=(((x1042*x1055))+(((-0.29199)*x1041))+(((-1.0)*x1041*x1043))+pz);
evalcond[1]=((-0.29199)+x1049+((x1042*x1046))+((x1042*x1048))+(((-0.00036098)*x1042))+(((-1.0)*x1043)));
evalcond[2]=((0.00036098)+((x1042*x1043))+((x1041*x1055))+(((-1.0)*sj11*x1044))+(((-1.0)*x1046))+(((0.29199)*x1042)));
evalcond[3]=((((-1.0)*sj13*x1053))+(((-1.0)*cj11*cj13*x1044))+((cj13*x1047))+(((-1.0)*sj13*x1052))+((sj13*x1041*x1048))+((x1045*x1051)));
evalcond[4]=((-0.0266991303065604)+(((0.58398)*x1049))+((x1048*x1054))+(((-1.0)*pp))+(((0.00072196)*x1046))+(((0.00072196)*x1048))+((x1046*x1054))+(((-0.0002108051004)*x1042)));
evalcond[5]=((((-1.0)*x1044*x1045))+(((-1.0)*cj13*sj11*x1041*x1044))+(((-1.0)*cj13*x1041*x1046))+(((0.24199)*sj14))+((sj13*x1047))+((cj13*x1053))+((cj13*x1052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1056=cj11*cj11;
IkReal x1057=py*py;
IkReal x1058=px*px;
IkReal x1059=((36.098)*sj13);
IkReal x1060=(pp*sj13);
IkReal x1061=(py*sj11);
IkReal x1062=((21.08051004)*sj13);
IkReal x1063=(cj13*py);
IkReal x1064=((29199.0)*px);
IkReal x1065=(cj11*px);
IkReal x1066=((1334.96954598406)*sj13);
IkReal x1067=((29199.0)*cj11);
IkReal x1068=(cj13*sj11);
IkReal x1069=((29199.0)*sj13);
IkReal x1070=(x1056*x1058);
IkReal x1071=(x1057*x1069);
CheckValue<IkReal> x1072 = IKatan2WithCheck(IkReal(((((-72.196)*sj13*x1061*x1065))+((x1061*x1066))+(((-1.0)*pz*x1063*x1067))+(((-0.481892602903109)*sj13))+(((-1.0)*x1059*x1070))+(((50000.0)*x1060*x1065))+(((50000.0)*x1060*x1061))+(((-18.049)*x1060))+((x1056*x1057*x1059))+((pz*x1064*x1068))+(((-1.0)*x1057*x1059))+((x1065*x1066)))),IkReal(((((-1.0)*x1063*x1064))+(((50000.0)*pz*x1060))+(((58398.0)*px*x1056*x1063))+(((-10.54025502)*cj11*x1063))+((x1057*x1067*x1068))+(((1334.95651532802)*pz*sj13))+(((10.54025502)*px*x1068))+(((-1.0)*x1058*x1067*x1068))+(((-1.0)*pz*x1059*x1065))+(((-1.0)*pz*x1059*x1061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1072.valid){
continue;
}
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(IKsign((((x1069*x1070))+x1071+((x1069*(pz*pz)))+(((-1.0)*x1062*x1065))+(((-1.0)*x1061*x1062))+(((-1.0)*x1056*x1071))+(((58398.0)*sj13*x1061*x1065))+(((0.0038048212571196)*sj13)))),-1);
if(!x1073.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1072.value)+(((1.5707963267949)*(x1073.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1074=IKcos(j12);
IkReal x1075=IKsin(j12);
IkReal x1076=(cj11*px);
IkReal x1077=(py*sj11);
IkReal x1078=((0.58398)*x1075);
IkReal x1079=(sj13*x1074);
evalcond[0]=(((x1077*x1079))+((cj13*px*sj11))+(((-0.00036098)*x1079))+((x1076*x1079))+(((-1.0)*cj11*cj13*py))+(((-1.0)*pz*sj13*x1075)));
evalcond[1]=((-0.0266991303065604)+((x1077*x1078))+(((0.58398)*pz*x1074))+(((-1.0)*pp))+((x1076*x1078))+(((-0.0002108051004)*x1075))+(((0.00072196)*x1076))+(((0.00072196)*x1077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[1];
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj13;
j14eval[1]=sj12;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=sj13;
j14eval[1]=cj12;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1080=((4.13240216537873)*sj12);
IkReal x1081=(cj11*px);
IkReal x1082=((4.13240216537873)*cj12);
IkReal x1083=((4.13240216537873)*py*sj11);
if( IKabs(((((-1.0)*pz*x1080))+(((-0.00149171453365842)*cj12))+((x1081*x1082))+((py*sj11*x1082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-0.00149171453365842)*sj12))+((pz*x1082))+((py*sj11*x1080))+((x1080*x1081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x1080))+(((-0.00149171453365842)*cj12))+((x1081*x1082))+((py*sj11*x1082))))+IKsqr(((-1.20662010826894)+(((-0.00149171453365842)*sj12))+((pz*x1082))+((py*sj11*x1080))+((x1080*x1081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*pz*x1080))+(((-0.00149171453365842)*cj12))+((x1081*x1082))+((py*sj11*x1082))), ((-1.20662010826894)+(((-0.00149171453365842)*sj12))+((pz*x1082))+((py*sj11*x1080))+((x1080*x1081))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1084=IKcos(j14);
IkReal x1085=IKsin(j14);
IkReal x1086=(py*sj11);
IkReal x1087=(cj11*px);
IkReal x1088=((0.24199)*x1084);
IkReal x1089=((0.24199)*x1085);
IkReal x1090=((1.0)*x1087);
evalcond[0]=((((-0.29199)*cj12))+(((-1.0)*cj12*x1088))+((sj12*x1089))+pz);
evalcond[1]=((0.14381718989344)+(((0.1413173202)*x1084))+(((-1.0)*pp))+(((0.00072196)*x1087))+(((0.00072196)*x1086)));
evalcond[2]=((-0.29199)+((cj12*pz))+(((-0.00036098)*sj12))+((sj12*x1086))+((sj12*x1087))+(((-1.0)*x1088)));
evalcond[3]=((((0.00036098)*cj12))+(((-1.0)*cj12*x1090))+x1089+(((-1.0)*cj12*x1086))+((pz*sj12)));
evalcond[4]=((0.00036098)+(((-1.0)*x1090))+(((-1.0)*x1086))+((sj12*x1088))+(((0.29199)*sj12))+((cj12*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1091=((4.13240216537873)*sj12);
IkReal x1092=(cj11*px);
IkReal x1093=((4.13240216537873)*cj12);
IkReal x1094=((4.13240216537873)*py*sj11);
if( IKabs(((((-1.0)*py*sj11*x1093))+(((-1.0)*x1092*x1093))+(((0.00149171453365842)*cj12))+((pz*x1091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-0.00149171453365842)*sj12))+((py*sj11*x1091))+((pz*x1093))+((x1091*x1092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*sj11*x1093))+(((-1.0)*x1092*x1093))+(((0.00149171453365842)*cj12))+((pz*x1091))))+IKsqr(((-1.20662010826894)+(((-0.00149171453365842)*sj12))+((py*sj11*x1091))+((pz*x1093))+((x1091*x1092))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*py*sj11*x1093))+(((-1.0)*x1092*x1093))+(((0.00149171453365842)*cj12))+((pz*x1091))), ((-1.20662010826894)+(((-0.00149171453365842)*sj12))+((py*sj11*x1091))+((pz*x1093))+((x1091*x1092))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1095=IKcos(j14);
IkReal x1096=IKsin(j14);
IkReal x1097=(py*sj11);
IkReal x1098=(cj11*px);
IkReal x1099=((0.24199)*x1095);
IkReal x1100=((0.24199)*x1096);
evalcond[0]=((((-1.0)*sj12*x1100))+(((-0.29199)*cj12))+(((-1.0)*cj12*x1099))+pz);
evalcond[1]=((0.14381718989344)+(((0.1413173202)*x1095))+(((-1.0)*pp))+(((0.00072196)*x1097))+(((0.00072196)*x1098)));
evalcond[2]=((-0.29199)+((cj12*pz))+(((-0.00036098)*sj12))+(((-1.0)*x1099))+((sj12*x1097))+((sj12*x1098)));
evalcond[3]=(x1100+((cj12*x1098))+((cj12*x1097))+(((-1.0)*pz*sj12))+(((-0.00036098)*cj12)));
evalcond[4]=((0.00036098)+(((-1.0)*cj12*x1100))+(((-1.0)*x1098))+(((-1.0)*x1097))+(((0.29199)*sj12))+((sj12*x1099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j14eval[0]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.13240216537873)*pz))+IKsqr(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-4.13240216537873)*pz), ((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1101=IKcos(j14);
IkReal x1102=(py*sj11);
IkReal x1103=(cj11*px);
evalcond[0]=((((0.24199)*(IKsin(j14))))+pz);
evalcond[1]=((-0.29235098)+x1102+x1103+(((-0.24199)*x1101)));
evalcond[2]=((0.1707271253004)+(((-0.58398)*x1103))+(((-0.58398)*x1102))+(((0.1413173202)*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873)*pz))+IKsqr(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873)*pz), ((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1104=IKcos(j14);
IkReal x1105=(py*sj11);
IkReal x1106=(cj11*px);
evalcond[0]=((((-0.24199)*(IKsin(j14))))+pz);
evalcond[1]=((-0.29235098)+x1106+x1105+(((-0.24199)*x1104)));
evalcond[2]=((0.1707271253004)+(((-0.58398)*x1105))+(((-0.58398)*x1106))+(((0.1413173202)*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1107=((4.13240216537873)*sj11);
IkReal x1108=((4.13240216537873)*cj11);
if( IKabs(((((-1.0)*px*x1107))+((py*x1108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.2081118228026)+((py*x1107))+((px*x1108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x1107))+((py*x1108))))+IKsqr(((-1.2081118228026)+((py*x1107))+((px*x1108))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*px*x1107))+((py*x1108))), ((-1.2081118228026)+((py*x1107))+((px*x1108))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1109=IKcos(j14);
IkReal x1110=(cj11*px);
IkReal x1111=(py*sj11);
evalcond[0]=((((0.24199)*(IKsin(j14))))+((px*sj11))+(((-1.0)*cj11*py)));
evalcond[1]=((-0.29235098)+x1111+x1110+(((-0.24199)*x1109)));
evalcond[2]=((0.1707271253004)+(((-0.58398)*x1110))+(((-0.58398)*x1111))+(((0.1413173202)*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1112=((4.13240216537873)*sj11);
IkReal x1113=((4.13240216537873)*cj11);
if( IKabs(((((-1.0)*py*x1113))+((px*x1112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.2081118228026)+((py*x1112))+((px*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1113))+((px*x1112))))+IKsqr(((-1.2081118228026)+((py*x1112))+((px*x1113))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*py*x1113))+((px*x1112))), ((-1.2081118228026)+((py*x1112))+((px*x1113))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1114=IKcos(j14);
IkReal x1115=(cj11*px);
IkReal x1116=(py*sj11);
evalcond[0]=(((px*sj11))+(((-0.24199)*(IKsin(j14))))+(((-1.0)*cj11*py)));
evalcond[1]=((-0.29235098)+x1115+x1116+(((-0.24199)*x1114)));
evalcond[2]=((0.1707271253004)+(((-0.58398)*x1116))+(((-0.58398)*x1115))+(((0.1413173202)*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1117=IKPowWithIntegerCheck(sj13,-1);
if(!x1117.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1117.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1117.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))))+IKsqr(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x1117.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))), ((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1118=IKsin(j14);
IkReal x1119=IKcos(j14);
IkReal x1120=(py*sj11);
IkReal x1121=(cj11*px);
IkReal x1122=(px*sj11);
IkReal x1123=((0.24199)*x1118);
IkReal x1124=((1.0)*cj11*py);
evalcond[0]=(pz+((cj13*x1123)));
evalcond[1]=((-0.29235098)+x1120+x1121+(((-0.24199)*x1119)));
evalcond[2]=(x1122+(((-1.0)*x1124))+((sj13*x1123)));
evalcond[3]=((0.1707271253004)+(((-0.58398)*x1120))+(((-0.58398)*x1121))+(((0.1413173202)*x1119)));
evalcond[4]=(((cj13*pz))+x1123+(((-1.0)*sj13*x1124))+((sj13*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1125=IKPowWithIntegerCheck(cj13,-1);
if(!x1125.valid){
continue;
}
if( IKabs(((-4.13240216537873)*pz*(x1125.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.13240216537873)*pz*(x1125.value)))+IKsqr(((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-4.13240216537873)*pz*(x1125.value)), ((-1.2081118228026)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1126=IKsin(j14);
IkReal x1127=IKcos(j14);
IkReal x1128=(py*sj11);
IkReal x1129=(cj11*px);
IkReal x1130=(px*sj11);
IkReal x1131=((0.24199)*x1126);
IkReal x1132=((1.0)*cj11*py);
evalcond[0]=(pz+((cj13*x1131)));
evalcond[1]=((-0.29235098)+x1128+x1129+(((-0.24199)*x1127)));
evalcond[2]=(((sj13*x1131))+x1130+(((-1.0)*x1132)));
evalcond[3]=((0.1707271253004)+(((0.1413173202)*x1127))+(((-0.58398)*x1128))+(((-0.58398)*x1129)));
evalcond[4]=(((sj13*x1130))+((cj13*pz))+x1131+(((-1.0)*sj13*x1132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j14eval[0]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873)*pz))+IKsqr(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873)*pz), ((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1133=IKcos(j14);
IkReal x1134=(cj11*px);
IkReal x1135=(py*sj11);
evalcond[0]=((((-0.24199)*(IKsin(j14))))+pz);
evalcond[1]=((0.1703055150996)+(((0.1413173202)*x1133))+(((0.58398)*x1134))+(((0.58398)*x1135)));
evalcond[2]=((-0.29162902)+(((-0.24199)*x1133))+(((-1.0)*x1135))+(((-1.0)*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.13240216537873)*pz))+IKsqr(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-4.13240216537873)*pz), ((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1136=IKcos(j14);
IkReal x1137=(cj11*px);
IkReal x1138=(py*sj11);
evalcond[0]=((((0.24199)*(IKsin(j14))))+pz);
evalcond[1]=((0.1703055150996)+(((0.1413173202)*x1136))+(((0.58398)*x1137))+(((0.58398)*x1138)));
evalcond[2]=((-0.29162902)+(((-0.24199)*x1136))+(((-1.0)*x1137))+(((-1.0)*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1139=((4.13240216537873)*sj11);
IkReal x1140=((4.13240216537873)*cj11);
if( IKabs((((py*x1140))+(((-1.0)*px*x1139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20512839373528)+(((-1.0)*px*x1140))+(((-1.0)*py*x1139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x1140))+(((-1.0)*px*x1139))))+IKsqr(((-1.20512839373528)+(((-1.0)*px*x1140))+(((-1.0)*py*x1139))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((py*x1140))+(((-1.0)*px*x1139))), ((-1.20512839373528)+(((-1.0)*px*x1140))+(((-1.0)*py*x1139))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1141=IKcos(j14);
IkReal x1142=((1.0)*cj11);
IkReal x1143=(py*sj11);
evalcond[0]=((((0.24199)*(IKsin(j14))))+((px*sj11))+(((-1.0)*py*x1142)));
evalcond[1]=((0.1703055150996)+(((0.58398)*x1143))+(((0.58398)*cj11*px))+(((0.1413173202)*x1141)));
evalcond[2]=((-0.29162902)+(((-1.0)*px*x1142))+(((-0.24199)*x1141))+(((-1.0)*x1143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1144=((4.13240216537873)*sj11);
IkReal x1145=((4.13240216537873)*cj11);
if( IKabs((((px*x1144))+(((-1.0)*py*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20512839373528)+(((-1.0)*px*x1145))+(((-1.0)*py*x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1144))+(((-1.0)*py*x1145))))+IKsqr(((-1.20512839373528)+(((-1.0)*px*x1145))+(((-1.0)*py*x1144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((px*x1144))+(((-1.0)*py*x1145))), ((-1.20512839373528)+(((-1.0)*px*x1145))+(((-1.0)*py*x1144))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1146=IKcos(j14);
IkReal x1147=((1.0)*cj11);
IkReal x1148=(py*sj11);
evalcond[0]=(((px*sj11))+(((-0.24199)*(IKsin(j14))))+(((-1.0)*py*x1147)));
evalcond[1]=((0.1703055150996)+(((0.58398)*x1148))+(((0.58398)*cj11*px))+(((0.1413173202)*x1146)));
evalcond[2]=((-0.29162902)+(((-1.0)*px*x1147))+(((-0.24199)*x1146))+(((-1.0)*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1149=IKPowWithIntegerCheck(sj13,-1);
if(!x1149.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1149.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1149.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))))+IKsqr(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x1149.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))), ((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1150=IKsin(j14);
IkReal x1151=IKcos(j14);
IkReal x1152=((1.0)*cj11);
IkReal x1153=(px*sj11);
IkReal x1154=(py*sj11);
IkReal x1155=((0.24199)*x1150);
evalcond[0]=(pz+(((-1.0)*cj13*x1155)));
evalcond[1]=(x1153+((sj13*x1155))+(((-1.0)*py*x1152)));
evalcond[2]=((0.1703055150996)+(((0.58398)*x1154))+(((0.58398)*cj11*px))+(((0.1413173202)*x1151)));
evalcond[3]=((-0.29162902)+(((-1.0)*px*x1152))+(((-0.24199)*x1151))+(((-1.0)*x1154)));
evalcond[4]=(x1155+((sj13*x1153))+(((-1.0)*py*sj13*x1152))+(((-1.0)*cj13*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1156=IKPowWithIntegerCheck(cj13,-1);
if(!x1156.valid){
continue;
}
if( IKabs(((4.13240216537873)*pz*(x1156.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873)*pz*(x1156.value)))+IKsqr(((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873)*pz*(x1156.value)), ((-1.20512839373528)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1157=IKsin(j14);
IkReal x1158=IKcos(j14);
IkReal x1159=((1.0)*cj11);
IkReal x1160=(px*sj11);
IkReal x1161=(py*sj11);
IkReal x1162=((0.24199)*x1157);
evalcond[0]=((((-1.0)*cj13*x1162))+pz);
evalcond[1]=(x1160+((sj13*x1162))+(((-1.0)*py*x1159)));
evalcond[2]=((0.1703055150996)+(((0.58398)*cj11*px))+(((0.1413173202)*x1158))+(((0.58398)*x1161)));
evalcond[3]=((-0.29162902)+(((-1.0)*px*x1159))+(((-0.24199)*x1158))+(((-1.0)*x1161)));
evalcond[4]=(x1162+((sj13*x1160))+(((-1.0)*py*sj13*x1159))+(((-1.0)*cj13*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11))))+IKsqr(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11))), ((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1163=IKcos(j14);
IkReal x1164=((1.0)*py);
IkReal x1165=(cj11*px);
IkReal x1166=(py*sj11);
IkReal x1167=((0.24199)*x1163);
evalcond[0]=((((-0.29199)*cj12))+(((-1.0)*cj12*x1167))+pz);
evalcond[1]=((((0.24199)*(IKsin(j14))))+((px*sj11))+(((-1.0)*cj11*x1164)));
evalcond[2]=((0.14381718989344)+(((0.1413173202)*x1163))+(((0.00072196)*x1165))+(((0.00072196)*x1166))+(((-1.0)*pp)));
evalcond[3]=((0.00036098)+((sj12*x1167))+(((-1.0)*sj11*x1164))+(((0.29199)*sj12))+(((-1.0)*x1165)));
evalcond[4]=((-0.29199)+((sj12*x1166))+((sj12*x1165))+((cj12*pz))+(((-0.00036098)*sj12))+(((-1.0)*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py))))+IKsqr(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py))), ((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1168=IKcos(j14);
IkReal x1169=((1.0)*py);
IkReal x1170=(cj11*px);
IkReal x1171=(py*sj11);
IkReal x1172=((0.24199)*x1168);
evalcond[0]=((((-0.29199)*cj12))+(((-1.0)*cj12*x1172))+pz);
evalcond[1]=(((px*sj11))+(((-0.24199)*(IKsin(j14))))+(((-1.0)*cj11*x1169)));
evalcond[2]=((0.14381718989344)+(((0.1413173202)*x1168))+(((-1.0)*pp))+(((0.00072196)*x1171))+(((0.00072196)*x1170)));
evalcond[3]=((0.00036098)+((sj12*x1172))+(((-1.0)*sj11*x1169))+(((0.29199)*sj12))+(((-1.0)*x1170)));
evalcond[4]=((-0.29199)+((sj12*x1170))+((sj12*x1171))+((cj12*pz))+(((-0.00036098)*sj12))+(((-1.0)*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
sj12=0;
cj12=1.0;
j12=0;
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj12=0;
cj12=1.0;
j12=0;
j14eval[0]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11))))+IKsqr(((-1.20662010826894)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11))), ((-1.20662010826894)+(((4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1173=IKcos(j14);
evalcond[0]=((-0.29199)+(((-0.24199)*x1173))+pz);
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1173))+(((-0.58398)*pz)));
evalcond[2]=((((0.24199)*(IKsin(j14))))+((px*sj11))+(((-1.0)*cj11*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py))))+IKsqr(((-1.20662010826894)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py))), ((-1.20662010826894)+(((4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1174=IKcos(j14);
evalcond[0]=((-0.29199)+(((-0.24199)*x1174))+pz);
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1174))+(((-0.58398)*pz)));
evalcond[2]=(((px*sj11))+(((-0.24199)*(IKsin(j14))))+(((-1.0)*cj11*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-0.00149171453365842)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00149171453365842)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))))+IKsqr(((-1.20662010826894)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-0.00149171453365842)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))), ((-1.20662010826894)+(((4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1175=IKcos(j14);
evalcond[0]=((-0.29199)+(((-0.24199)*x1175))+pz);
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1175))+(((-0.58398)*pz)));
evalcond[2]=((0.00036098)+(((0.24199)*(IKsin(j14))))+(((-1.0)*py*sj11))+(((-1.0)*cj11*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((0.00149171453365842)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00149171453365842)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))))+IKsqr(((-1.20662010826894)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.00149171453365842)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))), ((-1.20662010826894)+(((4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1176=IKcos(j14);
evalcond[0]=((-0.29199)+(((-0.24199)*x1176))+pz);
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1176))+(((-0.58398)*pz)));
evalcond[2]=((0.00036098)+(((-0.24199)*(IKsin(j14))))+(((-1.0)*py*sj11))+(((-1.0)*cj11*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1177=IKPowWithIntegerCheck(cj13,-1);
if(!x1177.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1177.value)*(((-36.098)+(((100000.0)*cj11*px))+(((100000.0)*py*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1177.value)*(((-36.098)+(((100000.0)*cj11*px))+(((100000.0)*py*sj11))))))+IKsqr(((-1.20662010826894)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x1177.value)*(((-36.098)+(((100000.0)*cj11*px))+(((100000.0)*py*sj11))))), ((-1.20662010826894)+(((4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1178=IKcos(j14);
IkReal x1179=IKsin(j14);
IkReal x1180=((1.0)*cj11);
IkReal x1181=(px*sj11);
IkReal x1182=((0.24199)*x1179);
IkReal x1183=((1.0)*py*sj11);
evalcond[0]=((-0.29199)+(((-0.24199)*x1178))+pz);
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1178))+(((-0.58398)*pz)));
evalcond[2]=(x1181+(((-1.0)*py*x1180))+((sj13*x1182)));
evalcond[3]=((0.00036098)+(((-1.0)*x1183))+(((-1.0)*px*x1180))+((cj13*x1182)));
evalcond[4]=((((0.00036098)*cj13))+x1182+(((-1.0)*cj13*x1183))+(((-1.0)*py*sj13*x1180))+(((-1.0)*cj13*px*x1180))+((sj13*x1181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(sj13,-1);
if(!x1184.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1184.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1184.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))))+IKsqr(((-1.20662010826894)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x1184.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))), ((-1.20662010826894)+(((4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1185=IKcos(j14);
IkReal x1186=IKsin(j14);
IkReal x1187=((1.0)*cj11);
IkReal x1188=(px*sj11);
IkReal x1189=((0.24199)*x1186);
IkReal x1190=((1.0)*py*sj11);
evalcond[0]=((-0.29199)+(((-0.24199)*x1185))+pz);
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1185))+(((-0.58398)*pz)));
evalcond[2]=(x1188+(((-1.0)*py*x1187))+((sj13*x1189)));
evalcond[3]=((0.00036098)+(((-1.0)*x1190))+(((-1.0)*px*x1187))+((cj13*x1189)));
evalcond[4]=((((0.00036098)*cj13))+x1189+(((-1.0)*cj13*x1190))+(((-1.0)*py*sj13*x1187))+(((-1.0)*cj13*px*x1187))+((sj13*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11))))+IKsqr(((-1.20662010826894)+(((-4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((4.13240216537873)*cj11*py))+(((-4.13240216537873)*px*sj11))), ((-1.20662010826894)+(((-4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1191=IKcos(j14);
evalcond[0]=((0.29199)+pz+(((0.24199)*x1191)));
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1191))+(((0.58398)*pz)));
evalcond[2]=((((0.24199)*(IKsin(j14))))+((px*sj11))+(((-1.0)*cj11*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py))))+IKsqr(((-1.20662010826894)+(((-4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((4.13240216537873)*px*sj11))+(((-4.13240216537873)*cj11*py))), ((-1.20662010826894)+(((-4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1192=IKcos(j14);
evalcond[0]=((0.29199)+pz+(((0.24199)*x1192)));
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1192))+(((0.58398)*pz)));
evalcond[2]=(((px*sj11))+(((-0.24199)*(IKsin(j14))))+(((-1.0)*cj11*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((0.00149171453365842)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00149171453365842)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))))+IKsqr(((-1.20662010826894)+(((-4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.00149171453365842)+(((-4.13240216537873)*py*sj11))+(((-4.13240216537873)*cj11*px))), ((-1.20662010826894)+(((-4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1193=IKcos(j14);
evalcond[0]=((0.29199)+pz+(((0.24199)*x1193)));
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1193))+(((0.58398)*pz)));
evalcond[2]=((0.00036098)+(((-0.24199)*(IKsin(j14))))+(((-1.0)*py*sj11))+(((-1.0)*cj11*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-0.00149171453365842)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00149171453365842)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))))+IKsqr(((-1.20662010826894)+(((-4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-0.00149171453365842)+(((4.13240216537873)*cj11*px))+(((4.13240216537873)*py*sj11))), ((-1.20662010826894)+(((-4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1194=IKcos(j14);
evalcond[0]=((0.29199)+pz+(((0.24199)*x1194)));
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1194))+(((0.58398)*pz)));
evalcond[2]=((0.00036098)+(((0.24199)*(IKsin(j14))))+(((-1.0)*py*sj11))+(((-1.0)*cj11*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(cj13,-1);
if(!x1195.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1195.value)*(((36.098)+(((-100000.0)*py*sj11))+(((-100000.0)*cj11*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1195.value)*(((36.098)+(((-100000.0)*py*sj11))+(((-100000.0)*cj11*px))))))+IKsqr(((-1.20662010826894)+(((-4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x1195.value)*(((36.098)+(((-100000.0)*py*sj11))+(((-100000.0)*cj11*px))))), ((-1.20662010826894)+(((-4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1196=IKcos(j14);
IkReal x1197=IKsin(j14);
IkReal x1198=(cj11*px);
IkReal x1199=(py*sj11);
IkReal x1200=(px*sj11);
IkReal x1201=((0.24199)*x1197);
IkReal x1202=((1.0)*cj11*py);
evalcond[0]=((0.29199)+pz+(((0.24199)*x1196)));
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1196))+(((0.58398)*pz)));
evalcond[2]=(x1200+((sj13*x1201))+(((-1.0)*x1202)));
evalcond[3]=((0.00036098)+(((-1.0)*cj13*x1201))+(((-1.0)*x1198))+(((-1.0)*x1199)));
evalcond[4]=(x1201+((sj13*x1200))+(((-1.0)*sj13*x1202))+((cj13*x1198))+((cj13*x1199))+(((-0.00036098)*cj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(sj13,-1);
if(!x1203.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1203.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20662010826894)+(((-4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1203.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))))+IKsqr(((-1.20662010826894)+(((-4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x1203.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))), ((-1.20662010826894)+(((-4.13240216537873)*pz))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1204=IKcos(j14);
IkReal x1205=IKsin(j14);
IkReal x1206=(cj11*px);
IkReal x1207=(py*sj11);
IkReal x1208=(px*sj11);
IkReal x1209=((0.24199)*x1205);
IkReal x1210=((1.0)*cj11*py);
evalcond[0]=((0.29199)+(((0.24199)*x1204))+pz);
evalcond[1]=((0.1705163202)+(((0.1413173202)*x1204))+(((0.58398)*pz)));
evalcond[2]=(x1208+((sj13*x1209))+(((-1.0)*x1210)));
evalcond[3]=((0.00036098)+(((-1.0)*x1207))+(((-1.0)*x1206))+(((-1.0)*cj13*x1209)));
evalcond[4]=(((cj13*x1206))+((cj13*x1207))+x1209+((sj13*x1208))+(((-1.0)*sj13*x1210))+(((-0.00036098)*cj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(sj13,-1);
if(!x1216.valid){
continue;
}
IkReal x1211=x1216.value;
IkReal x1212=(px*sj11);
IkReal x1213=(cj11*py);
IkReal x1214=((4.13240216537873e-5)*x1211);
IkReal x1215=((100000.0)*cj13*sj12);
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(cj12,-1);
if(!x1217.valid){
continue;
}
if( IKabs((x1214*(((((-100000.0)*x1212))+(((100000.0)*x1213)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1214*(x1217.value)*((((x1213*x1215))+(((100000.0)*pz*sj13))+(((-29199.0)*cj12*sj13))+(((-1.0)*x1212*x1215)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1214*(((((-100000.0)*x1212))+(((100000.0)*x1213))))))+IKsqr((x1214*(x1217.value)*((((x1213*x1215))+(((100000.0)*pz*sj13))+(((-29199.0)*cj12*sj13))+(((-1.0)*x1212*x1215))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x1214*(((((-100000.0)*x1212))+(((100000.0)*x1213))))), (x1214*(x1217.value)*((((x1213*x1215))+(((100000.0)*pz*sj13))+(((-29199.0)*cj12*sj13))+(((-1.0)*x1212*x1215))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1218=IKsin(j14);
IkReal x1219=IKcos(j14);
IkReal x1220=(cj13*sj12);
IkReal x1221=(px*sj11);
IkReal x1222=(py*sj11);
IkReal x1223=(cj12*cj13);
IkReal x1224=(cj11*px);
IkReal x1225=((1.0)*cj11*py);
IkReal x1226=((0.24199)*x1218);
IkReal x1227=((0.24199)*x1219);
evalcond[0]=(x1221+(((-1.0)*x1225))+((sj13*x1226)));
evalcond[1]=((0.14381718989344)+(((-1.0)*pp))+(((0.00072196)*x1224))+(((0.00072196)*x1222))+(((0.1413173202)*x1219)));
evalcond[2]=((((-0.29199)*cj12))+(((-1.0)*cj12*x1227))+((x1220*x1226))+pz);
evalcond[3]=((-0.29199)+(((-1.0)*x1227))+((cj12*pz))+(((-0.00036098)*sj12))+((sj12*x1222))+((sj12*x1224)));
evalcond[4]=((0.00036098)+(((-1.0)*x1222))+(((-1.0)*x1224))+((x1223*x1226))+(((0.29199)*sj12))+((sj12*x1227)));
evalcond[5]=((((-1.0)*x1223*x1224))+x1226+((pz*x1220))+(((-1.0)*sj13*x1225))+(((-1.0)*x1222*x1223))+(((0.00036098)*x1223))+((sj13*x1221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1228=(py*sj11);
IkReal x1229=((3609800.0)*cj12);
IkReal x1230=(cj11*px);
CheckValue<IkReal> x1231=IKPowWithIntegerCheck(cj13,-1);
if(!x1231.valid){
continue;
}
CheckValue<IkReal> x1232=IKPowWithIntegerCheck(sj12,-1);
if(!x1232.valid){
continue;
}
if( IKabs(((1.41525468864644e-9)*(x1231.value)*(x1232.value)*(((((-2919900000.0)*pz))+(((133495651.532802)*cj12))+(((-1.0)*x1228*x1229))+(((-1.0)*x1229*x1230))+(((5000000000.0)*cj12*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768976152323)+(((7.07627344323219)*pp))+(((-0.00510878637507591)*x1230))+(((-0.00510878637507591)*x1228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.41525468864644e-9)*(x1231.value)*(x1232.value)*(((((-2919900000.0)*pz))+(((133495651.532802)*cj12))+(((-1.0)*x1228*x1229))+(((-1.0)*x1229*x1230))+(((5000000000.0)*cj12*pp))))))+IKsqr(((-1.01768976152323)+(((7.07627344323219)*pp))+(((-0.00510878637507591)*x1230))+(((-0.00510878637507591)*x1228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((1.41525468864644e-9)*(x1231.value)*(x1232.value)*(((((-2919900000.0)*pz))+(((133495651.532802)*cj12))+(((-1.0)*x1228*x1229))+(((-1.0)*x1229*x1230))+(((5000000000.0)*cj12*pp))))), ((-1.01768976152323)+(((7.07627344323219)*pp))+(((-0.00510878637507591)*x1230))+(((-0.00510878637507591)*x1228))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1233=IKsin(j14);
IkReal x1234=IKcos(j14);
IkReal x1235=(cj13*sj12);
IkReal x1236=(px*sj11);
IkReal x1237=(py*sj11);
IkReal x1238=(cj12*cj13);
IkReal x1239=(cj11*px);
IkReal x1240=((1.0)*cj11*py);
IkReal x1241=((0.24199)*x1233);
IkReal x1242=((0.24199)*x1234);
evalcond[0]=(x1236+((sj13*x1241))+(((-1.0)*x1240)));
evalcond[1]=((0.14381718989344)+(((-1.0)*pp))+(((0.00072196)*x1237))+(((0.00072196)*x1239))+(((0.1413173202)*x1234)));
evalcond[2]=((((-0.29199)*cj12))+(((-1.0)*cj12*x1242))+pz+((x1235*x1241)));
evalcond[3]=((-0.29199)+((cj12*pz))+(((-0.00036098)*sj12))+(((-1.0)*x1242))+((sj12*x1237))+((sj12*x1239)));
evalcond[4]=((0.00036098)+(((-1.0)*x1239))+(((-1.0)*x1237))+((sj12*x1242))+(((0.29199)*sj12))+((x1238*x1241)));
evalcond[5]=(x1241+((pz*x1235))+(((-1.0)*x1238*x1239))+(((-1.0)*x1237*x1238))+(((0.00036098)*x1238))+((sj13*x1236))+(((-1.0)*sj13*x1240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1243=IKPowWithIntegerCheck(sj13,-1);
if(!x1243.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1243.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1243.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))))+IKsqr(((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((4.13240216537873e-5)*(x1243.value)*(((((100000.0)*cj11*py))+(((-100000.0)*px*sj11))))), ((-1.01768976152323)+(((-0.00510878637507591)*py*sj11))+(((7.07627344323219)*pp))+(((-0.00510878637507591)*cj11*px))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1244=IKsin(j14);
IkReal x1245=IKcos(j14);
IkReal x1246=(cj13*sj12);
IkReal x1247=(px*sj11);
IkReal x1248=(py*sj11);
IkReal x1249=(cj12*cj13);
IkReal x1250=(cj11*px);
IkReal x1251=((1.0)*cj11*py);
IkReal x1252=((0.24199)*x1244);
IkReal x1253=((0.24199)*x1245);
evalcond[0]=((((-1.0)*x1251))+x1247+((sj13*x1252)));
evalcond[1]=((0.14381718989344)+(((0.00072196)*x1250))+(((-1.0)*pp))+(((0.1413173202)*x1245))+(((0.00072196)*x1248)));
evalcond[2]=((((-0.29199)*cj12))+((x1246*x1252))+pz+(((-1.0)*cj12*x1253)));
evalcond[3]=((-0.29199)+(((-1.0)*x1253))+((sj12*x1248))+((cj12*pz))+(((-0.00036098)*sj12))+((sj12*x1250)));
evalcond[4]=((0.00036098)+(((-1.0)*x1248))+(((0.29199)*sj12))+((sj12*x1253))+(((-1.0)*x1250))+((x1249*x1252)));
evalcond[5]=(x1252+((sj13*x1247))+(((0.00036098)*x1249))+((pz*x1246))+(((-1.0)*x1249*x1250))+(((-1.0)*sj13*x1251))+(((-1.0)*x1248*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x199=((1.0)*sj14);
IkReal x200=(cj12*cj14);
IkReal x201=((1.0)*cj13);
IkReal x202=(cj14*sj12);
IkReal x203=(cj11*sj13);
IkReal x204=(sj12*sj13);
IkReal x205=(sj11*sj13);
IkReal x206=((1.0)*x205);
IkReal x207=(((cj13*x200))+(((-1.0)*sj12*x199)));
IkReal x208=(((cj11*cj13))+(((-1.0)*cj12*x206)));
IkReal x209=(((cj12*cj13*sj14))+x202);
IkReal x210=(x200+(((-1.0)*cj13*sj12*x199)));
IkReal x211=(cj11*x207);
IkReal x212=((((-1.0)*x201*x202))+(((-1.0)*cj12*x199)));
IkReal x213=((((-1.0)*cj12*x203))+(((-1.0)*sj11*x201)));
IkReal x214=(((cj14*x203))+((sj11*x207)));
IkReal x215=((((-1.0)*x199*x205))+((cj11*x209)));
IkReal x216=(((sj14*x203))+((sj11*x209)));
IkReal x217=((((-1.0)*cj14*x205))+x211);
new_r00=(((r00*((x211+(((-1.0)*cj14*x206))))))+((r10*x214))+((r20*x212)));
new_r01=(((r21*x212))+((r11*x214))+((r01*x217)));
new_r02=(((r12*x214))+((r02*x217))+((r22*x212)));
new_r10=(((r10*x208))+((r20*x204))+((r00*x213)));
new_r11=(((r11*x208))+((r21*x204))+((r01*x213)));
new_r12=(((r22*x204))+((r02*x213))+((r12*x208)));
new_r20=(((r00*x215))+((r10*x216))+((r20*x210)));
new_r21=(((r21*x210))+((r11*x216))+((r01*x215)));
new_r22=(((r12*x216))+((r02*x215))+((r22*x210)));
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=new_r22;
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IkReal j15eval[3];
j15eval[0]=sj16;
j15eval[1]=IKsign(sj16);
j15eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=new_r12;
j15eval[1]=sj16;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j17mul = 1;
j17=0;
j15mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].fmul = j15mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].fmul = j17mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j17mul = 1;
j17=0;
j15mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].fmul = j15mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].fmul = j17mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x218=new_r22*new_r22;
IkReal x219=((16.0)*new_r10);
IkReal x220=((16.0)*new_r01);
IkReal x221=((16.0)*new_r22);
IkReal x222=((8.0)*new_r11);
IkReal x223=((8.0)*new_r00);
IkReal x224=(x218*x219);
IkReal x225=(x218*x220);
j15eval[0]=((IKabs((((x218*x222))+(((-1.0)*new_r22*x223)))))+(IKabs(((((-16.0)*new_r11*x218))+(((32.0)*new_r11))+(((-1.0)*new_r00*x221)))))+(IKabs((x220+(((-1.0)*x225)))))+(IKabs((((new_r22*x222))+(((-1.0)*x223)))))+(IKabs((x224+(((-1.0)*x219)))))+(IKabs((x219+(((-1.0)*x224)))))+(IKabs(((((-32.0)*new_r00*x218))+((new_r11*x221))+(((16.0)*new_r00)))))+(IKabs((x225+(((-1.0)*x220))))));
if( IKabs(j15eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j15, j17]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j15evalpoly[1];
IkReal x226=new_r22*new_r22;
IkReal x227=((16.0)*new_r10);
IkReal x228=(new_r11*new_r22);
IkReal x229=(x226*x227);
IkReal x230=((((8.0)*x228))+(((-8.0)*new_r00)));
op[0]=x230;
op[1]=(x227+(((-1.0)*x229)));
op[2]=((((16.0)*new_r00))+(((16.0)*x228))+(((-32.0)*new_r00*x226)));
op[3]=(x229+(((-1.0)*x227)));
op[4]=x230;
polyroots4(op,zeror,numroots);
IkReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[4]={true,true,true,true};
_nj15 = 4;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

IkReal x231=new_r22*new_r22;
IkReal x232=((16.0)*new_r01);
IkReal x233=(new_r00*new_r22);
IkReal x234=((8.0)*x233);
IkReal x235=(new_r11*x231);
IkReal x236=(x231*x232);
IkReal x237=((8.0)*x235);
j15evalpoly[0]=((((htj15*htj15)*(((((32.0)*new_r11))+(((-16.0)*x235))+(((-16.0)*x233))))))+((htj15*(((((-1.0)*x236))+x232))))+(((-1.0)*x234))+x237+(((htj15*htj15*htj15)*(((((-1.0)*x232))+x236))))+(((htj15*htj15*htj15*htj15)*(((((-1.0)*x234))+x237)))));
if( IKabs(j15evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j17eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x238=cj15*cj15;
IkReal x239=(cj15*new_r22);
IkReal x240=((-1.0)+(((-1.0)*x238*(new_r22*new_r22)))+x238);
j17eval[0]=x240;
j17eval[1]=IKsign(x240);
j17eval[2]=((IKabs((((new_r01*x239))+((new_r00*sj15)))))+(IKabs(((((-1.0)*new_r00*x239))+((new_r01*sj15))))));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j17eval[0]=new_r22;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x241=new_r22*new_r22;
j17eval[0]=(((cj15*x241))+(((-1.0)*cj15)));
j17eval[1]=(((sj15*x241))+(((-1.0)*sj15)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x242=IKsin(j17);
IkReal x243=IKcos(j17);
evalcond[0]=x242;
evalcond[1]=((-1.0)*x243);
evalcond[2]=((((-1.0)*x242))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x243))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x244=IKsin(j17);
IkReal x245=IKcos(j17);
evalcond[0]=x244;
evalcond[1]=((-1.0)*x245);
evalcond[2]=((((-1.0)*x244))+new_r00);
evalcond[3]=((((-1.0)*x245))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x246=IKsin(j17);
IkReal x247=IKcos(j17);
evalcond[0]=x246;
evalcond[1]=((-1.0)*x247);
evalcond[2]=((((-1.0)*x246))+new_r10);
evalcond[3]=((((-1.0)*x247))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x248=IKsin(j17);
IkReal x249=IKcos(j17);
evalcond[0]=x248;
evalcond[1]=((-1.0)*x249);
evalcond[2]=((((-1.0)*x248))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x249))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x250=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x250.valid){
continue;
}
if((x250.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x250.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs((cj15+(((-1.0)*gconst24)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj15=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
cj15=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=IKacos(gconst24);
CheckValue<IkReal> x251=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x251.valid){
continue;
}
if((x251.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x251.value)));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x252=IKPowWithIntegerCheck(gconst24,-1);
if(!x252.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x252.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x252.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x252.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x253=IKcos(j17);
IkReal x254=IKsin(j17);
IkReal x255=((1.0)*x253);
IkReal x256=((1.0)*x254);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x257=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
IkReal x258=((1.0)*x257);
evalcond[0]=x254;
evalcond[1]=((-1.0)*x253);
evalcond[2]=((((-1.0)*gconst24*x255))+new_r11);
evalcond[3]=((((-1.0)*gconst24*x256))+new_r10);
evalcond[4]=(((x253*x257))+new_r01);
evalcond[5]=(((x254*x257))+new_r00);
evalcond[6]=(((gconst24*new_r10))+(((-1.0)*new_r00*x258))+(((-1.0)*x256)));
evalcond[7]=((((-1.0)*new_r01*x258))+((gconst24*new_r11))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x259=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x259.valid){
continue;
}
CheckValue<IkReal> x260 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x260.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x259.value)))+(x260.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x261=IKcos(j17);
IkReal x262=IKsin(j17);
IkReal x263=((1.0)*x261);
IkReal x264=((1.0)*x262);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x265=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
IkReal x266=((1.0)*x265);
evalcond[0]=x262;
evalcond[1]=((-1.0)*x261);
evalcond[2]=(new_r11+(((-1.0)*gconst24*x263)));
evalcond[3]=(new_r10+(((-1.0)*gconst24*x264)));
evalcond[4]=(((x261*x265))+new_r01);
evalcond[5]=(((x262*x265))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x266))+((gconst24*new_r10))+(((-1.0)*x264)));
evalcond[7]=((((-1.0)*new_r01*x266))+((gconst24*new_r11))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x267=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x267.valid){
continue;
}
if((x267.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x267.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj15)))))+(IKabs((cj15+(((-1.0)*gconst24)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj15=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))))));
cj15=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=((-1.0)*(IKacos(gconst24)));
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x268.valid){
continue;
}
if((x268.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x268.value)));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x269=IKPowWithIntegerCheck(gconst24,-1);
if(!x269.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x269.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x269.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x269.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x270=IKcos(j17);
IkReal x271=IKsin(j17);
IkReal x272=((1.0)*x270);
IkReal x273=((1.0)*x271);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x274=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
evalcond[0]=x271;
evalcond[1]=((-1.0)*x270);
evalcond[2]=(new_r11+(((-1.0)*gconst24*x272)));
evalcond[3]=(new_r10+(((-1.0)*gconst24*x273)));
evalcond[4]=((((-1.0)*x272*x274))+new_r01);
evalcond[5]=((((-1.0)*x273*x274))+new_r00);
evalcond[6]=(((new_r00*x274))+((gconst24*new_r10))+(((-1.0)*x273)));
evalcond[7]=(((new_r01*x274))+((gconst24*new_r11))+(((-1.0)*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x275=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x275.valid){
continue;
}
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x275.value)))+(x276.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x277=IKcos(j17);
IkReal x278=IKsin(j17);
IkReal x279=((1.0)*x277);
IkReal x280=((1.0)*x278);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x281=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
evalcond[0]=x278;
evalcond[1]=((-1.0)*x277);
evalcond[2]=(new_r11+(((-1.0)*gconst24*x279)));
evalcond[3]=((((-1.0)*gconst24*x280))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x279*x281)));
evalcond[5]=((((-1.0)*x280*x281))+new_r00);
evalcond[6]=(((gconst24*new_r10))+(((-1.0)*x280))+((new_r00*x281)));
evalcond[7]=(((gconst24*new_r11))+(((-1.0)*x279))+((new_r01*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x282=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x282.valid){
continue;
}
if((x282.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x282.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs((cj15+(((-1.0)*gconst25)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj15=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
cj15=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=IKacos(gconst25);
CheckValue<IkReal> x283=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x283.valid){
continue;
}
if((x283.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x283.value);
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(gconst25,-1);
if(!x284.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x284.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x284.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x284.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x285=IKcos(j17);
IkReal x286=IKsin(j17);
IkReal x287=((1.0)*x286);
IkReal x288=((1.0)*x285);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x289=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
IkReal x290=((1.0)*x289);
evalcond[0]=x286;
evalcond[1]=((-1.0)*x285);
evalcond[2]=((((-1.0)*gconst25*x288))+new_r11);
evalcond[3]=((((-1.0)*gconst25*x287))+new_r10);
evalcond[4]=(((x285*x289))+new_r01);
evalcond[5]=(((x286*x289))+new_r00);
evalcond[6]=(((gconst25*new_r10))+(((-1.0)*x287))+(((-1.0)*new_r00*x290)));
evalcond[7]=((((-1.0)*new_r01*x290))+((gconst25*new_r11))+(((-1.0)*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x291=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x291.valid){
continue;
}
CheckValue<IkReal> x292 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x292.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x291.value)))+(x292.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x293=IKcos(j17);
IkReal x294=IKsin(j17);
IkReal x295=((1.0)*x294);
IkReal x296=((1.0)*x293);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x297=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
IkReal x298=((1.0)*x297);
evalcond[0]=x294;
evalcond[1]=((-1.0)*x293);
evalcond[2]=((((-1.0)*gconst25*x296))+new_r11);
evalcond[3]=((((-1.0)*gconst25*x295))+new_r10);
evalcond[4]=(new_r01+((x293*x297)));
evalcond[5]=(((x294*x297))+new_r00);
evalcond[6]=(((gconst25*new_r10))+(((-1.0)*x295))+(((-1.0)*new_r00*x298)));
evalcond[7]=((((-1.0)*new_r01*x298))+((gconst25*new_r11))+(((-1.0)*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x299=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x299.valid){
continue;
}
if((x299.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x299.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj15+(((-1.0)*gconst25)))))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj15=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))));
cj15=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=((-1.0)*(IKacos(gconst25)));
CheckValue<IkReal> x300=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x300.valid){
continue;
}
if((x300.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x300.value);
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x301=IKPowWithIntegerCheck(gconst25,-1);
if(!x301.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x301.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x301.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x301.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x302=IKcos(j17);
IkReal x303=IKsin(j17);
IkReal x304=((1.0)*x303);
IkReal x305=((1.0)*x302);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x306=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
evalcond[0]=x303;
evalcond[1]=((-1.0)*x302);
evalcond[2]=((((-1.0)*gconst25*x305))+new_r11);
evalcond[3]=((((-1.0)*gconst25*x304))+new_r10);
evalcond[4]=((((-1.0)*x305*x306))+new_r01);
evalcond[5]=((((-1.0)*x304*x306))+new_r00);
evalcond[6]=(((new_r00*x306))+((gconst25*new_r10))+(((-1.0)*x304)));
evalcond[7]=(((gconst25*new_r11))+((new_r01*x306))+(((-1.0)*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x307=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x307.valid){
continue;
}
CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x308.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x307.value)))+(x308.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x309=IKcos(j17);
IkReal x310=IKsin(j17);
IkReal x311=((1.0)*x310);
IkReal x312=((1.0)*x309);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x313=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
evalcond[0]=x310;
evalcond[1]=((-1.0)*x309);
evalcond[2]=(new_r11+(((-1.0)*gconst25*x312)));
evalcond[3]=(new_r10+(((-1.0)*gconst25*x311)));
evalcond[4]=((((-1.0)*x312*x313))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x311*x313)));
evalcond[6]=(((gconst25*new_r10))+((new_r00*x313))+(((-1.0)*x311)));
evalcond[7]=(((gconst25*new_r11))+((new_r01*x313))+(((-1.0)*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x314=new_r22*new_r22;
CheckValue<IkReal> x315=IKPowWithIntegerCheck((((cj15*x314))+(((-1.0)*cj15))),-1);
if(!x315.valid){
continue;
}
CheckValue<IkReal> x316=IKPowWithIntegerCheck((((sj15*x314))+(((-1.0)*sj15))),-1);
if(!x316.valid){
continue;
}
if( IKabs(((x315.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x316.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x315.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x316.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((x315.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x316.value)*((((new_r10*new_r22))+new_r01))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x317=IKsin(j17);
IkReal x318=IKcos(j17);
IkReal x319=((1.0)*sj15);
IkReal x320=(new_r22*sj15);
IkReal x321=(cj15*new_r22);
IkReal x322=((1.0)*x318);
IkReal x323=((1.0)*x317);
evalcond[0]=(((cj15*new_r01))+((new_r22*x317))+((new_r11*sj15)));
evalcond[1]=(((new_r01*x321))+x317+((new_r11*x320)));
evalcond[2]=((((-1.0)*new_r00*x319))+(((-1.0)*x323))+((cj15*new_r10)));
evalcond[3]=((((-1.0)*x322))+((cj15*new_r11))+(((-1.0)*new_r01*x319)));
evalcond[4]=(((sj15*x318))+((x317*x321))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x322))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[6]=(((sj15*x317))+(((-1.0)*x321*x322))+new_r00);
evalcond[7]=((((-1.0)*cj15*x322))+((x317*x320))+new_r11);
evalcond[8]=(((new_r00*x321))+(((-1.0)*x322))+((new_r10*x320)));
evalcond[9]=((((-1.0)*new_r22*x318*x319))+(((-1.0)*cj15*x323))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x324=((1.0)*new_r01);
CheckValue<IkReal> x325=IKPowWithIntegerCheck(new_r22,-1);
if(!x325.valid){
continue;
}
if( IKabs(((x325.value)*(((((-1.0)*cj15*x324))+(((-1.0)*new_r11*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*new_r11))+(((-1.0)*sj15*x324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x325.value)*(((((-1.0)*cj15*x324))+(((-1.0)*new_r11*sj15))))))+IKsqr((((cj15*new_r11))+(((-1.0)*sj15*x324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((x325.value)*(((((-1.0)*cj15*x324))+(((-1.0)*new_r11*sj15))))), (((cj15*new_r11))+(((-1.0)*sj15*x324))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x326=IKsin(j17);
IkReal x327=IKcos(j17);
IkReal x328=((1.0)*sj15);
IkReal x329=(new_r22*sj15);
IkReal x330=(cj15*new_r22);
IkReal x331=((1.0)*x327);
IkReal x332=((1.0)*x326);
evalcond[0]=(((new_r22*x326))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=(((new_r01*x330))+x326+((new_r11*x329)));
evalcond[2]=(((cj15*new_r10))+(((-1.0)*new_r00*x328))+(((-1.0)*x332)));
evalcond[3]=(((cj15*new_r11))+(((-1.0)*new_r01*x328))+(((-1.0)*x331)));
evalcond[4]=(new_r01+((x326*x330))+((sj15*x327)));
evalcond[5]=((((-1.0)*new_r22*x331))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[6]=((((-1.0)*x330*x331))+new_r00+((sj15*x326)));
evalcond[7]=(((x326*x329))+(((-1.0)*cj15*x331))+new_r11);
evalcond[8]=(((new_r00*x330))+(((-1.0)*x331))+((new_r10*x329)));
evalcond[9]=((((-1.0)*new_r22*x327*x328))+(((-1.0)*cj15*x332))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x333=cj15*cj15;
IkReal x334=(cj15*new_r22);
CheckValue<IkReal> x335 = IKatan2WithCheck(IkReal((((new_r01*x334))+((new_r00*sj15)))),IkReal((((new_r01*sj15))+(((-1.0)*new_r00*x334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x335.valid){
continue;
}
CheckValue<IkReal> x336=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x333*(new_r22*new_r22)))+x333)),-1);
if(!x336.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x335.value)+(((1.5707963267949)*(x336.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x337=IKsin(j17);
IkReal x338=IKcos(j17);
IkReal x339=((1.0)*sj15);
IkReal x340=(new_r22*sj15);
IkReal x341=(cj15*new_r22);
IkReal x342=((1.0)*x338);
IkReal x343=((1.0)*x337);
evalcond[0]=(((new_r22*x337))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=(((new_r11*x340))+((new_r01*x341))+x337);
evalcond[2]=(((cj15*new_r10))+(((-1.0)*new_r00*x339))+(((-1.0)*x343)));
evalcond[3]=(((cj15*new_r11))+(((-1.0)*x342))+(((-1.0)*new_r01*x339)));
evalcond[4]=(((x337*x341))+((sj15*x338))+new_r01);
evalcond[5]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*new_r22*x342)));
evalcond[6]=(((sj15*x337))+(((-1.0)*x341*x342))+new_r00);
evalcond[7]=(((x337*x340))+new_r11+(((-1.0)*cj15*x342)));
evalcond[8]=(((new_r00*x341))+((new_r10*x340))+(((-1.0)*x342)));
evalcond[9]=((((-1.0)*new_r22*x338*x339))+new_r10+(((-1.0)*cj15*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15, j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(sj16,-1);
if(!x345.valid){
continue;
}
IkReal x344=x345.value;
CheckValue<IkReal> x346=IKPowWithIntegerCheck(new_r12,-1);
if(!x346.valid){
continue;
}
if( IKabs((x344*(x346.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj16*cj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x344)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x344*(x346.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj16*cj16)))))))+IKsqr((new_r02*x344))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x344*(x346.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj16*cj16)))))), (new_r02*x344));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x347=IKcos(j15);
IkReal x348=IKsin(j15);
IkReal x349=((1.0)*sj16);
IkReal x350=((1.0)*cj16);
IkReal x351=(new_r12*x348);
IkReal x352=(new_r02*x347);
evalcond[0]=((((-1.0)*x347*x349))+new_r02);
evalcond[1]=((((-1.0)*x348*x349))+new_r12);
evalcond[2]=(((new_r12*x347))+(((-1.0)*new_r02*x348)));
evalcond[3]=(x351+x352+(((-1.0)*x349)));
evalcond[4]=(((cj16*x352))+((cj16*x351))+(((-1.0)*new_r22*x349)));
evalcond[5]=((((-1.0)*new_r00*x347*x349))+(((-1.0)*new_r10*x348*x349))+(((-1.0)*new_r20*x350)));
evalcond[6]=((((-1.0)*new_r01*x347*x349))+(((-1.0)*new_r11*x348*x349))+(((-1.0)*new_r21*x350)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x350))+(((-1.0)*x349*x352))+(((-1.0)*x349*x351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=sj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal j17eval[3];
j17eval[0]=cj15;
j17eval[1]=cj16;
j17eval[2]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=cj16;
j17eval[1]=IKsign(cj16);
j17eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=sj16;
j17eval[1]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x353=IKsin(j17);
IkReal x354=((1.0)*(IKcos(j17)));
evalcond[0]=(x353+new_r11);
evalcond[1]=((((-1.0)*x354))+new_r10);
evalcond[2]=((((-1.0)*x353))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x354))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x355=IKcos(j17);
IkReal x356=((1.0)*(IKsin(j17)));
evalcond[0]=(x355+new_r10);
evalcond[1]=((((-1.0)*x356))+new_r11);
evalcond[2]=((((-1.0)*x356))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x355))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x357=IKcos(j17);
IkReal x358=((1.0)*(IKsin(j17)));
evalcond[0]=(x357+new_r20);
evalcond[1]=((((-1.0)*x358))+new_r21);
evalcond[2]=((((-1.0)*x358))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x357))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x359=IKsin(j17);
IkReal x360=((1.0)*(IKcos(j17)));
evalcond[0]=(x359+new_r21);
evalcond[1]=((((-1.0)*x360))+new_r20);
evalcond[2]=((((-1.0)*x359))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x360))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[5];
IkReal x361=IKsin(j17);
IkReal x362=IKcos(j17);
evalcond[0]=x361;
evalcond[1]=((-1.0)*x362);
evalcond[2]=((-1.0)*new_r12*x361);
evalcond[3]=((((-1.0)*x361))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x362))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x363=IKPowWithIntegerCheck(sj16,-1);
if(!x363.valid){
continue;
}
CheckValue<IkReal> x364=IKPowWithIntegerCheck(new_r12,-1);
if(!x364.valid){
continue;
}
if( IKabs((new_r21*(x363.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x364.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x363.value)))+IKsqr(((-1.0)*new_r20*(x364.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((new_r21*(x363.value)), ((-1.0)*new_r20*(x364.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x365=IKsin(j17);
IkReal x366=IKcos(j17);
IkReal x367=((1.0)*sj16);
IkReal x368=((1.0)*x366);
evalcond[0]=(new_r20+((new_r12*x366)));
evalcond[1]=(((cj16*x365))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x365*x367)));
evalcond[3]=(new_r10+(((-1.0)*cj16*x368)));
evalcond[4]=((((-1.0)*x365))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x368))+(((-1.0)*new_r01)));
evalcond[6]=(x365+((cj16*new_r11))+(((-1.0)*new_r21*x367)));
evalcond[7]=((((-1.0)*new_r20*x367))+(((-1.0)*x368))+((cj16*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(new_r12,-1);
if(!x369.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x369.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x369.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x369.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x370=IKsin(j17);
IkReal x371=IKcos(j17);
IkReal x372=((1.0)*sj16);
IkReal x373=((1.0)*x371);
evalcond[0]=(((new_r12*x371))+new_r20);
evalcond[1]=(((cj16*x370))+new_r11);
evalcond[2]=((((-1.0)*x370*x372))+new_r21);
evalcond[3]=((((-1.0)*cj16*x373))+new_r10);
evalcond[4]=((((-1.0)*x370))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x373))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x372))+x370+((cj16*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x372))+(((-1.0)*x373))+((cj16*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x374 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x374.valid){
continue;
}
CheckValue<IkReal> x375=IKPowWithIntegerCheck(IKsign(cj16),-1);
if(!x375.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x374.value)+(((1.5707963267949)*(x375.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x376=IKsin(j17);
IkReal x377=IKcos(j17);
IkReal x378=((1.0)*sj16);
IkReal x379=((1.0)*x377);
evalcond[0]=(((new_r12*x377))+new_r20);
evalcond[1]=(((cj16*x376))+new_r11);
evalcond[2]=((((-1.0)*x376*x378))+new_r21);
evalcond[3]=((((-1.0)*cj16*x379))+new_r10);
evalcond[4]=((((-1.0)*x376))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x379))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x378))+x376+((cj16*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x378))+(((-1.0)*x379))+((cj16*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x380=IKcos(j17);
IkReal x381=IKsin(j17);
IkReal x382=((1.0)*new_r11);
IkReal x383=((1.0)*sj16);
IkReal x384=((1.0)*x380);
evalcond[0]=((((-1.0)*x381))+new_r00);
evalcond[1]=((((-1.0)*x384))+new_r01);
evalcond[2]=((((-1.0)*new_r12*x384))+new_r20);
evalcond[3]=((((-1.0)*x381*x383))+new_r21);
evalcond[4]=((((-1.0)*x382))+((cj16*x381)));
evalcond[5]=((((-1.0)*cj16*x384))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*cj16*x382))+x381+(((-1.0)*new_r21*x383)));
CheckValue<IkReal> x385=IKPowWithIntegerCheck(new_r12,-1);
if(!x385.valid){
continue;
}
evalcond[7]=(((new_r12*new_r20))+((new_r20*(x385.value)*(new_r22*new_r22)))+(((-1.0)*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x386=IKcos(j17);
IkReal x387=IKsin(j17);
IkReal x388=((1.0)*sj15);
IkReal x389=((1.0)*x387);
IkReal x390=((1.0)*x386);
evalcond[0]=(x386+new_r20);
evalcond[1]=((((-1.0)*x389))+new_r21);
evalcond[2]=(((sj15*x386))+new_r01);
evalcond[3]=(((sj15*x387))+new_r00);
evalcond[4]=((((-1.0)*cj15*x390))+new_r11);
evalcond[5]=((((-1.0)*cj15*x389))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x388))+((cj15*new_r10))+(((-1.0)*x389)));
evalcond[7]=((((-1.0)*x390))+(((-1.0)*new_r01*x388))+((cj15*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x391=IKcos(j17);
IkReal x392=IKsin(j17);
IkReal x393=((1.0)*sj15);
IkReal x394=((1.0)*x391);
IkReal x395=((1.0)*x392);
evalcond[0]=(x392+new_r21);
evalcond[1]=((((-1.0)*x394))+new_r20);
evalcond[2]=(new_r01+((sj15*x391)));
evalcond[3]=(new_r00+((sj15*x392)));
evalcond[4]=((((-1.0)*cj15*x394))+new_r11);
evalcond[5]=((((-1.0)*cj15*x395))+new_r10);
evalcond[6]=((((-1.0)*x395))+((cj15*new_r10))+(((-1.0)*new_r00*x393)));
evalcond[7]=((((-1.0)*new_r01*x393))+(((-1.0)*x394))+((cj15*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x396=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj15*x396))+(((-1.0)*new_r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj15*x396))+((cj15*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*x396))+(((-1.0)*new_r00*sj15))))+IKsqr(((((-1.0)*sj15*x396))+((cj15*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*cj15*x396))+(((-1.0)*new_r00*sj15))), ((((-1.0)*sj15*x396))+((cj15*new_r00))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x397=IKsin(j17);
IkReal x398=IKcos(j17);
IkReal x399=((1.0)*sj15);
IkReal x400=((1.0)*cj15);
IkReal x401=((1.0)*x398);
IkReal x402=(sj15*x397);
IkReal x403=(x398*x400);
evalcond[0]=(x397+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=(((cj15*x397))+new_r01+((sj15*x398)));
evalcond[2]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*x401)));
evalcond[3]=((((-1.0)*x397))+((cj15*new_r10))+(((-1.0)*new_r00*x399)));
evalcond[4]=((((-1.0)*new_r01*x399))+((cj15*new_r11))+(((-1.0)*x401)));
evalcond[5]=(x402+new_r00+(((-1.0)*x403)));
evalcond[6]=(x402+new_r11+(((-1.0)*x403)));
evalcond[7]=((((-1.0)*x398*x399))+(((-1.0)*x397*x400))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x404=((1.0)*sj15);
if( IKabs((((cj15*new_r01))+(((-1.0)*new_r00*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*new_r01))+(((-1.0)*new_r00*x404))))+IKsqr(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((cj15*new_r01))+(((-1.0)*new_r00*x404))), ((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x404))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x405=IKcos(j17);
IkReal x406=IKsin(j17);
IkReal x407=((1.0)*sj15);
IkReal x408=((1.0)*x406);
IkReal x409=(sj15*x405);
IkReal x410=((1.0)*x405);
IkReal x411=(cj15*x408);
evalcond[0]=(((cj15*new_r00))+x405+((new_r10*sj15)));
evalcond[1]=(((cj15*new_r01))+((new_r11*sj15))+(((-1.0)*x408)));
evalcond[2]=(((cj15*x405))+((sj15*x406))+new_r00);
evalcond[3]=(((cj15*new_r10))+(((-1.0)*new_r00*x407))+(((-1.0)*x408)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x410))+(((-1.0)*new_r01*x407)));
evalcond[5]=(x409+new_r01+(((-1.0)*x411)));
evalcond[6]=(x409+new_r10+(((-1.0)*x411)));
evalcond[7]=((((-1.0)*x406*x407))+new_r11+(((-1.0)*cj15*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x412=IKcos(j17);
IkReal x413=IKsin(j17);
IkReal x414=((1.0)*sj16);
IkReal x415=((1.0)*x412);
IkReal x416=((1.0)*x413);
evalcond[0]=(new_r20+((new_r02*x412)));
evalcond[1]=(new_r10+(((-1.0)*x416)));
evalcond[2]=(new_r11+(((-1.0)*x415)));
evalcond[3]=(((cj16*x413))+new_r01);
evalcond[4]=(new_r21+(((-1.0)*new_r02*x416)));
evalcond[5]=((((-1.0)*cj16*x415))+new_r00);
evalcond[6]=(x413+(((-1.0)*new_r21*x414))+((cj16*new_r01)));
evalcond[7]=((((-1.0)*new_r20*x414))+((cj16*new_r00))+(((-1.0)*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=IKsign(new_r02);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=cj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x417=IKcos(j17);
IkReal x418=((1.0)*(IKsin(j17)));
evalcond[0]=(x417+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x418)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x418)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x419=IKsin(j17);
IkReal x420=((1.0)*(IKcos(j17)));
evalcond[0]=(x419+new_r21);
evalcond[1]=((((-1.0)*x420))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x419)));
evalcond[3]=((((-1.0)*x420))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x421=IKsin(j17);
IkReal x422=IKcos(j17);
IkReal x423=((-1.0)*x422);
evalcond[0]=x421;
evalcond[1]=(new_r22*x421);
evalcond[2]=x423;
evalcond[3]=(new_r22*x423);
evalcond[4]=((((-1.0)*x421))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x422))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x424=IKPowWithIntegerCheck(new_r02,-1);
if(!x424.valid){
continue;
}
CheckValue<IkReal> x425=IKPowWithIntegerCheck(cj16,-1);
if(!x425.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x424.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x425.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x424.value)))+IKsqr(((-1.0)*new_r00*(x425.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21*(x424.value)), ((-1.0)*new_r00*(x425.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x426=IKsin(j17);
IkReal x427=IKcos(j17);
CheckValue<IkReal> x432=IKPowWithIntegerCheck(new_r02,-1);
if(!x432.valid){
continue;
}
IkReal x428=x432.value;
IkReal x429=new_r22*new_r22;
IkReal x430=((1.0)*x427);
IkReal x431=(x428*x429);
evalcond[0]=(new_r21+((new_r02*x426)));
evalcond[1]=((((-1.0)*new_r02*x430))+new_r20);
evalcond[2]=((((-1.0)*x426))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x430))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x426))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj16*x430)));
evalcond[6]=(((new_r21*x431))+x426+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x430))+((new_r20*x431))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x433=IKPowWithIntegerCheck(new_r02,-1);
if(!x433.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x433.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x433.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x433.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x434=IKsin(j17);
IkReal x435=IKcos(j17);
CheckValue<IkReal> x440=IKPowWithIntegerCheck(new_r02,-1);
if(!x440.valid){
continue;
}
IkReal x436=x440.value;
IkReal x437=new_r22*new_r22;
IkReal x438=((1.0)*x435);
IkReal x439=(x436*x437);
evalcond[0]=(new_r21+((new_r02*x434)));
evalcond[1]=((((-1.0)*new_r02*x438))+new_r20);
evalcond[2]=((((-1.0)*x434))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x438))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x434))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj16*x438)));
evalcond[6]=(((new_r21*x439))+x434+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x438))+((new_r20*x439))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x442.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x441.value)+(((1.5707963267949)*(x442.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x443=IKsin(j17);
IkReal x444=IKcos(j17);
CheckValue<IkReal> x449=IKPowWithIntegerCheck(new_r02,-1);
if(!x449.valid){
continue;
}
IkReal x445=x449.value;
IkReal x446=new_r22*new_r22;
IkReal x447=((1.0)*x444);
IkReal x448=(x445*x446);
evalcond[0]=(((new_r02*x443))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x447))+new_r20);
evalcond[2]=((((-1.0)*x443))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x447))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x443))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj16*x447))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x448))+x443+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x447))+((new_r20*x448))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=1.0;
if( IKabs(j17eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j17]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j17array[2], cj17array[2], sj17array[2], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[2]={true,true};
_nj17 = 2;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x451=IKPowWithIntegerCheck(sj16,-1);
if(!x451.valid){
continue;
}
IkReal x450=x451.value;
CheckValue<IkReal> x452=IKPowWithIntegerCheck(cj15,-1);
if(!x452.valid){
continue;
}
CheckValue<IkReal> x453=IKPowWithIntegerCheck(cj16,-1);
if(!x453.valid){
continue;
}
if( IKabs((x450*(x452.value)*(x453.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x450)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x450*(x452.value)*(x453.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))))+IKsqr(((-1.0)*new_r20*x450))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x450*(x452.value)*(x453.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))), ((-1.0)*new_r20*x450));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x454=IKsin(j17);
IkReal x455=IKcos(j17);
IkReal x456=((1.0)*sj15);
IkReal x457=(cj15*cj16);
IkReal x458=(cj16*sj15);
IkReal x459=((1.0)*sj16);
IkReal x460=((1.0)*x455);
IkReal x461=((1.0)*x454);
evalcond[0]=(((sj16*x455))+new_r20);
evalcond[1]=((((-1.0)*x454*x459))+new_r21);
evalcond[2]=(((cj16*x454))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=((((-1.0)*x461))+(((-1.0)*new_r00*x456))+((cj15*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x456))+(((-1.0)*x460))+((cj15*new_r11)));
evalcond[5]=(((x454*x457))+((sj15*x455))+new_r01);
evalcond[6]=(((cj15*new_r00))+(((-1.0)*cj16*x460))+((new_r10*sj15)));
evalcond[7]=(((sj15*x454))+new_r00+(((-1.0)*x457*x460)));
evalcond[8]=(((x454*x458))+(((-1.0)*cj15*x460))+new_r11);
evalcond[9]=((((-1.0)*cj15*x461))+(((-1.0)*cj16*x455*x456))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x459))+((new_r11*x458))+((new_r01*x457))+x454);
evalcond[11]=(((new_r10*x458))+(((-1.0)*new_r20*x459))+((new_r00*x457))+(((-1.0)*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x463=IKPowWithIntegerCheck(sj16,-1);
if(!x463.valid){
continue;
}
IkReal x462=x463.value;
CheckValue<IkReal> x464=IKPowWithIntegerCheck(sj15,-1);
if(!x464.valid){
continue;
}
if( IKabs((x462*(x464.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x462)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x462*(x464.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))))+IKsqr(((-1.0)*new_r20*x462))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x462*(x464.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))), ((-1.0)*new_r20*x462));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x465=IKsin(j17);
IkReal x466=IKcos(j17);
IkReal x467=((1.0)*sj15);
IkReal x468=(cj15*cj16);
IkReal x469=(cj16*sj15);
IkReal x470=((1.0)*sj16);
IkReal x471=((1.0)*x466);
IkReal x472=((1.0)*x465);
evalcond[0]=(((sj16*x466))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x465*x470)));
evalcond[2]=(((cj15*new_r01))+((new_r11*sj15))+((cj16*x465)));
evalcond[3]=((((-1.0)*x472))+((cj15*new_r10))+(((-1.0)*new_r00*x467)));
evalcond[4]=((((-1.0)*x471))+(((-1.0)*new_r01*x467))+((cj15*new_r11)));
evalcond[5]=(((x465*x468))+((sj15*x466))+new_r01);
evalcond[6]=(((cj15*new_r00))+(((-1.0)*cj16*x471))+((new_r10*sj15)));
evalcond[7]=((((-1.0)*x468*x471))+((sj15*x465))+new_r00);
evalcond[8]=(((x465*x469))+(((-1.0)*cj15*x471))+new_r11);
evalcond[9]=((((-1.0)*cj15*x472))+(((-1.0)*cj16*x466*x467))+new_r10);
evalcond[10]=(((new_r11*x469))+((new_r01*x468))+(((-1.0)*new_r21*x470))+x465);
evalcond[11]=(((new_r10*x469))+((new_r00*x468))+(((-1.0)*x471))+(((-1.0)*new_r20*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x473 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
CheckValue<IkReal> x474=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x474.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x473.value)+(((1.5707963267949)*(x474.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x475=IKsin(j17);
IkReal x476=IKcos(j17);
IkReal x477=((1.0)*sj15);
IkReal x478=(cj15*cj16);
IkReal x479=(cj16*sj15);
IkReal x480=((1.0)*sj16);
IkReal x481=((1.0)*x476);
IkReal x482=((1.0)*x475);
evalcond[0]=(((sj16*x476))+new_r20);
evalcond[1]=((((-1.0)*x475*x480))+new_r21);
evalcond[2]=(((cj16*x475))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=((((-1.0)*x482))+(((-1.0)*new_r00*x477))+((cj15*new_r10)));
evalcond[4]=((((-1.0)*x481))+(((-1.0)*new_r01*x477))+((cj15*new_r11)));
evalcond[5]=(((sj15*x476))+new_r01+((x475*x478)));
evalcond[6]=((((-1.0)*cj16*x481))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[7]=(((sj15*x475))+new_r00+(((-1.0)*x478*x481)));
evalcond[8]=((((-1.0)*cj15*x481))+new_r11+((x475*x479)));
evalcond[9]=((((-1.0)*cj16*x476*x477))+(((-1.0)*cj15*x482))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x480))+((new_r01*x478))+((new_r11*x479))+x475);
evalcond[11]=((((-1.0)*x481))+((new_r10*x479))+(((-1.0)*new_r20*x480))+((new_r00*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x483 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x483.valid){
continue;
}
CheckValue<IkReal> x484=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x484.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x483.value)+(((1.5707963267949)*(x484.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[2];
evalcond[0]=(((sj16*(IKcos(j17))))+new_r20);
evalcond[1]=((((-1.0)*sj16*(IKsin(j17))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[3];
j15eval[0]=sj16;
j15eval[1]=IKsign(sj16);
j15eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=cj17;
j15eval[1]=sj16;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x485=IKsin(j15);
IkReal x486=IKcos(j15);
IkReal x487=((1.0)*new_r02);
IkReal x488=((1.0)*sj16);
IkReal x489=(new_r22*x486);
IkReal x490=(new_r12*x485);
IkReal x491=(new_r00*x486);
IkReal x492=(sj16*x486);
IkReal x493=(new_r22*x485);
IkReal x494=(new_r11*x485);
IkReal x495=((1.0)*x485);
IkReal x496=(new_r10*x485);
evalcond[0]=(x485+new_r00);
evalcond[1]=(x489+new_r01);
evalcond[2]=(x493+new_r11);
evalcond[3]=((((-1.0)*x486))+new_r10);
evalcond[4]=((((-1.0)*x486*x488))+new_r02);
evalcond[5]=(new_r12+(((-1.0)*x485*x488)));
evalcond[6]=(x491+x496);
evalcond[7]=(((new_r12*x486))+(((-1.0)*x485*x487)));
evalcond[8]=((((-1.0)*new_r01*x495))+((new_r11*x486)));
evalcond[9]=(x494+new_r22+((new_r01*x486)));
evalcond[10]=((-1.0)+(((-1.0)*new_r00*x495))+((new_r10*x486)));
evalcond[11]=(((new_r10*x493))+((new_r00*x489)));
evalcond[12]=(((new_r02*x486))+(((-1.0)*x488))+x490);
evalcond[13]=((((-1.0)*x488*x496))+(((-1.0)*x488*x491)));
evalcond[14]=(((new_r02*x489))+((new_r22*x490))+(((-1.0)*new_r22*x488)));
evalcond[15]=((((-1.0)*x488*x494))+(((-1.0)*new_r01*x486*x488))+(((-1.0)*cj16*new_r21)));
evalcond[16]=((1.0)+(((-1.0)*sj16*x488))+((new_r11*x493))+((new_r01*x489)));
evalcond[17]=((1.0)+(((-1.0)*x488*x490))+(((-1.0)*x487*x492))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x497=IKcos(j15);
IkReal x498=IKsin(j15);
IkReal x499=((1.0)*new_r02);
IkReal x500=((1.0)*new_r22);
IkReal x501=((1.0)*sj16);
IkReal x502=(new_r12*x498);
IkReal x503=(new_r00*x497);
IkReal x504=(sj16*x497);
IkReal x505=(new_r10*x498);
IkReal x506=(new_r22*x497);
IkReal x507=(new_r11*x498);
IkReal x508=((1.0)*x498);
evalcond[0]=(x497+new_r10);
evalcond[1]=((((-1.0)*x508))+new_r00);
evalcond[2]=((((-1.0)*x497*x501))+new_r02);
evalcond[3]=(new_r12+(((-1.0)*x498*x501)));
evalcond[4]=((((-1.0)*x497*x500))+new_r01);
evalcond[5]=(new_r11+(((-1.0)*x498*x500)));
evalcond[6]=(x503+x505);
evalcond[7]=((((-1.0)*x498*x499))+((new_r12*x497)));
evalcond[8]=((((-1.0)*new_r01*x508))+((new_r11*x497)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x508))+((new_r10*x497)));
evalcond[10]=(((new_r22*x505))+((new_r22*x503)));
evalcond[11]=(((new_r02*x497))+(((-1.0)*x501))+x502);
evalcond[12]=((((-1.0)*x500))+x507+((new_r01*x497)));
evalcond[13]=((((-1.0)*x501*x505))+(((-1.0)*x501*x503)));
evalcond[14]=(((new_r22*x502))+((new_r02*x506))+(((-1.0)*sj16*x500)));
evalcond[15]=((-1.0)+((new_r22*x507))+(sj16*sj16)+((new_r01*x506)));
evalcond[16]=((((-1.0)*x501*x507))+((new_r22*sj16))+(((-1.0)*new_r01*x497*x501)));
evalcond[17]=((1.0)+(((-1.0)*x499*x504))+(((-1.0)*x501*x502))+(((-1.0)*new_r22*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x509=((1.0)*sj17);
if( IKabs(((((-1.0)*new_r00*x509))+(((-1.0)*cj17*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x509))+((cj17*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x509))+(((-1.0)*cj17*new_r01))))+IKsqr(((((-1.0)*new_r01*x509))+((cj17*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*new_r00*x509))+(((-1.0)*cj17*new_r01))), ((((-1.0)*new_r01*x509))+((cj17*new_r00))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x510=IKcos(j15);
IkReal x511=IKsin(j15);
IkReal x512=((1.0)*cj17);
IkReal x513=(sj17*x511);
IkReal x514=(sj17*x510);
IkReal x515=((1.0)*x511);
IkReal x516=(x510*x512);
evalcond[0]=(((new_r01*x510))+((new_r11*x511))+sj17);
evalcond[1]=(x514+((cj17*x511))+new_r01);
evalcond[2]=(x513+new_r00+(((-1.0)*x516)));
evalcond[3]=(x513+new_r11+(((-1.0)*x516)));
evalcond[4]=(((new_r00*x510))+((new_r10*x511))+(((-1.0)*x512)));
evalcond[5]=((((-1.0)*x511*x512))+(((-1.0)*x514))+new_r10);
evalcond[6]=(((new_r10*x510))+(((-1.0)*sj17))+(((-1.0)*new_r00*x515)));
evalcond[7]=(((new_r11*x510))+(((-1.0)*new_r01*x515))+(((-1.0)*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x517=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj17*x517))+(((-1.0)*cj17*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj17*x517))+((new_r01*sj17)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj17*x517))+(((-1.0)*cj17*new_r01))))+IKsqr(((((-1.0)*cj17*x517))+((new_r01*sj17))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*sj17*x517))+(((-1.0)*cj17*new_r01))), ((((-1.0)*cj17*x517))+((new_r01*sj17))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x518=IKsin(j15);
IkReal x519=IKcos(j15);
IkReal x520=((1.0)*sj17);
IkReal x521=((1.0)*cj17);
IkReal x522=(cj17*x518);
IkReal x523=((1.0)*x518);
IkReal x524=(x519*x520);
evalcond[0]=(((new_r00*x519))+((new_r10*x518))+cj17);
evalcond[1]=(((sj17*x518))+((cj17*x519))+new_r00);
evalcond[2]=((((-1.0)*x524))+x522+new_r01);
evalcond[3]=((((-1.0)*x524))+x522+new_r10);
evalcond[4]=(((new_r01*x519))+((new_r11*x518))+(((-1.0)*x520)));
evalcond[5]=((((-1.0)*x518*x520))+new_r11+(((-1.0)*x519*x521)));
evalcond[6]=(((new_r10*x519))+(((-1.0)*new_r00*x523))+(((-1.0)*x520)));
evalcond[7]=(((new_r11*x519))+(((-1.0)*x521))+(((-1.0)*new_r01*x523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x526 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x526.valid){
continue;
}
IkReal x525=x526.value;
j15array[0]=((-1.0)*x525);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x525)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x527=IKcos(j15);
IkReal x528=IKsin(j15);
IkReal x529=(new_r00*x527);
IkReal x530=(new_r10*x528);
IkReal x531=((1.0)*x528);
evalcond[0]=(((new_r01*x527))+((new_r11*x528)));
evalcond[1]=(x530+x529);
evalcond[2]=((((-1.0)*new_r00*x531))+((new_r10*x527)));
evalcond[3]=(((new_r11*x527))+(((-1.0)*new_r01*x531)));
evalcond[4]=(((new_r22*x530))+((new_r22*x529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x533 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x533.valid){
continue;
}
IkReal x532=x533.value;
j15array[0]=((-1.0)*x532);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x532)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x534=IKcos(j15);
IkReal x535=IKsin(j15);
IkReal x536=(new_r22*x534);
IkReal x537=(new_r22*x535);
IkReal x538=((1.0)*x535);
evalcond[0]=(((new_r01*x534))+((new_r11*x535)));
evalcond[1]=((((-1.0)*new_r00*x538))+((new_r10*x534)));
evalcond[2]=(((new_r11*x534))+(((-1.0)*new_r01*x538)));
evalcond[3]=(((new_r01*x536))+((new_r11*x537)));
evalcond[4]=(((new_r10*x537))+((new_r00*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x540 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
IkReal x539=x540.value;
j15array[0]=((-1.0)*x539);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x539)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x541=IKcos(j15);
IkReal x542=IKsin(j15);
IkReal x543=(new_r00*x541);
IkReal x544=(new_r10*x542);
IkReal x545=((1.0)*x542);
evalcond[0]=(x544+x543);
evalcond[1]=((((-1.0)*new_r00*x545))+((new_r10*x541)));
evalcond[2]=(((new_r11*x541))+(((-1.0)*new_r01*x545)));
evalcond[3]=(((new_r11*new_r22*x542))+((new_r01*new_r22*x541)));
evalcond[4]=(((new_r22*x543))+((new_r22*x544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x547=IKPowWithIntegerCheck(sj16,-1);
if(!x547.valid){
continue;
}
IkReal x546=x547.value;
CheckValue<IkReal> x548=IKPowWithIntegerCheck(cj17,-1);
if(!x548.valid){
continue;
}
if( IKabs((x546*(x548.value)*(((((-1.0)*cj16*new_r02*sj17))+(((-1.0)*new_r01*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x546)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x546*(x548.value)*(((((-1.0)*cj16*new_r02*sj17))+(((-1.0)*new_r01*sj16))))))+IKsqr((new_r02*x546))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x546*(x548.value)*(((((-1.0)*cj16*new_r02*sj17))+(((-1.0)*new_r01*sj16))))), (new_r02*x546));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x549=IKcos(j15);
IkReal x550=IKsin(j15);
IkReal x551=((1.0)*cj17);
IkReal x552=((1.0)*new_r02);
IkReal x553=((1.0)*cj16);
IkReal x554=((1.0)*sj17);
IkReal x555=((1.0)*sj16);
IkReal x556=(new_r00*x549);
IkReal x557=(cj17*x550);
IkReal x558=(sj16*x549);
IkReal x559=(cj16*x549);
IkReal x560=(new_r12*x550);
IkReal x561=(sj17*x550);
IkReal x562=(new_r10*x550);
IkReal x563=(new_r11*x550);
IkReal x564=((1.0)*x550);
evalcond[0]=((((-1.0)*x549*x555))+new_r02);
evalcond[1]=((((-1.0)*x550*x555))+new_r12);
evalcond[2]=(((new_r12*x549))+(((-1.0)*x550*x552)));
evalcond[3]=(((sj17*x559))+x557+new_r01);
evalcond[4]=(((new_r02*x549))+(((-1.0)*x555))+x560);
evalcond[5]=(x563+((cj16*sj17))+((new_r01*x549)));
evalcond[6]=((((-1.0)*x551*x559))+x561+new_r00);
evalcond[7]=(((cj16*x561))+(((-1.0)*x549*x551))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x564))+((new_r10*x549))+(((-1.0)*x554)));
evalcond[9]=(((new_r11*x549))+(((-1.0)*x551))+(((-1.0)*new_r01*x564)));
evalcond[10]=(x556+x562+(((-1.0)*cj16*x551)));
evalcond[11]=((((-1.0)*cj16*x550*x551))+(((-1.0)*x549*x554))+new_r10);
evalcond[12]=(((new_r02*x559))+(((-1.0)*new_r22*x555))+((cj16*x560)));
evalcond[13]=((((-1.0)*new_r21*x555))+((cj16*x563))+sj17+((new_r01*x559)));
evalcond[14]=((((-1.0)*x555*x556))+(((-1.0)*x555*x562))+(((-1.0)*new_r20*x553)));
evalcond[15]=((((-1.0)*new_r21*x553))+(((-1.0)*x555*x563))+(((-1.0)*new_r01*x549*x555)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x553))+(((-1.0)*x555*x560))+(((-1.0)*x552*x558)));
evalcond[17]=(((cj16*x562))+(((-1.0)*x551))+(((-1.0)*new_r20*x555))+((cj16*x556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x566.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x565.value)+(((1.5707963267949)*(x566.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x567=IKcos(j15);
IkReal x568=IKsin(j15);
IkReal x569=((1.0)*cj17);
IkReal x570=((1.0)*new_r02);
IkReal x571=((1.0)*cj16);
IkReal x572=((1.0)*sj17);
IkReal x573=((1.0)*sj16);
IkReal x574=(new_r00*x567);
IkReal x575=(cj17*x568);
IkReal x576=(sj16*x567);
IkReal x577=(cj16*x567);
IkReal x578=(new_r12*x568);
IkReal x579=(sj17*x568);
IkReal x580=(new_r10*x568);
IkReal x581=(new_r11*x568);
IkReal x582=((1.0)*x568);
evalcond[0]=((((-1.0)*x567*x573))+new_r02);
evalcond[1]=((((-1.0)*x568*x573))+new_r12);
evalcond[2]=((((-1.0)*x568*x570))+((new_r12*x567)));
evalcond[3]=(((sj17*x577))+x575+new_r01);
evalcond[4]=((((-1.0)*x573))+x578+((new_r02*x567)));
evalcond[5]=(((new_r01*x567))+x581+((cj16*sj17)));
evalcond[6]=((((-1.0)*x569*x577))+x579+new_r00);
evalcond[7]=((((-1.0)*x567*x569))+new_r11+((cj16*x579)));
evalcond[8]=((((-1.0)*x572))+((new_r10*x567))+(((-1.0)*new_r00*x582)));
evalcond[9]=((((-1.0)*new_r01*x582))+((new_r11*x567))+(((-1.0)*x569)));
evalcond[10]=((((-1.0)*cj16*x569))+x574+x580);
evalcond[11]=((((-1.0)*cj16*x568*x569))+(((-1.0)*x567*x572))+new_r10);
evalcond[12]=((((-1.0)*new_r22*x573))+((cj16*x578))+((new_r02*x577)));
evalcond[13]=(((new_r01*x577))+sj17+((cj16*x581))+(((-1.0)*new_r21*x573)));
evalcond[14]=((((-1.0)*x573*x574))+(((-1.0)*x573*x580))+(((-1.0)*new_r20*x571)));
evalcond[15]=((((-1.0)*new_r01*x567*x573))+(((-1.0)*x573*x581))+(((-1.0)*new_r21*x571)));
evalcond[16]=((1.0)+(((-1.0)*x573*x578))+(((-1.0)*new_r22*x571))+(((-1.0)*x570*x576)));
evalcond[17]=((((-1.0)*new_r20*x573))+((cj16*x580))+((cj16*x574))+(((-1.0)*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x584.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x583.value)+(((1.5707963267949)*(x584.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x585=IKcos(j15);
IkReal x586=IKsin(j15);
IkReal x587=((1.0)*sj16);
IkReal x588=((1.0)*cj16);
IkReal x589=(new_r12*x586);
IkReal x590=(new_r02*x585);
evalcond[0]=((((-1.0)*x585*x587))+new_r02);
evalcond[1]=((((-1.0)*x586*x587))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x586))+((new_r12*x585)));
evalcond[3]=(x589+x590+(((-1.0)*x587)));
evalcond[4]=(((cj16*x590))+(((-1.0)*new_r22*x587))+((cj16*x589)));
evalcond[5]=((((-1.0)*new_r00*x585*x587))+(((-1.0)*new_r20*x588))+(((-1.0)*new_r10*x586*x587)));
evalcond[6]=((((-1.0)*new_r11*x586*x587))+(((-1.0)*new_r21*x588))+(((-1.0)*new_r01*x585*x587)));
evalcond[7]=((1.0)+(((-1.0)*x587*x590))+(((-1.0)*new_r22*x588))+(((-1.0)*x587*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=sj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal j17eval[3];
j17eval[0]=cj15;
j17eval[1]=cj16;
j17eval[2]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=cj16;
j17eval[1]=IKsign(cj16);
j17eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=sj16;
j17eval[1]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x591=IKsin(j17);
IkReal x592=((1.0)*(IKcos(j17)));
evalcond[0]=(x591+new_r11);
evalcond[1]=((((-1.0)*x592))+new_r10);
evalcond[2]=((((-1.0)*x591))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x592))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x593=IKcos(j17);
IkReal x594=((1.0)*(IKsin(j17)));
evalcond[0]=(x593+new_r10);
evalcond[1]=((((-1.0)*x594))+new_r11);
evalcond[2]=((((-1.0)*x594))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x593))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x595=IKcos(j17);
IkReal x596=((1.0)*(IKsin(j17)));
evalcond[0]=(x595+new_r20);
evalcond[1]=((((-1.0)*x596))+new_r21);
evalcond[2]=((((-1.0)*x596))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x595))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x597=IKsin(j17);
IkReal x598=((1.0)*(IKcos(j17)));
evalcond[0]=(x597+new_r21);
evalcond[1]=((((-1.0)*x598))+new_r20);
evalcond[2]=((((-1.0)*x597))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x598))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[5];
IkReal x599=IKsin(j17);
IkReal x600=IKcos(j17);
evalcond[0]=x599;
evalcond[1]=((-1.0)*x600);
evalcond[2]=((-1.0)*new_r12*x599);
evalcond[3]=((((-1.0)*x599))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x600))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x601=IKPowWithIntegerCheck(sj16,-1);
if(!x601.valid){
continue;
}
CheckValue<IkReal> x602=IKPowWithIntegerCheck(new_r12,-1);
if(!x602.valid){
continue;
}
if( IKabs((new_r21*(x601.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x602.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x601.value)))+IKsqr(((-1.0)*new_r20*(x602.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((new_r21*(x601.value)), ((-1.0)*new_r20*(x602.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x603=IKsin(j17);
IkReal x604=IKcos(j17);
IkReal x605=((1.0)*sj16);
IkReal x606=((1.0)*x604);
evalcond[0]=(((new_r12*x604))+new_r20);
evalcond[1]=(((cj16*x603))+new_r11);
evalcond[2]=((((-1.0)*x603*x605))+new_r21);
evalcond[3]=((((-1.0)*cj16*x606))+new_r10);
evalcond[4]=((((-1.0)*x603))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x606))+(((-1.0)*new_r01)));
evalcond[6]=(x603+((cj16*new_r11))+(((-1.0)*new_r21*x605)));
evalcond[7]=((((-1.0)*new_r20*x605))+(((-1.0)*x606))+((cj16*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x607=IKPowWithIntegerCheck(new_r12,-1);
if(!x607.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x607.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x607.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x607.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x608=IKsin(j17);
IkReal x609=IKcos(j17);
IkReal x610=((1.0)*sj16);
IkReal x611=((1.0)*x609);
evalcond[0]=(((new_r12*x609))+new_r20);
evalcond[1]=(((cj16*x608))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x608*x610)));
evalcond[3]=((((-1.0)*cj16*x611))+new_r10);
evalcond[4]=((((-1.0)*x608))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x611))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x610))+x608+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x611))+((cj16*new_r10))+(((-1.0)*new_r20*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x612 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613=IKPowWithIntegerCheck(IKsign(cj16),-1);
if(!x613.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x612.value)+(((1.5707963267949)*(x613.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x614=IKsin(j17);
IkReal x615=IKcos(j17);
IkReal x616=((1.0)*sj16);
IkReal x617=((1.0)*x615);
evalcond[0]=(((new_r12*x615))+new_r20);
evalcond[1]=(((cj16*x614))+new_r11);
evalcond[2]=((((-1.0)*x614*x616))+new_r21);
evalcond[3]=((((-1.0)*cj16*x617))+new_r10);
evalcond[4]=((((-1.0)*x614))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x617))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x616))+x614+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x617))+((cj16*new_r10))+(((-1.0)*new_r20*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x618=IKcos(j17);
IkReal x619=IKsin(j17);
IkReal x620=((1.0)*new_r11);
IkReal x621=((1.0)*sj16);
IkReal x622=((1.0)*x618);
evalcond[0]=((((-1.0)*x619))+new_r00);
evalcond[1]=((((-1.0)*x622))+new_r01);
evalcond[2]=((((-1.0)*new_r12*x622))+new_r20);
evalcond[3]=((((-1.0)*x619*x621))+new_r21);
evalcond[4]=(((cj16*x619))+(((-1.0)*x620)));
evalcond[5]=((((-1.0)*cj16*x622))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*cj16*x620))+(((-1.0)*new_r21*x621))+x619);
CheckValue<IkReal> x623=IKPowWithIntegerCheck(new_r12,-1);
if(!x623.valid){
continue;
}
evalcond[7]=((((-1.0)*x622))+((new_r12*new_r20))+((new_r20*(x623.value)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x624=IKcos(j17);
IkReal x625=IKsin(j17);
IkReal x626=((1.0)*sj15);
IkReal x627=((1.0)*x625);
IkReal x628=((1.0)*x624);
evalcond[0]=(x624+new_r20);
evalcond[1]=((((-1.0)*x627))+new_r21);
evalcond[2]=(((sj15*x624))+new_r01);
evalcond[3]=(((sj15*x625))+new_r00);
evalcond[4]=((((-1.0)*cj15*x628))+new_r11);
evalcond[5]=((((-1.0)*cj15*x627))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x626))+(((-1.0)*x627))+((cj15*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x626))+(((-1.0)*x628))+((cj15*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x629=IKcos(j17);
IkReal x630=IKsin(j17);
IkReal x631=((1.0)*sj15);
IkReal x632=((1.0)*x629);
IkReal x633=((1.0)*x630);
evalcond[0]=(x630+new_r21);
evalcond[1]=((((-1.0)*x632))+new_r20);
evalcond[2]=(((sj15*x629))+new_r01);
evalcond[3]=(((sj15*x630))+new_r00);
evalcond[4]=((((-1.0)*cj15*x632))+new_r11);
evalcond[5]=((((-1.0)*cj15*x633))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x631))+(((-1.0)*x633))+((cj15*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x631))+(((-1.0)*x632))+((cj15*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x634=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj15*x634))+(((-1.0)*new_r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj15*x634))+((cj15*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*x634))+(((-1.0)*new_r00*sj15))))+IKsqr(((((-1.0)*sj15*x634))+((cj15*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*cj15*x634))+(((-1.0)*new_r00*sj15))), ((((-1.0)*sj15*x634))+((cj15*new_r00))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x635=IKsin(j17);
IkReal x636=IKcos(j17);
IkReal x637=((1.0)*sj15);
IkReal x638=((1.0)*cj15);
IkReal x639=((1.0)*x636);
IkReal x640=(sj15*x635);
IkReal x641=(x636*x638);
evalcond[0]=(((cj15*new_r01))+x635+((new_r11*sj15)));
evalcond[1]=(((sj15*x636))+((cj15*x635))+new_r01);
evalcond[2]=((((-1.0)*x639))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[3]=((((-1.0)*new_r00*x637))+((cj15*new_r10))+(((-1.0)*x635)));
evalcond[4]=((((-1.0)*new_r01*x637))+(((-1.0)*x639))+((cj15*new_r11)));
evalcond[5]=((((-1.0)*x641))+x640+new_r00);
evalcond[6]=((((-1.0)*x641))+x640+new_r11);
evalcond[7]=((((-1.0)*x636*x637))+(((-1.0)*x635*x638))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x642=((1.0)*sj15);
if( IKabs((((cj15*new_r01))+(((-1.0)*new_r00*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*new_r01))+(((-1.0)*new_r00*x642))))+IKsqr(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x642))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((cj15*new_r01))+(((-1.0)*new_r00*x642))), ((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x642))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x643=IKcos(j17);
IkReal x644=IKsin(j17);
IkReal x645=((1.0)*sj15);
IkReal x646=((1.0)*x644);
IkReal x647=(sj15*x643);
IkReal x648=((1.0)*x643);
IkReal x649=(cj15*x646);
evalcond[0]=(((cj15*new_r00))+x643+((new_r10*sj15)));
evalcond[1]=((((-1.0)*x646))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[2]=(((sj15*x644))+new_r00+((cj15*x643)));
evalcond[3]=(((cj15*new_r10))+(((-1.0)*x646))+(((-1.0)*new_r00*x645)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x648))+(((-1.0)*new_r01*x645)));
evalcond[5]=((((-1.0)*x649))+x647+new_r01);
evalcond[6]=((((-1.0)*x649))+x647+new_r10);
evalcond[7]=((((-1.0)*x644*x645))+new_r11+(((-1.0)*cj15*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x650=IKcos(j17);
IkReal x651=IKsin(j17);
IkReal x652=((1.0)*sj16);
IkReal x653=((1.0)*x650);
IkReal x654=((1.0)*x651);
evalcond[0]=(((new_r02*x650))+new_r20);
evalcond[1]=((((-1.0)*x654))+new_r10);
evalcond[2]=((((-1.0)*x653))+new_r11);
evalcond[3]=(((cj16*x651))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x654))+new_r21);
evalcond[5]=((((-1.0)*cj16*x653))+new_r00);
evalcond[6]=(x651+((cj16*new_r01))+(((-1.0)*new_r21*x652)));
evalcond[7]=((((-1.0)*x653))+(((-1.0)*new_r20*x652))+((cj16*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=IKsign(new_r02);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=cj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x655=IKcos(j17);
IkReal x656=((1.0)*(IKsin(j17)));
evalcond[0]=(x655+new_r20);
evalcond[1]=((((-1.0)*x656))+new_r21);
evalcond[2]=((((-1.0)*x656))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x655))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x657=IKsin(j17);
IkReal x658=((1.0)*(IKcos(j17)));
evalcond[0]=(x657+new_r21);
evalcond[1]=((((-1.0)*x658))+new_r20);
evalcond[2]=((((-1.0)*x657))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x658))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x659=IKsin(j17);
IkReal x660=IKcos(j17);
IkReal x661=((-1.0)*x660);
evalcond[0]=x659;
evalcond[1]=(new_r22*x659);
evalcond[2]=x661;
evalcond[3]=(new_r22*x661);
evalcond[4]=((((-1.0)*x659))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x660))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x662=IKPowWithIntegerCheck(new_r02,-1);
if(!x662.valid){
continue;
}
CheckValue<IkReal> x663=IKPowWithIntegerCheck(cj16,-1);
if(!x663.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x662.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x663.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x662.value)))+IKsqr(((-1.0)*new_r00*(x663.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21*(x662.value)), ((-1.0)*new_r00*(x663.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x664=IKsin(j17);
IkReal x665=IKcos(j17);
CheckValue<IkReal> x670=IKPowWithIntegerCheck(new_r02,-1);
if(!x670.valid){
continue;
}
IkReal x666=x670.value;
IkReal x667=new_r22*new_r22;
IkReal x668=((1.0)*x665);
IkReal x669=(x666*x667);
evalcond[0]=(((new_r02*x664))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x668))+new_r20);
evalcond[2]=((((-1.0)*x664))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x668))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x664))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj16*x668)));
evalcond[6]=(x664+((new_r02*new_r21))+((new_r21*x669)));
evalcond[7]=(((new_r20*x669))+(((-1.0)*x668))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x671=IKPowWithIntegerCheck(new_r02,-1);
if(!x671.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x671.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x671.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x671.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x672=IKsin(j17);
IkReal x673=IKcos(j17);
CheckValue<IkReal> x678=IKPowWithIntegerCheck(new_r02,-1);
if(!x678.valid){
continue;
}
IkReal x674=x678.value;
IkReal x675=new_r22*new_r22;
IkReal x676=((1.0)*x673);
IkReal x677=(x674*x675);
evalcond[0]=(((new_r02*x672))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x676))+new_r20);
evalcond[2]=((((-1.0)*x672))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x676)));
evalcond[4]=((((-1.0)*new_r01))+((cj16*x672)));
evalcond[5]=((((-1.0)*cj16*x676))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x677))+x672+((new_r02*new_r21)));
evalcond[7]=(((new_r02*new_r20))+(((-1.0)*x676))+((new_r20*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x680.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x679.value)+(((1.5707963267949)*(x680.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x681=IKsin(j17);
IkReal x682=IKcos(j17);
CheckValue<IkReal> x687=IKPowWithIntegerCheck(new_r02,-1);
if(!x687.valid){
continue;
}
IkReal x683=x687.value;
IkReal x684=new_r22*new_r22;
IkReal x685=((1.0)*x682);
IkReal x686=(x683*x684);
evalcond[0]=(((new_r02*x681))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x685))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x681)));
evalcond[3]=((((-1.0)*x685))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x681))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj16*x685))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x686))+x681+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x685))+((new_r02*new_r20))+((new_r20*x686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=1.0;
if( IKabs(j17eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j17]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j17array[2], cj17array[2], sj17array[2], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[2]={true,true};
_nj17 = 2;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x689=IKPowWithIntegerCheck(sj16,-1);
if(!x689.valid){
continue;
}
IkReal x688=x689.value;
CheckValue<IkReal> x690=IKPowWithIntegerCheck(cj15,-1);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691=IKPowWithIntegerCheck(cj16,-1);
if(!x691.valid){
continue;
}
if( IKabs((x688*(x690.value)*(x691.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x688)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x688*(x690.value)*(x691.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))))+IKsqr(((-1.0)*new_r20*x688))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x688*(x690.value)*(x691.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))), ((-1.0)*new_r20*x688));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x692=IKsin(j17);
IkReal x693=IKcos(j17);
IkReal x694=((1.0)*sj15);
IkReal x695=(cj15*cj16);
IkReal x696=(cj16*sj15);
IkReal x697=((1.0)*sj16);
IkReal x698=((1.0)*x693);
IkReal x699=((1.0)*x692);
evalcond[0]=(new_r20+((sj16*x693)));
evalcond[1]=((((-1.0)*x692*x697))+new_r21);
evalcond[2]=(((cj16*x692))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=((((-1.0)*new_r00*x694))+((cj15*new_r10))+(((-1.0)*x699)));
evalcond[4]=((((-1.0)*new_r01*x694))+((cj15*new_r11))+(((-1.0)*x698)));
evalcond[5]=(((x692*x695))+((sj15*x693))+new_r01);
evalcond[6]=(((cj15*new_r00))+(((-1.0)*cj16*x698))+((new_r10*sj15)));
evalcond[7]=(((sj15*x692))+(((-1.0)*x695*x698))+new_r00);
evalcond[8]=((((-1.0)*cj15*x698))+((x692*x696))+new_r11);
evalcond[9]=((((-1.0)*cj15*x699))+new_r10+(((-1.0)*cj16*x693*x694)));
evalcond[10]=(((new_r11*x696))+x692+((new_r01*x695))+(((-1.0)*new_r21*x697)));
evalcond[11]=(((new_r10*x696))+(((-1.0)*x698))+((new_r00*x695))+(((-1.0)*new_r20*x697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x701=IKPowWithIntegerCheck(sj16,-1);
if(!x701.valid){
continue;
}
IkReal x700=x701.value;
CheckValue<IkReal> x702=IKPowWithIntegerCheck(sj15,-1);
if(!x702.valid){
continue;
}
if( IKabs((x700*(x702.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x700)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x700*(x702.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))))+IKsqr(((-1.0)*new_r20*x700))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x700*(x702.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))), ((-1.0)*new_r20*x700));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x703=IKsin(j17);
IkReal x704=IKcos(j17);
IkReal x705=((1.0)*sj15);
IkReal x706=(cj15*cj16);
IkReal x707=(cj16*sj15);
IkReal x708=((1.0)*sj16);
IkReal x709=((1.0)*x704);
IkReal x710=((1.0)*x703);
evalcond[0]=(((sj16*x704))+new_r20);
evalcond[1]=((((-1.0)*x703*x708))+new_r21);
evalcond[2]=(((cj16*x703))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=(((cj15*new_r10))+(((-1.0)*x710))+(((-1.0)*new_r00*x705)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x709))+(((-1.0)*new_r01*x705)));
evalcond[5]=(((x703*x706))+((sj15*x704))+new_r01);
evalcond[6]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*cj16*x709)));
evalcond[7]=((((-1.0)*x706*x709))+((sj15*x703))+new_r00);
evalcond[8]=((((-1.0)*cj15*x709))+((x703*x707))+new_r11);
evalcond[9]=((((-1.0)*cj15*x710))+(((-1.0)*cj16*x704*x705))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x708))+((new_r01*x706))+x703+((new_r11*x707)));
evalcond[11]=(((new_r00*x706))+(((-1.0)*new_r20*x708))+(((-1.0)*x709))+((new_r10*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x712.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x711.value)+(((1.5707963267949)*(x712.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x713=IKsin(j17);
IkReal x714=IKcos(j17);
IkReal x715=((1.0)*sj15);
IkReal x716=(cj15*cj16);
IkReal x717=(cj16*sj15);
IkReal x718=((1.0)*sj16);
IkReal x719=((1.0)*x714);
IkReal x720=((1.0)*x713);
evalcond[0]=(((sj16*x714))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x713*x718)));
evalcond[2]=(((cj16*x713))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=(((cj15*new_r10))+(((-1.0)*x720))+(((-1.0)*new_r00*x715)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x719))+(((-1.0)*new_r01*x715)));
evalcond[5]=(((sj15*x714))+new_r01+((x713*x716)));
evalcond[6]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*cj16*x719)));
evalcond[7]=(((sj15*x713))+(((-1.0)*x716*x719))+new_r00);
evalcond[8]=((((-1.0)*cj15*x719))+new_r11+((x713*x717)));
evalcond[9]=((((-1.0)*cj16*x714*x715))+new_r10+(((-1.0)*cj15*x720)));
evalcond[10]=((((-1.0)*new_r21*x718))+((new_r01*x716))+((new_r11*x717))+x713);
evalcond[11]=(((new_r00*x716))+(((-1.0)*new_r20*x718))+(((-1.0)*x719))+((new_r10*x717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "b84cc76a67a4e051a6050af728f439bc"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
