/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-08-19 21:37:11.105858
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.23409)*x6);
x15=((1.0)*x5);
x16=((0.23409)*x5);
x17=((1.0)*x6);
x18=((0.24199)*x0);
x19=((1.0)*x4);
x20=((0.23409)*x9);
x21=((0.23409)*x8);
x22=((1.0)*x11);
x23=((1.0)*x3);
x24=((1.0)*x12);
x25=((0.24199)*x3);
x26=(x2*x7);
x27=(x6*x7);
x28=(x3*x7);
x29=(x1*x2);
x30=(x0*x7);
x31=(x19*x3);
x32=(x1*x17);
x33=(x4*x7*x9);
x34=(x15*x30);
x35=(x17*x30);
x36=(x15*x28);
x37=(x17*x28);
x38=((((-1.0)*x31))+((x0*x29)));
x39=(((x29*x3))+((x0*x4)));
x40=((((-1.0)*x1*x31))+((x0*x2)));
x41=((((-1.0)*x32))+((x26*x5)));
x42=((((-1.0)*x0*x29))+x31);
x43=((((-1.0)*x0*x1*x19))+(((-1.0)*x2*x23)));
x44=((((-1.0)*x0*x19))+(((-1.0)*x23*x29)));
x45=(((x1*x15))+((x17*x26)));
x46=((-1.0)*x45);
x47=(x11*x41);
x48=(x38*x6);
x49=(x43*x9);
x50=((((-1.0)*x34))+x48);
x51=((((-1.0)*x36))+((x39*x6)));
x52=((((-1.0)*x35))+((x42*x5)));
x53=((((-1.0)*x37))+((x44*x5)));
x54=(((x4*x7*x8))+((x45*x9)));
x55=(((x46*x8))+x33);
x56=(x11*x53);
x57=(((x51*x8))+((x40*x9)));
x58=(((x9*(((((-1.0)*x17*x39))+x36))))+((x40*x8)));
x59=(((x50*x8))+x49);
x60=(x12*x57);
x61=(((x9*(((((-1.0)*x48))+x34))))+((x43*x8)));
eerot[0]=(((x13*((((x12*x59))+((x11*x52))))))+((x10*x61)));
eerot[1]=(((x13*x61))+((x10*(((((-1.0)*x22*x52))+(((-1.0)*x24*x59)))))));
eerot[2]=(((x12*(((((-1.0)*x15*x42))+x35))))+((x11*x59)));
eetrans[0]=(((x18*x27))+(((0.0007)*x0))+((x12*((((x14*x30))+(((-1.0)*x16*x42))))))+(((0.29198)*x30))+((x11*((((x20*x43))+((x21*x50))))))+((x5*((((x18*x29))+(((-1.0)*x25*x4)))))));
eerot[3]=(((x13*((x56+x60))))+((x10*x58)));
eerot[4]=(((x13*x58))+((x10*(((((-1.0)*x22*x53))+(((-1.0)*x24*x57)))))));
eerot[5]=(((x11*x57))+((x12*(((((-1.0)*x15*x44))+x37)))));
eetrans[1]=((((0.29198)*x28))+(((0.0007)*x3))+((x5*((((x18*x4))+((x25*x29))))))+((x25*x27))+((x12*((((x14*x28))+(((-1.0)*x16*x44))))))+((x11*((((x20*x40))+((x21*x51)))))));
eerot[6]=(((x13*((((x12*x55))+x47))))+((x10*x54)));
eerot[7]=(((x13*x54))+((x10*(((((-1.0)*x22*x41))+(((-1.0)*x24*x55)))))));
eerot[8]=(((x11*x55))+((x12*(((((-1.0)*x15*x26))+x32)))));
eetrans[2]=((0.1645)+(((0.29198)*x1))+(((0.24199)*x1*x6))+((x11*((((x20*x4*x7))+((x21*x46))))))+((x12*((((x1*x14))+(((-1.0)*x16*x26))))))+(((-0.24199)*x26*x5)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]), htj4=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.23409)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.23409)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1645)+pz+(((-0.23409)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x62=((1.0)*px);
IkReal x63=((1.0)*pz);
IkReal x64=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x64))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x63)));
rxp0_2=((((-1.0)*r10*x62))+((py*r00)));
rxp1_0=((((-1.0)*r21*x64))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x63)));
rxp1_2=((((-1.0)*r11*x62))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x64)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x63)));
rxp2_2=((((-1.0)*r12*x62))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x65=((0.0014)*px);
IkReal x66=((1.0)*pp);
IkReal x67=((0.2851234709)+x65+(((-1.0)*x66)));
IkReal x68=((0.0024985101)+x65+(((-1.0)*x66)));
IkReal x69=(x65+x66);
IkReal x70=((0.2851234709)+(((-1.0)*x69)));
IkReal x71=((0.0024985101)+(((-1.0)*x69)));
IkReal gconst0=x67;
IkReal gconst1=x68;
IkReal gconst2=x67;
IkReal gconst3=x68;
IkReal gconst4=x70;
IkReal gconst5=x71;
IkReal gconst6=x70;
IkReal gconst7=x71;
IkReal x72=py*py;
IkReal x73=sj4*sj4;
IkReal x74=px*px;
IkReal x75=((1.0)*gconst4);
IkReal x76=(gconst5*gconst7);
IkReal x77=(gconst1*gconst6);
IkReal x78=(gconst0*gconst3);
IkReal x79=(gconst1*gconst2);
IkReal x80=((2.0)*gconst5);
IkReal x81=((1.0)*gconst0);
IkReal x82=(gconst1*gconst7);
IkReal x83=(gconst0*gconst6);
IkReal x84=(gconst4*gconst7);
IkReal x85=((2.0)*gconst0);
IkReal x86=(gconst0*gconst7);
IkReal x87=(gconst2*gconst5);
IkReal x88=((2.0)*gconst4);
IkReal x89=(gconst3*gconst5);
IkReal x90=(gconst3*gconst4);
IkReal x91=(gconst2*gconst4);
IkReal x92=(gconst5*gconst6);
IkReal x93=(gconst4*gconst6);
IkReal x94=(gconst1*gconst3);
IkReal x95=(gconst0*gconst2);
IkReal x96=((0.319507473868806)*px*py);
IkReal x97=(py*x73);
IkReal x98=(gconst6*x72);
IkReal x99=((4.0)*px*py);
IkReal x100=((0.2342366404)*x73);
IkReal x101=((4.0)*x74);
IkReal x102=(gconst2*x72);
IkReal x103=((1.0)*x72);
IkReal x104=((2.0)*x72);
IkReal x105=((0.4684732808)*x73);
IkReal x106=(x72*x84);
IkReal x107=(x72*x92);
IkReal x108=(x72*x87);
IkReal x109=(x72*x90);
IkReal x110=(x72*x86);
IkReal x111=(x72*x77);
IkReal x112=((0.000188640498296971)*x97);
IkReal x113=(x72*x79);
IkReal x114=(x72*x78);
IkReal x115=(gconst3*x104);
IkReal x116=(x72*x73);
IkReal x117=(x100*x92);
IkReal x118=(x103*x76);
IkReal x119=(x75*x98);
IkReal x120=(x91*x99);
IkReal x121=(x82*x99);
IkReal x122=(x89*x99);
IkReal x123=(x83*x99);
IkReal x124=(x90*x99);
IkReal x125=(x86*x99);
IkReal x126=(x87*x99);
IkReal x127=(x77*x99);
IkReal x128=(x100*x77);
IkReal x129=(x103*x82);
IkReal x130=((1.836415260736e-6)*x116);
IkReal x131=(x102*x75);
IkReal x132=(x81*x98);
IkReal x133=(x103*x89);
IkReal x134=(x100*x87);
IkReal x135=((0.00131172518624)*pp*x97);
IkReal x136=((1.836415260736e-6)*px*x97);
IkReal x137=(x102*x81);
IkReal x138=(x100*x79);
IkReal x139=(x103*x94);
IkReal x140=(x113+x114);
IkReal x141=(x106+x107);
IkReal x142=(x137+x139+x138);
IkReal x143=(x117+x119+x118);
IkReal x144=(x111+x110+x108+x109);
IkReal x145=(x126+x127+x124+x125);
IkReal x146=(x122+x123+x120+x121);
IkReal x147=(x134+x131+x130+x133+x132+x128+x129);
op[0]=((((-1.0)*x143))+x141);
op[1]=((((-1.0)*x112))+x135+x136+(((-1.0)*x96)));
op[2]=((((-1.0)*x147))+((x101*x84))+(((-1.0)*x80*x98))+((x101*x92))+x144+(((-1.0)*x105*x92))+((x104*x76))+((x88*x98))+(((-1.0)*x101*x76))+(((-1.0)*x101*x93))+(((-1.0)*x104*x84)));
op[3]=((((-1.0)*x146))+(((-0.00131172518624)*gconst5*x97))+(((-0.00131172518624)*gconst6*x97))+x145+((x76*x99))+((x93*x99))+(((-1.0)*x92*x99))+(((-1.0)*x84*x99))+(((-0.00065586259312)*gconst2*x97))+(((-0.00065586259312)*gconst1*x97)));
op[4]=((((-1.0)*x143))+(((-1.0)*x142))+(((-1.0)*x105*x77))+(((-1.0)*x102*x80))+((x102*x88))+((x101*x87))+((x101*x86))+((x101*x90))+(((-1.0)*gconst3*x72*x88))+(((-1.0)*x105*x87))+(((-1.0)*gconst7*x72*x85))+((x101*x77))+x140+x141+((gconst3*x72*x80))+(((-1.0)*x101*x91))+(((-3.672830521472e-6)*x116))+(((-1.0)*x101*x82))+(((-1.0)*x101*x83))+(((-1.0)*x101*x89))+(((-1.0)*x104*x77))+((x104*x82))+((x104*x83)));
op[5]=((((-1.0)*x145))+(((-1.0)*x95*x99))+((x79*x99))+(((-1.0)*x94*x99))+((x78*x99))+(((-0.00131172518624)*gconst1*x97))+x146+(((-0.00065586259312)*gconst6*x97))+(((-0.00131172518624)*gconst2*x97))+(((-0.00065586259312)*gconst5*x97)));
op[6]=((((-1.0)*x147))+(((-1.0)*x105*x79))+((x102*x85))+((x101*x79))+((x101*x78))+x144+(((-1.0)*x101*x94))+(((-1.0)*x101*x95))+(((-1.0)*x104*x79))+(((-1.0)*x104*x78))+((x104*x94)));
op[7]=((((-1.0)*x112))+x135+(((-1.0)*x136))+x96);
op[8]=((((-1.0)*x142))+x140);
polyroots8(op,zeror,numroots);
IkReal j2array[8], cj2array[8], sj2array[8], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[8]={true,true,true,true,true,true,true,true};
_nj2 = 8;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j3eval[2];
IkReal x148=cj2*cj2;
IkReal x149=py*py;
IkReal x150=pz*pz;
IkReal x151=px*px;
IkReal x152=((2040816.32653061)*sj4);
IkReal x153=(cj2*px);
IkReal x154=(py*sj2*sj4);
IkReal x155=(sj4*x148);
IkReal x156=((14599.0)*x149);
j3eval[0]=((((-2857.14285714286)*sj4*x153))+((x149*x152))+sj4+(((-2857.14285714286)*x154))+((x150*x152))+(((4081632.65306122)*x153*x154))+((x148*x151*x152))+(((-1.0)*x148*x149*x152)));
j3eval[1]=IKsign(((((14599.0)*x151*x155))+((sj4*x156))+(((-20.4386)*x154))+(((0.00715351)*sj4))+(((-20.4386)*sj4*x153))+(((14599.0)*sj4*x150))+(((-1.0)*x155*x156))+(((29198.0)*x153*x154))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x157=(py*sj2);
IkReal x158=((2419900000.0)*cj5);
IkReal x159=((2419900000.0)*sj5);
IkReal x160=(cj2*px);
j3eval[0]=((-1.01768421368676)+(((-1.0)*cj5)));
j3eval[1]=IKsign(((-1438114805.0)+(((-1413124804.0)*cj5))));
j3eval[2]=((IKabs(((2043860.0)+(((-1.0)*x157*x158))+(((-1.0)*x158*x160))+(((-2919800000.0)*x157))+(((-2919800000.0)*x160))+(((1693930.0)*cj5))+((pz*x159)))))+(IKabs(((((-1.0)*x157*x159))+(((-1.0)*x159*x160))+(((-1.0)*pz*x158))+(((1693930.0)*sj5))+(((-2919800000.0)*pz))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x161=(pz*sj5);
IkReal x162=(cj2*px);
IkReal x163=((100000.0)*pz);
IkReal x164=(py*sj2);
IkReal x165=((24199.0)*cj5);
IkReal x166=((1428.57142857143)*cj5);
j3eval[0]=((1.20657878424728)+cj5+(((-1.0)*x162*x166))+(((-1428.57142857143)*x161))+(((-1723.68397749612)*x164))+(((-1723.68397749612)*x162))+(((-1.0)*x164*x166)));
j3eval[1]=((IKabs(((((-1.0)*x163*x164))+(((-7065.62402)*sj5))+(((-1.0)*x162*x163))+(((-5855.91601)*cj5*sj5))+(((70.0)*pz)))))+(IKabs(((-8525.23204)+((pz*x163))+(((-14131.24804)*cj5))+(((-5855.91601)*(cj5*cj5)))))));
j3eval[2]=IKsign(((20.4386)+(((16.9393)*cj5))+(((-1.0)*x162*x165))+(((-29198.0)*x162))+(((-29198.0)*x164))+(((-24199.0)*x161))+(((-1.0)*x164*x165))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x167=py*py;
IkReal x168=cj2*cj2;
IkReal x169=pz*pz;
IkReal x170=px*px;
IkReal x171=(cj2*px);
IkReal x172=((24199.0)*sj5);
IkReal x173=(py*sj2);
IkReal x174=((24199.0)*cj5);
IkReal x175=((100000.0)*x167);
IkReal x176=((2040816.32653061)*x167);
IkReal x177=(x168*x170);
j3eval[0]=((-1.0)+(((-1.0)*x176))+((x168*x176))+(((-4081632.65306122)*x171*x173))+(((2857.14285714286)*x171))+(((2857.14285714286)*x173))+(((-2040816.32653061)*x169))+(((-2040816.32653061)*x177)));
j3eval[1]=IKsign(((-0.049)+(((-200000.0)*x171*x173))+(((-100000.0)*x177))+(((-1.0)*x175))+((x168*x175))+(((-100000.0)*x169))+(((140.0)*x173))+(((140.0)*x171))));
j3eval[2]=((IKabs(((20.4386)+((pz*x172))+(((16.9393)*cj5))+(((-1.0)*x171*x174))+(((-29198.0)*x173))+(((-29198.0)*x171))+(((-1.0)*x173*x174)))))+(IKabs(((((-29198.0)*pz))+(((-1.0)*pz*x174))+(((16.9393)*sj5))+(((-1.0)*x171*x172))+(((-1.0)*x172*x173))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x178=py*py;
IkReal x179=cj2*cj2;
IkReal x180=(cj2*px);
IkReal x181=((24199.0)*cj5);
IkReal x182=(py*sj2);
IkReal x183=((24199.0)*sj5);
IkReal x184=((100000.0)*x179);
CheckValue<IkReal> x185=IKPowWithIntegerCheck(IKsign(((-0.049)+(((140.0)*x180))+(((140.0)*x182))+((x178*x184))+(((-100000.0)*x178))+(((-1.0)*x184*(px*px)))+(((-100000.0)*(pz*pz)))+(((-200000.0)*x180*x182)))),-1);
if(!x185.valid){
continue;
}
CheckValue<IkReal> x186 = IKatan2WithCheck(IkReal(((20.4386)+((pz*x183))+(((16.9393)*cj5))+(((-1.0)*x180*x181))+(((-29198.0)*x182))+(((-29198.0)*x180))+(((-1.0)*x181*x182)))),IkReal(((((-29198.0)*pz))+(((-1.0)*pz*x181))+(((-1.0)*x180*x183))+(((16.9393)*sj5))+(((-1.0)*x182*x183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x186.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x185.value)))+(x186.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x187=IKcos(j3);
IkReal x188=IKsin(j3);
IkReal x189=(py*sj2);
IkReal x190=((0.24199)*sj5);
IkReal x191=((0.24199)*cj5);
IkReal x192=(cj2*px);
IkReal x193=(pz*x187);
IkReal x194=((1.0)*x187);
IkReal x195=(x188*x192);
evalcond[0]=(((x188*x190))+(((-1.0)*x187*x191))+pz+(((-0.29198)*x187)));
evalcond[1]=((-0.29198)+(((-1.0)*x191))+((x188*x189))+x193+x195+(((-0.0007)*x188)));
evalcond[2]=((0.0007)+((x187*x190))+(((-1.0)*x192))+((x188*x191))+(((-1.0)*x189))+(((0.29198)*x188)));
evalcond[3]=((((0.0007)*x187))+((pz*x188))+(((-1.0)*x192*x194))+(((-1.0)*x189*x194))+x190);
evalcond[4]=((-0.0266936503)+(((0.0014)*x189))+(((0.0014)*x192))+(((-0.000408772)*x188))+(((-1.0)*pp))+(((0.58396)*x195))+(((0.58396)*x193))+(((0.58396)*x188*x189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x737=(cj2*px);
IkReal x738=((100000.0)*pz);
IkReal x739=((24199.0)*cj5);
IkReal x740=(py*sj2);
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(((-8525.23204)+(((-14131.24804)*cj5))+((pz*x738))+(((-5855.91601)*(cj5*cj5))))),IkReal(((((-7065.62402)*sj5))+(((-1.0)*x737*x738))+(((-1.0)*x738*x740))+(((-5855.91601)*cj5*sj5))+(((70.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
CheckValue<IkReal> x742=IKPowWithIntegerCheck(IKsign(((20.4386)+(((16.9393)*cj5))+(((-24199.0)*pz*sj5))+(((-29198.0)*x740))+(((-1.0)*x737*x739))+(((-29198.0)*x737))+(((-1.0)*x739*x740)))),-1);
if(!x742.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x741.value)+(((1.5707963267949)*(x742.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x743=IKcos(j3);
IkReal x744=IKsin(j3);
IkReal x745=(py*sj2);
IkReal x746=((0.24199)*sj5);
IkReal x747=((0.24199)*cj5);
IkReal x748=(cj2*px);
IkReal x749=(pz*x743);
IkReal x750=((1.0)*x743);
IkReal x751=(x744*x748);
evalcond[0]=(((x744*x746))+(((-0.29198)*x743))+pz+(((-1.0)*x743*x747)));
evalcond[1]=((-0.29198)+((x744*x745))+(((-0.0007)*x744))+x751+x749+(((-1.0)*x747)));
evalcond[2]=((0.0007)+(((0.29198)*x744))+((x744*x747))+((x743*x746))+(((-1.0)*x745))+(((-1.0)*x748)));
evalcond[3]=((((-1.0)*x745*x750))+x746+(((0.0007)*x743))+(((-1.0)*x748*x750))+((pz*x744)));
evalcond[4]=((-0.0266936503)+(((0.58396)*x749))+(((0.58396)*x751))+(((0.58396)*x744*x745))+(((0.0014)*x748))+(((0.0014)*x745))+(((-1.0)*pp))+(((-0.000408772)*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x752=(py*sj2);
IkReal x753=((2419900000.0)*cj5);
IkReal x754=((2419900000.0)*sj5);
IkReal x755=(cj2*px);
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(((2043860.0)+(((-2919800000.0)*x755))+(((-2919800000.0)*x752))+((pz*x754))+(((-1.0)*x753*x755))+(((-1.0)*x752*x753))+(((1693930.0)*cj5)))),IkReal(((((1693930.0)*sj5))+(((-1.0)*x754*x755))+(((-1.0)*x752*x754))+(((-1.0)*pz*x753))+(((-2919800000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
CheckValue<IkReal> x757=IKPowWithIntegerCheck(IKsign(((-1438114805.0)+(((-1413124804.0)*cj5)))),-1);
if(!x757.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x756.value)+(((1.5707963267949)*(x757.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x758=IKcos(j3);
IkReal x759=IKsin(j3);
IkReal x760=(py*sj2);
IkReal x761=((0.24199)*sj5);
IkReal x762=((0.24199)*cj5);
IkReal x763=(cj2*px);
IkReal x764=(pz*x758);
IkReal x765=((1.0)*x758);
IkReal x766=(x759*x763);
evalcond[0]=((((-1.0)*x758*x762))+((x759*x761))+(((-0.29198)*x758))+pz);
evalcond[1]=((-0.29198)+(((-1.0)*x762))+((x759*x760))+(((-0.0007)*x759))+x764+x766);
evalcond[2]=((0.0007)+(((0.29198)*x759))+((x759*x762))+((x758*x761))+(((-1.0)*x760))+(((-1.0)*x763)));
evalcond[3]=((((-1.0)*x763*x765))+((pz*x759))+(((0.0007)*x758))+x761+(((-1.0)*x760*x765)));
evalcond[4]=((-0.0266936503)+(((0.58396)*x759*x760))+(((-1.0)*pp))+(((-0.000408772)*x759))+(((0.58396)*x766))+(((0.58396)*x764))+(((0.0014)*x763))+(((0.0014)*x760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x767=(py*sj2);
IkReal x768=((2419900000.0)*cj5);
IkReal x769=((2419900000.0)*sj5);
IkReal x770=(cj2*px);
j3eval[0]=((-1.01768421368676)+(((-1.0)*cj5)));
j3eval[1]=IKsign(((-1438114805.0)+(((-1413124804.0)*cj5))));
j3eval[2]=((IKabs((((x769*x770))+(((-1693930.0)*sj5))+((x767*x769))+(((-2919800000.0)*pz))+(((-1.0)*pz*x768)))))+(IKabs(((2043860.0)+(((-1.0)*x768*x770))+(((-1.0)*x767*x768))+(((-2919800000.0)*x767))+(((1693930.0)*cj5))+(((-2919800000.0)*x770))+(((-1.0)*pz*x769))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x771=(pz*sj5);
IkReal x772=(cj2*px);
IkReal x773=((100000.0)*pz);
IkReal x774=(py*sj2);
IkReal x775=((24199.0)*cj5);
IkReal x776=((1428.57142857143)*cj5);
j3eval[0]=((1.20657878424728)+(((1428.57142857143)*x771))+cj5+(((-1.0)*x774*x776))+(((-1.0)*x772*x776))+(((-1723.68397749612)*x772))+(((-1723.68397749612)*x774)));
j3eval[1]=((IKabs(((((-1.0)*x772*x773))+(((5855.91601)*cj5*sj5))+(((7065.62402)*sj5))+(((-1.0)*x773*x774))+(((70.0)*pz)))))+(IKabs(((-8525.23204)+((pz*x773))+(((-14131.24804)*cj5))+(((-5855.91601)*(cj5*cj5)))))));
j3eval[2]=IKsign(((20.4386)+(((-1.0)*x774*x775))+(((16.9393)*cj5))+(((24199.0)*x771))+(((-29198.0)*x774))+(((-29198.0)*x772))+(((-1.0)*x772*x775))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x777=cj2*cj2;
IkReal x778=py*py;
IkReal x779=pz*pz;
IkReal x780=px*px;
IkReal x781=(cj2*px);
IkReal x782=((24199.0)*sj5);
IkReal x783=(py*sj2);
IkReal x784=((24199.0)*cj5);
IkReal x785=((100000.0)*x778);
IkReal x786=((2040816.32653061)*x778);
IkReal x787=(x777*x780);
j3eval[0]=((1.0)+(((2040816.32653061)*x787))+(((2040816.32653061)*x779))+(((-1.0)*x777*x786))+(((4081632.65306122)*x781*x783))+(((-2857.14285714286)*x781))+(((-2857.14285714286)*x783))+x786);
j3eval[1]=((IKabs(((((-1.0)*x781*x782))+(((16.9393)*sj5))+((pz*x784))+(((-1.0)*x782*x783))+(((29198.0)*pz)))))+(IKabs(((-20.4386)+((x781*x784))+(((-16.9393)*cj5))+((x783*x784))+((pz*x782))+(((29198.0)*x783))+(((29198.0)*x781))))));
j3eval[2]=IKsign(((0.049)+(((-140.0)*x783))+(((-140.0)*x781))+(((200000.0)*x781*x783))+(((-1.0)*x777*x785))+(((100000.0)*x787))+x785+(((100000.0)*x779))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x788=cj2*cj2;
IkReal x789=py*py;
IkReal x790=((24199.0)*cj5);
IkReal x791=(cj2*px);
IkReal x792=(py*sj2);
IkReal x793=((24199.0)*sj5);
IkReal x794=((100000.0)*x788);
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign(((0.049)+(((200000.0)*x791*x792))+((x794*(px*px)))+(((100000.0)*x789))+(((-1.0)*x789*x794))+(((100000.0)*(pz*pz)))+(((-140.0)*x791))+(((-140.0)*x792)))),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal(((-20.4386)+((x790*x791))+((x790*x792))+(((-16.9393)*cj5))+((pz*x793))+(((29198.0)*x791))+(((29198.0)*x792)))),IkReal(((((-1.0)*x792*x793))+(((16.9393)*sj5))+((pz*x790))+(((-1.0)*x791*x793))+(((29198.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x795.value)))+(x796.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x797=IKcos(j3);
IkReal x798=IKsin(j3);
IkReal x799=(cj2*px);
IkReal x800=(py*sj2);
IkReal x801=((0.24199)*sj5);
IkReal x802=((0.24199)*cj5);
IkReal x803=(pz*x797);
IkReal x804=((0.58396)*x798);
evalcond[0]=((((-1.0)*x798*x801))+(((-1.0)*x797*x802))+(((-0.29198)*x797))+pz);
evalcond[1]=((-0.29198)+((x798*x800))+((x798*x799))+x803+(((-1.0)*x802))+(((-0.0007)*x798)));
evalcond[2]=((0.0007)+(((-1.0)*x800))+(((0.29198)*x798))+(((-1.0)*x797*x801))+((x798*x802))+(((-1.0)*x799)));
evalcond[3]=(((x797*x800))+(((-1.0)*pz*x798))+x801+((x797*x799))+(((-0.0007)*x797)));
evalcond[4]=((-0.0266936503)+((x800*x804))+(((-1.0)*pp))+((x799*x804))+(((0.58396)*x803))+(((0.0014)*x799))+(((-0.000408772)*x798))+(((0.0014)*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x805=(cj2*px);
IkReal x806=((100000.0)*pz);
IkReal x807=((24199.0)*cj5);
IkReal x808=(py*sj2);
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKsign(((20.4386)+(((-1.0)*x807*x808))+(((-1.0)*x805*x807))+(((16.9393)*cj5))+(((24199.0)*pz*sj5))+(((-29198.0)*x805))+(((-29198.0)*x808)))),-1);
if(!x809.valid){
continue;
}
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal(((-8525.23204)+(((-14131.24804)*cj5))+((pz*x806))+(((-5855.91601)*(cj5*cj5))))),IkReal(((((-1.0)*x805*x806))+(((-1.0)*x806*x808))+(((5855.91601)*cj5*sj5))+(((7065.62402)*sj5))+(((70.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x809.value)))+(x810.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x811=IKcos(j3);
IkReal x812=IKsin(j3);
IkReal x813=(cj2*px);
IkReal x814=(py*sj2);
IkReal x815=((0.24199)*sj5);
IkReal x816=((0.24199)*cj5);
IkReal x817=(pz*x811);
IkReal x818=((0.58396)*x812);
evalcond[0]=((((-1.0)*x812*x815))+(((-1.0)*x811*x816))+(((-0.29198)*x811))+pz);
evalcond[1]=((-0.29198)+((x812*x814))+((x812*x813))+(((-1.0)*x816))+(((-0.0007)*x812))+x817);
evalcond[2]=((0.0007)+((x812*x816))+(((-1.0)*x811*x815))+(((0.29198)*x812))+(((-1.0)*x813))+(((-1.0)*x814)));
evalcond[3]=((((-0.0007)*x811))+((x811*x813))+((x811*x814))+(((-1.0)*pz*x812))+x815);
evalcond[4]=((-0.0266936503)+(((0.58396)*x817))+(((-0.000408772)*x812))+((x813*x818))+((x814*x818))+(((-1.0)*pp))+(((0.0014)*x813))+(((0.0014)*x814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x819=(py*sj2);
IkReal x820=((2419900000.0)*cj5);
IkReal x821=((2419900000.0)*sj5);
IkReal x822=(cj2*px);
CheckValue<IkReal> x823=IKPowWithIntegerCheck(IKsign(((-1438114805.0)+(((-1413124804.0)*cj5)))),-1);
if(!x823.valid){
continue;
}
CheckValue<IkReal> x824 = IKatan2WithCheck(IkReal(((2043860.0)+(((-1.0)*pz*x821))+(((-1.0)*x819*x820))+(((-2919800000.0)*x822))+(((-1.0)*x820*x822))+(((-2919800000.0)*x819))+(((1693930.0)*cj5)))),IkReal((((x821*x822))+(((-1.0)*pz*x820))+((x819*x821))+(((-1693930.0)*sj5))+(((-2919800000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x824.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x823.value)))+(x824.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x825=IKcos(j3);
IkReal x826=IKsin(j3);
IkReal x827=(cj2*px);
IkReal x828=(py*sj2);
IkReal x829=((0.24199)*sj5);
IkReal x830=((0.24199)*cj5);
IkReal x831=(pz*x825);
IkReal x832=((0.58396)*x826);
evalcond[0]=((((-1.0)*x826*x829))+(((-0.29198)*x825))+pz+(((-1.0)*x825*x830)));
evalcond[1]=((-0.29198)+(((-0.0007)*x826))+(((-1.0)*x830))+x831+((x826*x827))+((x826*x828)));
evalcond[2]=((0.0007)+(((0.29198)*x826))+((x826*x830))+(((-1.0)*x827))+(((-1.0)*x828))+(((-1.0)*x825*x829)));
evalcond[3]=((((-0.0007)*x825))+((x825*x827))+((x825*x828))+x829+(((-1.0)*pz*x826)));
evalcond[4]=((-0.0266936503)+((x827*x832))+(((0.0014)*x827))+(((0.0014)*x828))+(((-1.0)*pp))+(((0.58396)*x831))+(((-0.000408772)*x826))+((x828*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x833=IKPowWithIntegerCheck(sj4,-1);
if(!x833.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x833.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x833.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))))+IKsqr(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873e-5)*(x833.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))), ((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((0.24199)*sj4*(IKsin(j5))))+(((-1.0)*cj2*py))+((px*sj2)));
evalcond[1]=((0.1438109905)+(((0.1413124804)*(IKcos(j5))))+(((0.0014)*cj2*px))+(((-1.0)*pp))+(((0.0014)*py*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
IkReal x834=(cj2*px);
IkReal x835=((100000.0)*pz);
IkReal x836=((24199.0)*cj5);
IkReal x837=((1428.57142857143)*cj5);
IkReal x838=(py*sj2);
IkReal x839=(cj4*sj5);
j3eval[0]=((-1.20657878424728)+(((1723.68397749612)*x838))+(((1723.68397749612)*x834))+((x837*x838))+((x834*x837))+(((1428.57142857143)*pz*x839))+(((-1.0)*cj5)));
j3eval[1]=((IKabs((((x835*x838))+(((-70.0)*pz))+((x834*x835))+(((7065.62402)*x839))+(((5855.91601)*cj5*x839)))))+(IKabs(((8525.23204)+(((-1.0)*pz*x835))+(((5855.91601)*(cj5*cj5)))+(((14131.24804)*cj5))))));
j3eval[2]=IKsign(((-20.4386)+(((29198.0)*x834))+(((29198.0)*x838))+(((-16.9393)*cj5))+((x836*x838))+(((24199.0)*pz*x839))+((x834*x836))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x840=cj4*cj4;
IkReal x841=cj5*cj5;
IkReal x842=(py*sj2);
IkReal x843=(cj4*sj5);
IkReal x844=((2419900000.0)*pz);
IkReal x845=((2419900000.0)*cj5);
IkReal x846=(cj2*px);
IkReal x847=(x840*x841);
j3eval[0]=((1.45583236259565)+(((2.41315756849457)*cj5))+(((-1.0)*x847))+x841+x840);
j3eval[1]=((IKabs(((((2419900000.0)*x843*x846))+(((2419900000.0)*x842*x843))+((cj5*x844))+(((2919800000.0)*pz))+(((-1693930.0)*x843)))))+(IKabs(((-2043860.0)+(((2919800000.0)*x846))+(((2919800000.0)*x842))+(((-1.0)*x843*x844))+((x842*x845))+(((-1693930.0)*cj5))+((x845*x846))))));
j3eval[2]=IKsign(((852523204.0)+(((1413124804.0)*cj5))+(((585591601.0)*x840))+(((585591601.0)*x841))+(((-585591601.0)*x847))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x848=(py*sj2);
IkReal x849=(pz*sj4);
IkReal x850=(cj2*px);
IkReal x851=(cj4*sj4*sj5);
j3eval[0]=((((-1.0)*x851))+(((1428.57142857143)*x848*x851))+(((1428.57142857143)*x850*x851))+(((-1428.57142857143)*cj5*x849))+(((-1723.68397749612)*x849)));
j3eval[1]=IKsign(((((-16.9393)*x851))+(((-24199.0)*cj5*x849))+(((-29198.0)*x849))+(((24199.0)*x848*x851))+(((24199.0)*x850*x851))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x852=(py*sj2);
IkReal x853=((2419900000.0)*cj5);
IkReal x854=((2419900000.0)*sj5);
IkReal x855=(cj2*px);
j3eval[0]=((-1.01768421368676)+(((-1.0)*cj5)));
j3eval[1]=IKsign(((-1438114805.0)+(((-1413124804.0)*cj5))));
j3eval[2]=((IKabs(((2043860.0)+(((-1.0)*x853*x855))+(((-1.0)*x852*x853))+(((-2919800000.0)*x852))+(((-2919800000.0)*x855))+(((1693930.0)*cj5))+((pz*x854)))))+(IKabs(((((1693930.0)*sj5))+(((-1.0)*x852*x854))+(((-1.0)*pz*x853))+(((-2919800000.0)*pz))+(((-1.0)*x854*x855))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x856=(pz*sj5);
IkReal x857=(cj2*px);
IkReal x858=((100000.0)*pz);
IkReal x859=(py*sj2);
IkReal x860=((24199.0)*cj5);
IkReal x861=((1428.57142857143)*cj5);
j3eval[0]=((1.20657878424728)+cj5+(((-1723.68397749612)*x859))+(((-1723.68397749612)*x857))+(((-1.0)*x859*x861))+(((-1428.57142857143)*x856))+(((-1.0)*x857*x861)));
j3eval[1]=((IKabs(((((-7065.62402)*sj5))+(((-1.0)*x858*x859))+(((-5855.91601)*cj5*sj5))+(((70.0)*pz))+(((-1.0)*x857*x858)))))+(IKabs(((-8525.23204)+(((-14131.24804)*cj5))+(((-5855.91601)*(cj5*cj5)))+((pz*x858))))));
j3eval[2]=IKsign(((20.4386)+(((16.9393)*cj5))+(((-29198.0)*x857))+(((-29198.0)*x859))+(((-24199.0)*x856))+(((-1.0)*x859*x860))+(((-1.0)*x857*x860))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x862=py*py;
IkReal x863=cj2*cj2;
IkReal x864=pz*pz;
IkReal x865=px*px;
IkReal x866=(cj2*px);
IkReal x867=((24199.0)*sj5);
IkReal x868=(py*sj2);
IkReal x869=((24199.0)*cj5);
IkReal x870=((100000.0)*x862);
IkReal x871=((2040816.32653061)*x862);
IkReal x872=(x863*x865);
j3eval[0]=((-1.0)+(((-2040816.32653061)*x864))+((x863*x871))+(((2857.14285714286)*x868))+(((2857.14285714286)*x866))+(((-4081632.65306122)*x866*x868))+(((-2040816.32653061)*x872))+(((-1.0)*x871)));
j3eval[1]=IKsign(((-0.049)+(((140.0)*x868))+(((140.0)*x866))+((x863*x870))+(((-200000.0)*x866*x868))+(((-100000.0)*x864))+(((-100000.0)*x872))+(((-1.0)*x870))));
j3eval[2]=((IKabs(((((-29198.0)*pz))+(((-1.0)*x866*x867))+(((-1.0)*pz*x869))+(((16.9393)*sj5))+(((-1.0)*x867*x868)))))+(IKabs(((20.4386)+(((-1.0)*x866*x869))+(((16.9393)*cj5))+(((-1.0)*x868*x869))+(((-29198.0)*x866))+(((-29198.0)*x868))+((pz*x867))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x873=py*py;
IkReal x874=cj2*cj2;
IkReal x875=(cj2*px);
IkReal x876=((24199.0)*cj5);
IkReal x877=(py*sj2);
IkReal x878=((24199.0)*sj5);
IkReal x879=((100000.0)*x874);
CheckValue<IkReal> x880=IKPowWithIntegerCheck(IKsign(((-0.049)+(((140.0)*x875))+(((140.0)*x877))+((x873*x879))+(((-200000.0)*x875*x877))+(((-1.0)*x879*(px*px)))+(((-100000.0)*(pz*pz)))+(((-100000.0)*x873)))),-1);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881 = IKatan2WithCheck(IkReal(((20.4386)+(((-1.0)*x876*x877))+(((16.9393)*cj5))+(((-29198.0)*x877))+(((-29198.0)*x875))+(((-1.0)*x875*x876))+((pz*x878)))),IkReal(((((-1.0)*x877*x878))+(((-29198.0)*pz))+(((16.9393)*sj5))+(((-1.0)*pz*x876))+(((-1.0)*x875*x878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x881.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x880.value)))+(x881.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x882=IKcos(j3);
IkReal x883=IKsin(j3);
IkReal x884=(py*sj2);
IkReal x885=((0.24199)*sj5);
IkReal x886=((0.24199)*cj5);
IkReal x887=(cj2*px);
IkReal x888=(pz*x882);
IkReal x889=((1.0)*x882);
IkReal x890=(x883*x887);
evalcond[0]=((((-1.0)*x882*x886))+((x883*x885))+(((-0.29198)*x882))+pz);
evalcond[1]=((-0.29198)+((x883*x884))+(((-1.0)*x886))+(((-0.0007)*x883))+x888+x890);
evalcond[2]=((0.0007)+((x883*x886))+(((0.29198)*x883))+((x882*x885))+(((-1.0)*x884))+(((-1.0)*x887)));
evalcond[3]=((((-1.0)*x887*x889))+(((0.0007)*x882))+((pz*x883))+x885+(((-1.0)*x884*x889)));
evalcond[4]=((-0.0266936503)+(((0.58396)*x890))+(((0.58396)*x888))+(((0.58396)*x883*x884))+(((-0.000408772)*x883))+(((-1.0)*pp))+(((0.0014)*x887))+(((0.0014)*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x891=(cj2*px);
IkReal x892=((100000.0)*pz);
IkReal x893=((24199.0)*cj5);
IkReal x894=(py*sj2);
CheckValue<IkReal> x895=IKPowWithIntegerCheck(IKsign(((20.4386)+(((-29198.0)*x894))+(((-29198.0)*x891))+(((16.9393)*cj5))+(((-24199.0)*pz*sj5))+(((-1.0)*x893*x894))+(((-1.0)*x891*x893)))),-1);
if(!x895.valid){
continue;
}
CheckValue<IkReal> x896 = IKatan2WithCheck(IkReal(((-8525.23204)+((pz*x892))+(((-14131.24804)*cj5))+(((-5855.91601)*(cj5*cj5))))),IkReal(((((-1.0)*x892*x894))+(((-7065.62402)*sj5))+(((-5855.91601)*cj5*sj5))+(((70.0)*pz))+(((-1.0)*x891*x892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x896.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x895.value)))+(x896.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x897=IKcos(j3);
IkReal x898=IKsin(j3);
IkReal x899=(py*sj2);
IkReal x900=((0.24199)*sj5);
IkReal x901=((0.24199)*cj5);
IkReal x902=(cj2*px);
IkReal x903=(pz*x897);
IkReal x904=((1.0)*x897);
IkReal x905=(x898*x902);
evalcond[0]=((((-1.0)*x897*x901))+(((-0.29198)*x897))+pz+((x898*x900)));
evalcond[1]=((-0.29198)+((x898*x899))+(((-1.0)*x901))+(((-0.0007)*x898))+x905+x903);
evalcond[2]=((0.0007)+(((0.29198)*x898))+((x897*x900))+(((-1.0)*x899))+(((-1.0)*x902))+((x898*x901)));
evalcond[3]=((((0.0007)*x897))+(((-1.0)*x902*x904))+((pz*x898))+x900+(((-1.0)*x899*x904)));
evalcond[4]=((-0.0266936503)+(((-0.000408772)*x898))+(((-1.0)*pp))+(((0.0014)*x899))+(((0.58396)*x898*x899))+(((0.0014)*x902))+(((0.58396)*x903))+(((0.58396)*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x906=(py*sj2);
IkReal x907=((2419900000.0)*cj5);
IkReal x908=((2419900000.0)*sj5);
IkReal x909=(cj2*px);
CheckValue<IkReal> x910=IKPowWithIntegerCheck(IKsign(((-1438114805.0)+(((-1413124804.0)*cj5)))),-1);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911 = IKatan2WithCheck(IkReal(((2043860.0)+(((-2919800000.0)*x906))+(((-2919800000.0)*x909))+((pz*x908))+(((1693930.0)*cj5))+(((-1.0)*x907*x909))+(((-1.0)*x906*x907)))),IkReal(((((-1.0)*x908*x909))+(((1693930.0)*sj5))+(((-1.0)*pz*x907))+(((-2919800000.0)*pz))+(((-1.0)*x906*x908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x910.value)))+(x911.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x912=IKcos(j3);
IkReal x913=IKsin(j3);
IkReal x914=(py*sj2);
IkReal x915=((0.24199)*sj5);
IkReal x916=((0.24199)*cj5);
IkReal x917=(cj2*px);
IkReal x918=(pz*x912);
IkReal x919=((1.0)*x912);
IkReal x920=(x913*x917);
evalcond[0]=((((-0.29198)*x912))+pz+(((-1.0)*x912*x916))+((x913*x915)));
evalcond[1]=((-0.29198)+(((-1.0)*x916))+(((-0.0007)*x913))+((x913*x914))+x920+x918);
evalcond[2]=((0.0007)+(((0.29198)*x913))+(((-1.0)*x914))+(((-1.0)*x917))+((x912*x915))+((x913*x916)));
evalcond[3]=(((pz*x913))+(((0.0007)*x912))+(((-1.0)*x914*x919))+x915+(((-1.0)*x917*x919)));
evalcond[4]=((-0.0266936503)+(((-0.000408772)*x913))+(((0.58396)*x920))+(((-1.0)*pp))+(((0.58396)*x913*x914))+(((0.58396)*x918))+(((0.0014)*x914))+(((0.0014)*x917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x921=(py*sj2);
IkReal x922=((2419900000.0)*cj5);
IkReal x923=((2419900000.0)*sj5);
IkReal x924=(cj2*px);
j3eval[0]=((-1.01768421368676)+(((-1.0)*cj5)));
j3eval[1]=IKsign(((-1438114805.0)+(((-1413124804.0)*cj5))));
j3eval[2]=((IKabs((((x921*x923))+((x923*x924))+(((-1.0)*pz*x922))+(((-1693930.0)*sj5))+(((-2919800000.0)*pz)))))+(IKabs(((2043860.0)+(((-1.0)*pz*x923))+(((-1.0)*x921*x922))+(((-2919800000.0)*x924))+(((-2919800000.0)*x921))+(((1693930.0)*cj5))+(((-1.0)*x922*x924))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x925=(pz*sj5);
IkReal x926=(cj2*px);
IkReal x927=((100000.0)*pz);
IkReal x928=(py*sj2);
IkReal x929=((24199.0)*cj5);
IkReal x930=((1428.57142857143)*cj5);
j3eval[0]=((1.20657878424728)+cj5+(((-1.0)*x928*x930))+(((-1723.68397749612)*x928))+(((-1723.68397749612)*x926))+(((1428.57142857143)*x925))+(((-1.0)*x926*x930)));
j3eval[1]=((IKabs(((-8525.23204)+(((-14131.24804)*cj5))+((pz*x927))+(((-5855.91601)*(cj5*cj5))))))+(IKabs(((((-1.0)*x927*x928))+(((-1.0)*x926*x927))+(((5855.91601)*cj5*sj5))+(((7065.62402)*sj5))+(((70.0)*pz))))));
j3eval[2]=IKsign(((20.4386)+(((24199.0)*x925))+(((-1.0)*x928*x929))+(((16.9393)*cj5))+(((-1.0)*x926*x929))+(((-29198.0)*x926))+(((-29198.0)*x928))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x931=cj2*cj2;
IkReal x932=py*py;
IkReal x933=pz*pz;
IkReal x934=px*px;
IkReal x935=(cj2*px);
IkReal x936=((24199.0)*sj5);
IkReal x937=(py*sj2);
IkReal x938=((24199.0)*cj5);
IkReal x939=((100000.0)*x932);
IkReal x940=((2040816.32653061)*x932);
IkReal x941=(x931*x934);
j3eval[0]=((1.0)+(((2040816.32653061)*x933))+(((-2857.14285714286)*x937))+(((-2857.14285714286)*x935))+(((4081632.65306122)*x935*x937))+(((2040816.32653061)*x941))+(((-1.0)*x931*x940))+x940);
j3eval[1]=((IKabs(((-20.4386)+((x937*x938))+(((-16.9393)*cj5))+((x935*x938))+((pz*x936))+(((29198.0)*x935))+(((29198.0)*x937)))))+(IKabs(((((-1.0)*x935*x936))+(((16.9393)*sj5))+((pz*x938))+(((-1.0)*x936*x937))+(((29198.0)*pz))))));
j3eval[2]=IKsign(((0.049)+(((100000.0)*x933))+(((-1.0)*x931*x939))+(((-140.0)*x935))+(((-140.0)*x937))+(((200000.0)*x935*x937))+(((100000.0)*x941))+x939));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x942=cj2*cj2;
IkReal x943=py*py;
IkReal x944=((24199.0)*cj5);
IkReal x945=(cj2*px);
IkReal x946=(py*sj2);
IkReal x947=((24199.0)*sj5);
IkReal x948=((100000.0)*x942);
CheckValue<IkReal> x949=IKPowWithIntegerCheck(IKsign(((0.049)+(((200000.0)*x945*x946))+(((-140.0)*x946))+(((-140.0)*x945))+((x948*(px*px)))+(((-1.0)*x943*x948))+(((100000.0)*x943))+(((100000.0)*(pz*pz))))),-1);
if(!x949.valid){
continue;
}
CheckValue<IkReal> x950 = IKatan2WithCheck(IkReal(((-20.4386)+(((-16.9393)*cj5))+((x944*x946))+((x944*x945))+(((29198.0)*x945))+(((29198.0)*x946))+((pz*x947)))),IkReal(((((-1.0)*x945*x947))+(((-1.0)*x946*x947))+(((16.9393)*sj5))+(((29198.0)*pz))+((pz*x944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x950.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x949.value)))+(x950.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x951=IKcos(j3);
IkReal x952=IKsin(j3);
IkReal x953=(cj2*px);
IkReal x954=(py*sj2);
IkReal x955=((0.24199)*sj5);
IkReal x956=((0.24199)*cj5);
IkReal x957=(pz*x951);
IkReal x958=((0.58396)*x952);
evalcond[0]=(pz+(((-1.0)*x951*x956))+(((-0.29198)*x951))+(((-1.0)*x952*x955)));
evalcond[1]=((-0.29198)+((x952*x954))+((x952*x953))+(((-0.0007)*x952))+(((-1.0)*x956))+x957);
evalcond[2]=((0.0007)+(((0.29198)*x952))+((x952*x956))+(((-1.0)*x954))+(((-1.0)*x953))+(((-1.0)*x951*x955)));
evalcond[3]=(((x951*x954))+((x951*x953))+(((-0.0007)*x951))+(((-1.0)*pz*x952))+x955);
evalcond[4]=((-0.0266936503)+(((-0.000408772)*x952))+(((0.0014)*x953))+(((0.0014)*x954))+(((0.58396)*x957))+(((-1.0)*pp))+((x953*x958))+((x954*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x959=(cj2*px);
IkReal x960=((100000.0)*pz);
IkReal x961=((24199.0)*cj5);
IkReal x962=(py*sj2);
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal(((-8525.23204)+(((-14131.24804)*cj5))+((pz*x960))+(((-5855.91601)*(cj5*cj5))))),IkReal(((((-1.0)*x960*x962))+(((-1.0)*x959*x960))+(((5855.91601)*cj5*sj5))+(((7065.62402)*sj5))+(((70.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
CheckValue<IkReal> x964=IKPowWithIntegerCheck(IKsign(((20.4386)+(((-29198.0)*x962))+(((-29198.0)*x959))+(((-1.0)*x961*x962))+(((16.9393)*cj5))+(((-1.0)*x959*x961))+(((24199.0)*pz*sj5)))),-1);
if(!x964.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x963.value)+(((1.5707963267949)*(x964.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x965=IKcos(j3);
IkReal x966=IKsin(j3);
IkReal x967=(cj2*px);
IkReal x968=(py*sj2);
IkReal x969=((0.24199)*sj5);
IkReal x970=((0.24199)*cj5);
IkReal x971=(pz*x965);
IkReal x972=((0.58396)*x966);
evalcond[0]=((((-1.0)*x965*x970))+(((-1.0)*x966*x969))+pz+(((-0.29198)*x965)));
evalcond[1]=((-0.29198)+(((-0.0007)*x966))+((x966*x967))+((x966*x968))+x971+(((-1.0)*x970)));
evalcond[2]=((0.0007)+(((0.29198)*x966))+(((-1.0)*x965*x969))+(((-1.0)*x968))+(((-1.0)*x967))+((x966*x970)));
evalcond[3]=((((-0.0007)*x965))+((x965*x967))+((x965*x968))+(((-1.0)*pz*x966))+x969);
evalcond[4]=((-0.0266936503)+(((-0.000408772)*x966))+(((0.0014)*x968))+(((0.0014)*x967))+((x968*x972))+(((0.58396)*x971))+(((-1.0)*pp))+((x967*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x973=(py*sj2);
IkReal x974=((2419900000.0)*cj5);
IkReal x975=((2419900000.0)*sj5);
IkReal x976=(cj2*px);
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign(((-1438114805.0)+(((-1413124804.0)*cj5)))),-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal(((2043860.0)+(((-1.0)*pz*x975))+(((-1.0)*x974*x976))+(((-2919800000.0)*x973))+(((-2919800000.0)*x976))+(((1693930.0)*cj5))+(((-1.0)*x973*x974)))),IkReal((((x975*x976))+(((-1.0)*pz*x974))+((x973*x975))+(((-1693930.0)*sj5))+(((-2919800000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x977.value)))+(x978.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x979=IKcos(j3);
IkReal x980=IKsin(j3);
IkReal x981=(cj2*px);
IkReal x982=(py*sj2);
IkReal x983=((0.24199)*sj5);
IkReal x984=((0.24199)*cj5);
IkReal x985=(pz*x979);
IkReal x986=((0.58396)*x980);
evalcond[0]=(pz+(((-0.29198)*x979))+(((-1.0)*x980*x983))+(((-1.0)*x979*x984)));
evalcond[1]=((-0.29198)+(((-1.0)*x984))+(((-0.0007)*x980))+((x980*x981))+((x980*x982))+x985);
evalcond[2]=((0.0007)+(((0.29198)*x980))+(((-1.0)*x981))+(((-1.0)*x982))+(((-1.0)*x979*x983))+((x980*x984)));
evalcond[3]=((((-0.0007)*x979))+((x979*x982))+((x979*x981))+(((-1.0)*pz*x980))+x983);
evalcond[4]=((-0.0266936503)+((x981*x986))+(((-1.0)*pp))+(((0.0014)*x982))+(((0.0014)*x981))+(((0.58396)*x985))+((x982*x986))+(((-0.000408772)*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x987=cj4*cj4;
IkReal x988=(pz*sj4);
IkReal x989=(cj4*px);
IkReal x990=((24199.0)*sj5);
IkReal x991=((24199.0)*cj5);
IkReal x992=(py*sj2);
IkReal x993=(cj4*sj4);
IkReal x994=(cj2*cj4*py);
CheckValue<IkReal> x995=IKPowWithIntegerCheck(IKsign((((x990*x992*x993))+(((-16.9393)*sj5*x993))+((cj2*sj4*x989*x990))+(((-29198.0)*x988))+(((-1.0)*x988*x991)))),-1);
if(!x995.valid){
continue;
}
CheckValue<IkReal> x996 = IKatan2WithCheck(IkReal(((((29198.0)*x994))+(((-100000.0)*x988*x992))+((x991*x994))+(((70.0)*x988))+(((-29198.0)*sj2*x989))+(((-100000.0)*cj2*px*x988))+(((-1.0)*sj2*x989*x991)))),IkReal(((((-100000.0)*pz*x988))+((cj2*py*x987*x990))+(((-1.0)*px*sj2*x987*x990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x996.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x995.value)))+(x996.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x997=IKcos(j3);
IkReal x998=IKsin(j3);
IkReal x999=((1.0)*cj4);
IkReal x1000=((1.0)*sj4);
IkReal x1001=(py*sj2);
IkReal x1002=((0.24199)*cj5);
IkReal x1003=(px*sj2);
IkReal x1004=((0.24199)*sj5);
IkReal x1005=(cj2*py);
IkReal x1006=(cj2*px);
IkReal x1007=(pz*x998);
IkReal x1008=(pz*x997);
IkReal x1009=((0.0007)*x997);
IkReal x1010=(x1001*x997);
IkReal x1011=(x1006*x998);
evalcond[0]=((((-1.0)*x1002*x997))+((cj4*x1004*x998))+(((-0.29198)*x997))+pz);
evalcond[1]=((-0.29198)+x1011+x1008+(((-1.0)*x1002))+((x1001*x998))+(((-0.0007)*x998)));
evalcond[2]=((0.0007)+(((-1.0)*x1001))+(((-1.0)*x1006))+((cj4*x1004*x997))+((x1002*x998))+(((0.29198)*x998)));
evalcond[3]=(((sj4*x1010))+((cj4*x1003))+((sj4*x1006*x997))+(((-1.0)*x1005*x999))+(((-1.0)*x1000*x1007))+(((-1.0)*sj4*x1009)));
evalcond[4]=((-0.0266936503)+(((0.58396)*x1011))+(((0.0014)*x1001))+(((0.0014)*x1006))+(((0.58396)*x1001*x998))+(((-1.0)*pp))+(((-0.000408772)*x998))+(((0.58396)*x1008)));
evalcond[5]=(((sj4*x1003))+x1004+((cj4*x1009))+((cj4*x1007))+(((-1.0)*x1006*x997*x999))+(((-1.0)*x1010*x999))+(((-1.0)*x1000*x1005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1012=cj4*cj4;
IkReal x1013=cj5*cj5;
IkReal x1014=(py*sj2);
IkReal x1015=(cj4*sj5);
IkReal x1016=((2419900000.0)*pz);
IkReal x1017=((2419900000.0)*cj5);
IkReal x1018=(cj2*px);
IkReal x1019=((585591601.0)*x1013);
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKsign(((852523204.0)+(((-1.0)*x1012*x1019))+x1019+(((1413124804.0)*cj5))+(((585591601.0)*x1012)))),-1);
if(!x1020.valid){
continue;
}
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal(((-2043860.0)+((x1014*x1017))+((x1017*x1018))+(((-1.0)*x1015*x1016))+(((-1693930.0)*cj5))+(((2919800000.0)*x1014))+(((2919800000.0)*x1018)))),IkReal(((((2419900000.0)*x1015*x1018))+(((2419900000.0)*x1014*x1015))+(((2919800000.0)*pz))+((cj5*x1016))+(((-1693930.0)*x1015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1020.value)))+(x1021.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1022=IKcos(j3);
IkReal x1023=IKsin(j3);
IkReal x1024=((1.0)*cj4);
IkReal x1025=((1.0)*sj4);
IkReal x1026=(py*sj2);
IkReal x1027=((0.24199)*cj5);
IkReal x1028=(px*sj2);
IkReal x1029=((0.24199)*sj5);
IkReal x1030=(cj2*py);
IkReal x1031=(cj2*px);
IkReal x1032=(pz*x1023);
IkReal x1033=(pz*x1022);
IkReal x1034=((0.0007)*x1022);
IkReal x1035=(x1022*x1026);
IkReal x1036=(x1023*x1031);
evalcond[0]=((((-1.0)*x1022*x1027))+((cj4*x1023*x1029))+pz+(((-0.29198)*x1022)));
evalcond[1]=((-0.29198)+x1033+x1036+(((-1.0)*x1027))+((x1023*x1026))+(((-0.0007)*x1023)));
evalcond[2]=((0.0007)+(((0.29198)*x1023))+(((-1.0)*x1031))+(((-1.0)*x1026))+((x1023*x1027))+((cj4*x1022*x1029)));
evalcond[3]=((((-1.0)*x1024*x1030))+((sj4*x1035))+(((-1.0)*x1025*x1032))+((sj4*x1022*x1031))+((cj4*x1028))+(((-1.0)*sj4*x1034)));
evalcond[4]=((-0.0266936503)+(((0.0014)*x1026))+(((0.0014)*x1031))+(((-1.0)*pp))+(((0.58396)*x1023*x1026))+(((-0.000408772)*x1023))+(((0.58396)*x1033))+(((0.58396)*x1036)));
evalcond[5]=((((-1.0)*x1024*x1035))+(((-1.0)*x1025*x1030))+x1029+((sj4*x1028))+((cj4*x1032))+((cj4*x1034))+(((-1.0)*x1022*x1024*x1031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1037=((100000.0)*pz);
IkReal x1038=(cj2*px);
IkReal x1039=(cj4*sj5);
IkReal x1040=(py*sj2);
IkReal x1041=((24199.0)*cj5);
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(IKsign(((-20.4386)+((x1038*x1041))+((x1040*x1041))+(((-16.9393)*cj5))+(((29198.0)*x1038))+(((29198.0)*x1040))+(((24199.0)*pz*x1039)))),-1);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043 = IKatan2WithCheck(IkReal(((8525.23204)+(((-1.0)*pz*x1037))+(((5855.91601)*(cj5*cj5)))+(((14131.24804)*cj5)))),IkReal(((((5855.91601)*cj5*x1039))+(((7065.62402)*x1039))+((x1037*x1040))+(((-70.0)*pz))+((x1037*x1038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1043.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1042.value)))+(x1043.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1044=IKcos(j3);
IkReal x1045=IKsin(j3);
IkReal x1046=((1.0)*cj4);
IkReal x1047=((1.0)*sj4);
IkReal x1048=(py*sj2);
IkReal x1049=((0.24199)*cj5);
IkReal x1050=(px*sj2);
IkReal x1051=((0.24199)*sj5);
IkReal x1052=(cj2*py);
IkReal x1053=(cj2*px);
IkReal x1054=(pz*x1045);
IkReal x1055=(pz*x1044);
IkReal x1056=((0.0007)*x1044);
IkReal x1057=(x1044*x1048);
IkReal x1058=(x1045*x1053);
evalcond[0]=((((-1.0)*x1044*x1049))+((cj4*x1045*x1051))+(((-0.29198)*x1044))+pz);
evalcond[1]=((-0.29198)+x1055+x1058+(((-0.0007)*x1045))+((x1045*x1048))+(((-1.0)*x1049)));
evalcond[2]=((0.0007)+((cj4*x1044*x1051))+(((-1.0)*x1053))+(((-1.0)*x1048))+(((0.29198)*x1045))+((x1045*x1049)));
evalcond[3]=((((-1.0)*x1046*x1052))+(((-1.0)*sj4*x1056))+((sj4*x1057))+((cj4*x1050))+((sj4*x1044*x1053))+(((-1.0)*x1047*x1054)));
evalcond[4]=((-0.0266936503)+(((-0.000408772)*x1045))+(((-1.0)*pp))+(((0.0014)*x1048))+(((0.0014)*x1053))+(((0.58396)*x1055))+(((0.58396)*x1058))+(((0.58396)*x1045*x1048)));
evalcond[5]=((((-1.0)*x1046*x1057))+x1051+(((-1.0)*x1044*x1046*x1053))+((sj4*x1050))+((cj4*x1056))+((cj4*x1054))+(((-1.0)*x1047*x1052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1059=cj2*cj2;
IkReal x1060=py*py;
IkReal x1061=px*px;
IkReal x1062=(px*py);
IkReal x1063=(cj2*sj2);
IkReal x1064=((14599.0)*cj4);
IkReal x1065=((25000.0)*pp);
IkReal x1066=(px*pz);
IkReal x1067=(pz*sj4);
IkReal x1068=(cj2*sj4);
IkReal x1069=((10.2193)*cj4);
IkReal x1070=(cj2*py);
IkReal x1071=(sj4*x1059);
IkReal x1072=((14599.0)*x1060);
IkReal x1073=(py*sj2*sj4);
IkReal x1074=((35.0)*x1060);
CheckValue<IkReal> x1075 = IKatan2WithCheck(IkReal(((((-35.0)*x1061*x1071))+(((-17.5)*pp*sj4))+((sj2*x1064*x1066))+((px*x1065*x1068))+((x1071*x1074))+(((667.3657575)*px*x1068))+(((-1.0)*sj4*x1074))+(((-70.0)*sj4*x1062*x1063))+(((667.3657575)*x1073))+(((-0.46713888025)*sj4))+((x1065*x1073))+(((-1.0)*pz*x1064*x1070)))),IkReal((((px*sj2*x1069))+(((-35.0)*py*sj2*x1067))+((x1060*x1063*x1064))+(((-1.0)*x1061*x1063*x1064))+(((-1.0)*x1062*x1064))+(((-35.0)*x1066*x1068))+(((29198.0)*cj4*x1059*x1062))+(((-1.0)*x1069*x1070))+(((667.3412575)*x1067))+((x1065*x1067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1075.valid){
continue;
}
CheckValue<IkReal> x1076=IKPowWithIntegerCheck(IKsign(((((-20.4386)*px*x1068))+(((-1.0)*x1071*x1072))+(((29198.0)*sj4*x1062*x1063))+(((0.00715351)*sj4))+(((14599.0)*x1061*x1071))+(((-20.4386)*x1073))+((sj4*x1072))+(((14599.0)*pz*x1067)))),-1);
if(!x1076.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1075.value)+(((1.5707963267949)*(x1076.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1077=IKcos(j3);
IkReal x1078=IKsin(j3);
IkReal x1079=(py*sj2);
IkReal x1080=(cj2*px);
IkReal x1081=((0.58396)*x1078);
IkReal x1082=(sj4*x1077);
evalcond[0]=(((x1079*x1082))+(((-0.0007)*x1082))+(((-1.0)*pz*sj4*x1078))+((cj4*px*sj2))+((x1080*x1082))+(((-1.0)*cj2*cj4*py)));
evalcond[1]=((-0.0266936503)+((x1079*x1081))+(((0.58396)*pz*x1077))+(((0.0014)*x1079))+(((-1.0)*pp))+(((-0.000408772)*x1078))+((x1080*x1081))+(((0.0014)*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1083=((4.13240216537873)*cj3);
IkReal x1084=((4.13240216537873)*sj3);
IkReal x1085=(py*sj2);
IkReal x1086=(cj2*px);
if( IKabs(((((-1.0)*pz*x1084))+(((-0.00289268151576511)*cj3))+((x1083*x1086))+((x1083*x1085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+((pz*x1083))+(((-0.00289268151576511)*sj3))+((x1084*x1085))+((x1084*x1086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x1084))+(((-0.00289268151576511)*cj3))+((x1083*x1086))+((x1083*x1085))))+IKsqr(((-1.20657878424728)+((pz*x1083))+(((-0.00289268151576511)*sj3))+((x1084*x1085))+((x1084*x1086))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*pz*x1084))+(((-0.00289268151576511)*cj3))+((x1083*x1086))+((x1083*x1085))), ((-1.20657878424728)+((pz*x1083))+(((-0.00289268151576511)*sj3))+((x1084*x1085))+((x1084*x1086))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1087=IKcos(j5);
IkReal x1088=IKsin(j5);
IkReal x1089=(cj2*px);
IkReal x1090=((1.0)*cj3);
IkReal x1091=(py*sj2);
IkReal x1092=((0.24199)*x1088);
IkReal x1093=((0.24199)*x1087);
evalcond[0]=((((-1.0)*cj3*x1093))+(((-0.29198)*cj3))+pz+((sj3*x1092)));
evalcond[1]=((0.1438109905)+(((0.1413124804)*x1087))+(((-1.0)*pp))+(((0.0014)*x1089))+(((0.0014)*x1091)));
evalcond[2]=((-0.29198)+((sj3*x1089))+(((-1.0)*x1093))+(((-0.0007)*sj3))+((cj3*pz))+((sj3*x1091)));
evalcond[3]=((((0.0007)*cj3))+x1092+(((-1.0)*x1090*x1091))+(((-1.0)*x1089*x1090))+((pz*sj3)));
evalcond[4]=((0.0007)+(((0.29198)*sj3))+(((-1.0)*x1091))+(((-1.0)*x1089))+((sj3*x1093))+((cj3*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1094=((4.13240216537873)*pz);
IkReal x1095=((4.13240216537873)*sj3);
IkReal x1096=(py*sj2);
IkReal x1097=(cj2*px);
IkReal x1098=((4.13240216537873)*cj3);
if( IKabs(((((-1.0)*x1097*x1098))+(((-1.0)*x1096*x1098))+(((0.00289268151576511)*cj3))+((sj3*x1094)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((-0.00289268151576511)*sj3))+((x1095*x1096))+((x1095*x1097))+((cj3*x1094)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1097*x1098))+(((-1.0)*x1096*x1098))+(((0.00289268151576511)*cj3))+((sj3*x1094))))+IKsqr(((-1.20657878424728)+(((-0.00289268151576511)*sj3))+((x1095*x1096))+((x1095*x1097))+((cj3*x1094))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x1097*x1098))+(((-1.0)*x1096*x1098))+(((0.00289268151576511)*cj3))+((sj3*x1094))), ((-1.20657878424728)+(((-0.00289268151576511)*sj3))+((x1095*x1096))+((x1095*x1097))+((cj3*x1094))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1099=IKcos(j5);
IkReal x1100=IKsin(j5);
IkReal x1101=(py*sj2);
IkReal x1102=(cj2*px);
IkReal x1103=((0.24199)*x1100);
IkReal x1104=((0.24199)*x1099);
evalcond[0]=((((-0.29198)*cj3))+(((-1.0)*sj3*x1103))+pz+(((-1.0)*cj3*x1104)));
evalcond[1]=((0.1438109905)+(((0.0014)*x1101))+(((0.0014)*x1102))+(((-1.0)*pp))+(((0.1413124804)*x1099)));
evalcond[2]=((-0.29198)+((sj3*x1101))+((sj3*x1102))+(((-0.0007)*sj3))+((cj3*pz))+(((-1.0)*x1104)));
evalcond[3]=(x1103+(((-0.0007)*cj3))+(((-1.0)*pz*sj3))+((cj3*x1102))+((cj3*x1101)));
evalcond[4]=((0.0007)+((sj3*x1104))+(((0.29198)*sj3))+(((-1.0)*x1101))+(((-1.0)*x1102))+(((-1.0)*cj3*x1103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01813945025203)+(((7.05959096176496)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.13240216537873)*pz))+IKsqr(((-1.01813945025203)+(((7.05959096176496)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-4.13240216537873)*pz), ((-1.01813945025203)+(((7.05959096176496)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1105=IKcos(j5);
evalcond[0]=(pz+(((0.24199)*(IKsin(j5)))));
evalcond[1]=((0.143875811108207)+(((-0.997608309416428)*pp))+(((0.1413124804)*x1105)));
evalcond[2]=((-0.246379565566489)+(((-0.24199)*x1105))+(((1.7083504168375)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01813945025203)+(((7.05959096176496)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873)*pz))+IKsqr(((-1.01813945025203)+(((7.05959096176496)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873)*pz), ((-1.01813945025203)+(((7.05959096176496)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1106=IKcos(j5);
evalcond[0]=(pz+(((-0.24199)*(IKsin(j5)))));
evalcond[1]=((0.143875811108207)+(((-0.997608309416428)*pp))+(((0.1413124804)*x1106)));
evalcond[2]=((-0.246379565566489)+(((-0.24199)*x1106))+(((1.7083504168375)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01813945025203)+(((7.05959096176496)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))))+IKsqr(((-1.01813945025203)+(((7.05959096176496)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))), ((-1.01813945025203)+(((7.05959096176496)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1107=IKcos(j5);
evalcond[0]=((0.143875811108207)+(((-0.997608309416428)*pp))+(((0.1413124804)*x1107)));
evalcond[1]=((-0.246379565566489)+(((-0.24199)*x1107))+(((1.7083504168375)*pp)));
evalcond[2]=((((-1.0)*cj2*py))+((px*sj2))+(((0.24199)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01813945025203)+(((7.05959096176496)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))))+IKsqr(((-1.01813945025203)+(((7.05959096176496)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))), ((-1.01813945025203)+(((7.05959096176496)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1108=IKcos(j5);
evalcond[0]=((0.143875811108207)+(((-0.997608309416428)*pp))+(((0.1413124804)*x1108)));
evalcond[1]=((-0.246379565566489)+(((-0.24199)*x1108))+(((1.7083504168375)*pp)));
evalcond[2]=((((-1.0)*cj2*py))+(((-0.24199)*(IKsin(j5))))+((px*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1109=IKPowWithIntegerCheck(sj4,-1);
if(!x1109.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1109.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01813945025203)+(((7.05959096176496)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1109.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))))+IKsqr(((-1.01813945025203)+(((7.05959096176496)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873e-5)*(x1109.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))), ((-1.01813945025203)+(((7.05959096176496)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1110=IKcos(j5);
IkReal x1111=IKsin(j5);
IkReal x1112=(px*sj2);
IkReal x1113=((1.0)*cj2*py);
IkReal x1114=((0.24199)*x1111);
evalcond[0]=(((cj4*x1114))+pz);
evalcond[1]=((0.143875811108207)+(((-0.997608309416428)*pp))+(((0.1413124804)*x1110)));
evalcond[2]=((-0.246379565566489)+(((-0.24199)*x1110))+(((1.7083504168375)*pp)));
evalcond[3]=(x1112+((sj4*x1114))+(((-1.0)*x1113)));
evalcond[4]=(x1114+((cj4*pz))+((sj4*x1112))+(((-1.0)*sj4*x1113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1115=IKPowWithIntegerCheck(cj4,-1);
if(!x1115.valid){
continue;
}
if( IKabs(((-4.13240216537873)*pz*(x1115.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01813945025203)+(((7.05959096176496)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.13240216537873)*pz*(x1115.value)))+IKsqr(((-1.01813945025203)+(((7.05959096176496)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-4.13240216537873)*pz*(x1115.value)), ((-1.01813945025203)+(((7.05959096176496)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1116=IKcos(j5);
IkReal x1117=IKsin(j5);
IkReal x1118=(px*sj2);
IkReal x1119=((1.0)*cj2*py);
IkReal x1120=((0.24199)*x1117);
evalcond[0]=(pz+((cj4*x1120)));
evalcond[1]=((0.143875811108207)+(((-0.997608309416428)*pp))+(((0.1413124804)*x1116)));
evalcond[2]=((-0.246379565566489)+(((-0.24199)*x1116))+(((1.7083504168375)*pp)));
evalcond[3]=(x1118+((sj4*x1120))+(((-1.0)*x1119)));
evalcond[4]=(x1120+((cj4*pz))+((sj4*x1118))+(((-1.0)*sj4*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01723374073681)+(((7.09352198121865)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873)*pz))+IKsqr(((-1.01723374073681)+(((7.09352198121865)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873)*pz), ((-1.01723374073681)+(((7.09352198121865)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1121=IKcos(j5);
evalcond[0]=(pz+(((-0.24199)*(IKsin(j5)))));
evalcond[1]=((0.143747823050089)+(((0.1413124804)*x1121))+(((-1.00240318593793)*pp)));
evalcond[2]=((-0.246160392920901)+(((-0.24199)*x1121))+(((1.7165613842351)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-4.13240216537873)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01723374073681)+(((7.09352198121865)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4.13240216537873)*pz))+IKsqr(((-1.01723374073681)+(((7.09352198121865)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-4.13240216537873)*pz), ((-1.01723374073681)+(((7.09352198121865)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1122=IKcos(j5);
evalcond[0]=(pz+(((0.24199)*(IKsin(j5)))));
evalcond[1]=((0.143747823050089)+(((0.1413124804)*x1122))+(((-1.00240318593793)*pp)));
evalcond[2]=((-0.246160392920901)+(((-0.24199)*x1122))+(((1.7165613842351)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01723374073681)+(((7.09352198121865)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))))+IKsqr(((-1.01723374073681)+(((7.09352198121865)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))), ((-1.01723374073681)+(((7.09352198121865)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1123=IKcos(j5);
evalcond[0]=((0.143747823050089)+(((0.1413124804)*x1123))+(((-1.00240318593793)*pp)));
evalcond[1]=((-0.246160392920901)+(((-0.24199)*x1123))+(((1.7165613842351)*pp)));
evalcond[2]=((((-1.0)*cj2*py))+((px*sj2))+(((0.24199)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01723374073681)+(((7.09352198121865)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))))+IKsqr(((-1.01723374073681)+(((7.09352198121865)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))), ((-1.01723374073681)+(((7.09352198121865)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1124=IKcos(j5);
evalcond[0]=((0.143747823050089)+(((0.1413124804)*x1124))+(((-1.00240318593793)*pp)));
evalcond[1]=((-0.246160392920901)+(((-0.24199)*x1124))+(((1.7165613842351)*pp)));
evalcond[2]=((((-1.0)*cj2*py))+(((-0.24199)*(IKsin(j5))))+((px*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1125=IKPowWithIntegerCheck(sj4,-1);
if(!x1125.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1125.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01723374073681)+(((7.09352198121865)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1125.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))))+IKsqr(((-1.01723374073681)+(((7.09352198121865)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873e-5)*(x1125.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))), ((-1.01723374073681)+(((7.09352198121865)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1126=IKcos(j5);
IkReal x1127=IKsin(j5);
IkReal x1128=(px*sj2);
IkReal x1129=((1.0)*cj2*py);
IkReal x1130=((0.24199)*x1127);
evalcond[0]=((((-1.0)*cj4*x1130))+pz);
evalcond[1]=((0.143747823050089)+(((0.1413124804)*x1126))+(((-1.00240318593793)*pp)));
evalcond[2]=((-0.246160392920901)+(((-0.24199)*x1126))+(((1.7165613842351)*pp)));
evalcond[3]=(x1128+((sj4*x1130))+(((-1.0)*x1129)));
evalcond[4]=(x1130+((sj4*x1128))+(((-1.0)*sj4*x1129))+(((-1.0)*cj4*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1131=IKPowWithIntegerCheck(cj4,-1);
if(!x1131.valid){
continue;
}
if( IKabs(((4.13240216537873)*pz*(x1131.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01723374073681)+(((7.09352198121865)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873)*pz*(x1131.value)))+IKsqr(((-1.01723374073681)+(((7.09352198121865)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873)*pz*(x1131.value)), ((-1.01723374073681)+(((7.09352198121865)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1132=IKcos(j5);
IkReal x1133=IKsin(j5);
IkReal x1134=(px*sj2);
IkReal x1135=((1.0)*cj2*py);
IkReal x1136=((0.24199)*x1133);
evalcond[0]=((((-1.0)*cj4*x1136))+pz);
evalcond[1]=((0.143747823050089)+(((0.1413124804)*x1132))+(((-1.00240318593793)*pp)));
evalcond[2]=((-0.246160392920901)+(((-0.24199)*x1132))+(((1.7165613842351)*pp)));
evalcond[3]=(x1134+((sj4*x1136))+(((-1.0)*x1135)));
evalcond[4]=(x1136+((sj4*x1134))+(((-1.0)*sj4*x1135))+(((-1.0)*cj4*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))))+IKsqr(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))), ((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1137=IKcos(j5);
IkReal x1138=(cj2*px);
IkReal x1139=((1.0)*py);
IkReal x1140=(py*sj2);
IkReal x1141=((0.24199)*x1137);
evalcond[0]=((((-1.0)*cj3*x1141))+(((-0.29198)*cj3))+pz);
evalcond[1]=((((-1.0)*cj2*x1139))+((px*sj2))+(((0.24199)*(IKsin(j5)))));
evalcond[2]=((0.1438109905)+(((0.1413124804)*x1137))+(((0.0014)*x1138))+(((-1.0)*pp))+(((0.0014)*x1140)));
evalcond[3]=((0.0007)+(((-1.0)*sj2*x1139))+(((0.29198)*sj3))+((sj3*x1141))+(((-1.0)*x1138)));
evalcond[4]=((-0.29198)+(((-1.0)*x1141))+(((-0.0007)*sj3))+((sj3*x1140))+((sj3*x1138))+((cj3*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))))+IKsqr(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))), ((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1142=IKcos(j5);
IkReal x1143=(cj2*px);
IkReal x1144=((1.0)*py);
IkReal x1145=(py*sj2);
IkReal x1146=((0.24199)*x1142);
evalcond[0]=((((-1.0)*cj3*x1146))+(((-0.29198)*cj3))+pz);
evalcond[1]=((((-0.24199)*(IKsin(j5))))+((px*sj2))+(((-1.0)*cj2*x1144)));
evalcond[2]=((0.1438109905)+(((-1.0)*pp))+(((0.0014)*x1145))+(((0.0014)*x1143))+(((0.1413124804)*x1142)));
evalcond[3]=((0.0007)+(((0.29198)*sj3))+((sj3*x1146))+(((-1.0)*x1143))+(((-1.0)*sj2*x1144)));
evalcond[4]=((-0.29198)+(((-1.0)*x1146))+(((-0.0007)*sj3))+((sj3*x1143))+((sj3*x1145))+((cj3*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))))+IKsqr(((-1.20657878424728)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((4.13240216537873)*cj2*py))+(((-4.13240216537873)*px*sj2))), ((-1.20657878424728)+(((4.13240216537873)*pz))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1147=IKcos(j5);
evalcond[0]=((-0.29198)+(((-0.24199)*x1147))+pz);
evalcond[1]=((((-1.0)*cj2*py))+((px*sj2))+(((0.24199)*(IKsin(j5)))));
evalcond[2]=((0.1438109905)+(((0.0014)*cj2*px))+(((-1.0)*pp))+(((0.0014)*py*sj2))+(((0.1413124804)*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))))+IKsqr(((-1.20657878424728)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-4.13240216537873)*cj2*py))+(((4.13240216537873)*px*sj2))), ((-1.20657878424728)+(((4.13240216537873)*pz))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1148=IKcos(j5);
evalcond[0]=((-0.29198)+(((-0.24199)*x1148))+pz);
evalcond[1]=((((-1.0)*cj2*py))+(((-0.24199)*(IKsin(j5))))+((px*sj2)));
evalcond[2]=((0.1438109905)+(((0.0014)*cj2*px))+(((-1.0)*pp))+(((0.0014)*py*sj2))+(((0.1413124804)*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-0.00289268151576511)+(((4.13240216537873)*cj2*px))+(((4.13240216537873)*py*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00289268151576511)+(((4.13240216537873)*cj2*px))+(((4.13240216537873)*py*sj2))))+IKsqr(((-1.20657878424728)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-0.00289268151576511)+(((4.13240216537873)*cj2*px))+(((4.13240216537873)*py*sj2))), ((-1.20657878424728)+(((4.13240216537873)*pz))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1149=IKcos(j5);
IkReal x1150=(cj2*px);
IkReal x1151=(py*sj2);
evalcond[0]=((-0.29198)+(((-0.24199)*x1149))+pz);
evalcond[1]=((0.0007)+(((-1.0)*x1151))+(((-1.0)*x1150))+(((0.24199)*(IKsin(j5)))));
evalcond[2]=((0.1438109905)+(((-1.0)*pp))+(((0.0014)*x1150))+(((0.0014)*x1151))+(((0.1413124804)*x1149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.00289268151576511)+(((-4.13240216537873)*cj2*px))+(((-4.13240216537873)*py*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00289268151576511)+(((-4.13240216537873)*cj2*px))+(((-4.13240216537873)*py*sj2))))+IKsqr(((-1.20657878424728)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.00289268151576511)+(((-4.13240216537873)*cj2*px))+(((-4.13240216537873)*py*sj2))), ((-1.20657878424728)+(((4.13240216537873)*pz))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1152=IKcos(j5);
IkReal x1153=(cj2*px);
IkReal x1154=(py*sj2);
evalcond[0]=((-0.29198)+(((-0.24199)*x1152))+pz);
evalcond[1]=((0.0007)+(((-1.0)*x1153))+(((-1.0)*x1154))+(((-0.24199)*(IKsin(j5)))));
evalcond[2]=((0.1438109905)+(((-1.0)*pp))+(((0.0014)*x1153))+(((0.0014)*x1154))+(((0.1413124804)*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(cj4,-1);
if(!x1155.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1155.value)*(((-70.0)+(((100000.0)*cj2*px))+(((100000.0)*py*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1155.value)*(((-70.0)+(((100000.0)*cj2*px))+(((100000.0)*py*sj2))))))+IKsqr(((-1.20657878424728)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873e-5)*(x1155.value)*(((-70.0)+(((100000.0)*cj2*px))+(((100000.0)*py*sj2))))), ((-1.20657878424728)+(((4.13240216537873)*pz))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1156=IKsin(j5);
IkReal x1157=IKcos(j5);
IkReal x1158=((1.0)*cj2);
IkReal x1159=(px*sj2);
IkReal x1160=(py*sj2);
IkReal x1161=((0.24199)*x1156);
evalcond[0]=((-0.29198)+(((-0.24199)*x1157))+pz);
evalcond[1]=(x1159+((sj4*x1161))+(((-1.0)*py*x1158)));
evalcond[2]=((0.0007)+(((-1.0)*px*x1158))+((cj4*x1161))+(((-1.0)*x1160)));
evalcond[3]=((0.1438109905)+(((0.0014)*cj2*px))+(((0.0014)*x1160))+(((-1.0)*pp))+(((0.1413124804)*x1157)));
evalcond[4]=(x1161+(((0.0007)*cj4))+(((-1.0)*cj4*px*x1158))+(((-1.0)*py*sj4*x1158))+(((-1.0)*cj4*x1160))+((sj4*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(sj4,-1);
if(!x1162.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1162.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1162.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))))+IKsqr(((-1.20657878424728)+(((4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873e-5)*(x1162.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))), ((-1.20657878424728)+(((4.13240216537873)*pz))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1163=IKsin(j5);
IkReal x1164=IKcos(j5);
IkReal x1165=((1.0)*cj2);
IkReal x1166=(px*sj2);
IkReal x1167=(py*sj2);
IkReal x1168=((0.24199)*x1163);
evalcond[0]=((-0.29198)+(((-0.24199)*x1164))+pz);
evalcond[1]=(x1166+(((-1.0)*py*x1165))+((sj4*x1168)));
evalcond[2]=((0.0007)+((cj4*x1168))+(((-1.0)*px*x1165))+(((-1.0)*x1167)));
evalcond[3]=((0.1438109905)+(((0.0014)*cj2*px))+(((0.0014)*x1167))+(((0.1413124804)*x1164))+(((-1.0)*pp)));
evalcond[4]=(x1168+(((0.0007)*cj4))+((sj4*x1166))+(((-1.0)*cj4*px*x1165))+(((-1.0)*cj4*x1167))+(((-1.0)*py*sj4*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1169=((4.13240216537873)*cj4);
IkReal x1170=((4.13240216537873)*sj4);
if( IKabs(((((-1.0)*px*sj2*x1170))+(((-1.0)*cj2*px*x1169))+(((-1.0)*py*sj2*x1169))+(((0.00289268151576511)*cj4))+((cj2*py*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.20657878424728)+(((-4.13240216537873)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*sj2*x1170))+(((-1.0)*cj2*px*x1169))+(((-1.0)*py*sj2*x1169))+(((0.00289268151576511)*cj4))+((cj2*py*x1170))))+IKsqr(((-1.20657878424728)+(((-4.13240216537873)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*px*sj2*x1170))+(((-1.0)*cj2*px*x1169))+(((-1.0)*py*sj2*x1169))+(((0.00289268151576511)*cj4))+((cj2*py*x1170))), ((-1.20657878424728)+(((-4.13240216537873)*pz))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1171=IKsin(j5);
IkReal x1172=IKcos(j5);
IkReal x1173=(py*sj2);
IkReal x1174=((1.0)*cj2);
IkReal x1175=(px*sj2);
IkReal x1176=(cj2*px);
IkReal x1177=((0.24199)*x1171);
evalcond[0]=((0.29198)+pz+(((0.24199)*x1172)));
evalcond[1]=(x1175+(((-1.0)*py*x1174))+((sj4*x1177)));
evalcond[2]=((0.0007)+(((-1.0)*px*x1174))+(((-1.0)*cj4*x1177))+(((-1.0)*x1173)));
evalcond[3]=((0.1438109905)+(((0.0014)*x1176))+(((0.0014)*x1173))+(((0.1413124804)*x1172))+(((-1.0)*pp)));
evalcond[4]=(x1177+((cj4*x1173))+((cj4*x1176))+(((-0.0007)*cj4))+((sj4*x1175))+(((-1.0)*py*sj4*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1183=IKPowWithIntegerCheck(sj4,-1);
if(!x1183.valid){
continue;
}
IkReal x1178=x1183.value;
IkReal x1179=((4.13240216537873e-5)*x1178);
IkReal x1180=(cj4*sj3);
IkReal x1181=((100000.0)*px*sj2);
IkReal x1182=((100000.0)*cj2*py);
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(cj3,-1);
if(!x1184.valid){
continue;
}
if( IKabs((x1179*((x1182+(((-1.0)*x1181)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1179*(x1184.value)*(((((100000.0)*pz*sj4))+((x1180*x1182))+(((-1.0)*x1180*x1181))+(((-29198.0)*cj3*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1179*((x1182+(((-1.0)*x1181))))))+IKsqr((x1179*(x1184.value)*(((((100000.0)*pz*sj4))+((x1180*x1182))+(((-1.0)*x1180*x1181))+(((-29198.0)*cj3*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1179*((x1182+(((-1.0)*x1181))))), (x1179*(x1184.value)*(((((100000.0)*pz*sj4))+((x1180*x1182))+(((-1.0)*x1180*x1181))+(((-29198.0)*cj3*sj4))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1185=IKsin(j5);
IkReal x1186=IKcos(j5);
IkReal x1187=(cj3*cj4);
IkReal x1188=(cj2*px);
IkReal x1189=(py*sj2);
IkReal x1190=(cj4*sj3);
IkReal x1191=(px*sj2);
IkReal x1192=((0.24199)*x1185);
IkReal x1193=((1.0)*cj2*py);
IkReal x1194=((0.24199)*x1186);
evalcond[0]=(x1191+((sj4*x1192))+(((-1.0)*x1193)));
evalcond[1]=((0.1438109905)+(((0.1413124804)*x1186))+(((0.0014)*x1189))+(((0.0014)*x1188))+(((-1.0)*pp)));
evalcond[2]=((((-0.29198)*cj3))+(((-1.0)*cj3*x1194))+pz+((x1190*x1192)));
evalcond[3]=((-0.29198)+(((-0.0007)*sj3))+(((-1.0)*x1194))+((sj3*x1189))+((sj3*x1188))+((cj3*pz)));
evalcond[4]=((0.0007)+((x1187*x1192))+(((0.29198)*sj3))+((sj3*x1194))+(((-1.0)*x1188))+(((-1.0)*x1189)));
evalcond[5]=((((0.0007)*x1187))+x1192+((sj4*x1191))+((pz*x1190))+(((-1.0)*sj4*x1193))+(((-1.0)*x1187*x1188))+(((-1.0)*x1187*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1195=(py*sj2);
IkReal x1196=((3500000.0)*cj3);
IkReal x1197=(cj2*px);
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(cj4,-1);
if(!x1198.valid){
continue;
}
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(sj3,-1);
if(!x1199.valid){
continue;
}
if( IKabs(((2.83060631918538e-9)*(x1198.value)*(x1199.value)*(((((2500000000.0)*cj3*pp))+(((-1.0)*x1195*x1196))+(((-1459900000.0)*pz))+(((-1.0)*x1196*x1197))+(((66734125.75)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768074619402)+(((-0.00990712211714883)*x1195))+(((-0.00990712211714883)*x1197))+(((7.07651579796345)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.83060631918538e-9)*(x1198.value)*(x1199.value)*(((((2500000000.0)*cj3*pp))+(((-1.0)*x1195*x1196))+(((-1459900000.0)*pz))+(((-1.0)*x1196*x1197))+(((66734125.75)*cj3))))))+IKsqr(((-1.01768074619402)+(((-0.00990712211714883)*x1195))+(((-0.00990712211714883)*x1197))+(((7.07651579796345)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((2.83060631918538e-9)*(x1198.value)*(x1199.value)*(((((2500000000.0)*cj3*pp))+(((-1.0)*x1195*x1196))+(((-1459900000.0)*pz))+(((-1.0)*x1196*x1197))+(((66734125.75)*cj3))))), ((-1.01768074619402)+(((-0.00990712211714883)*x1195))+(((-0.00990712211714883)*x1197))+(((7.07651579796345)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1200=IKsin(j5);
IkReal x1201=IKcos(j5);
IkReal x1202=(cj3*cj4);
IkReal x1203=(cj2*px);
IkReal x1204=(py*sj2);
IkReal x1205=(cj4*sj3);
IkReal x1206=(px*sj2);
IkReal x1207=((0.24199)*x1200);
IkReal x1208=((1.0)*cj2*py);
IkReal x1209=((0.24199)*x1201);
evalcond[0]=(x1206+((sj4*x1207))+(((-1.0)*x1208)));
evalcond[1]=((0.1438109905)+(((0.0014)*x1203))+(((0.0014)*x1204))+(((-1.0)*pp))+(((0.1413124804)*x1201)));
evalcond[2]=((((-0.29198)*cj3))+(((-1.0)*cj3*x1209))+pz+((x1205*x1207)));
evalcond[3]=((-0.29198)+(((-0.0007)*sj3))+((sj3*x1203))+((sj3*x1204))+(((-1.0)*x1209))+((cj3*pz)));
evalcond[4]=((0.0007)+(((0.29198)*sj3))+((x1202*x1207))+(((-1.0)*x1203))+(((-1.0)*x1204))+((sj3*x1209)));
evalcond[5]=(x1207+((sj4*x1206))+(((-1.0)*sj4*x1208))+(((-1.0)*x1202*x1203))+(((-1.0)*x1202*x1204))+((pz*x1205))+(((0.0007)*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(sj4,-1);
if(!x1210.valid){
continue;
}
if( IKabs(((4.13240216537873e-5)*(x1210.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.13240216537873e-5)*(x1210.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))))+IKsqr(((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((4.13240216537873e-5)*(x1210.value)*(((((100000.0)*cj2*py))+(((-100000.0)*px*sj2))))), ((-1.01768074619402)+(((-0.00990712211714883)*cj2*px))+(((-0.00990712211714883)*py*sj2))+(((7.07651579796345)*pp))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1211=IKsin(j5);
IkReal x1212=IKcos(j5);
IkReal x1213=(cj3*cj4);
IkReal x1214=(cj2*px);
IkReal x1215=(py*sj2);
IkReal x1216=(cj4*sj3);
IkReal x1217=(px*sj2);
IkReal x1218=((0.24199)*x1211);
IkReal x1219=((1.0)*cj2*py);
IkReal x1220=((0.24199)*x1212);
evalcond[0]=(x1217+((sj4*x1218))+(((-1.0)*x1219)));
evalcond[1]=((0.1438109905)+(((0.0014)*x1215))+(((0.0014)*x1214))+(((-1.0)*pp))+(((0.1413124804)*x1212)));
evalcond[2]=((((-0.29198)*cj3))+pz+((x1216*x1218))+(((-1.0)*cj3*x1220)));
evalcond[3]=((-0.29198)+(((-1.0)*x1220))+(((-0.0007)*sj3))+((sj3*x1214))+((sj3*x1215))+((cj3*pz)));
evalcond[4]=((0.0007)+((x1213*x1218))+(((0.29198)*sj3))+((sj3*x1220))+(((-1.0)*x1214))+(((-1.0)*x1215)));
evalcond[5]=(x1218+((sj4*x1217))+(((-1.0)*x1213*x1214))+(((-1.0)*x1213*x1215))+(((0.0007)*x1213))+(((-1.0)*sj4*x1219))+((pz*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x196=((1.0)*sj5);
IkReal x197=(cj2*sj4);
IkReal x198=((1.0)*cj3);
IkReal x199=((1.0)*sj2);
IkReal x200=(cj5*sj3);
IkReal x201=(sj2*sj4);
IkReal x202=(sj3*sj4);
IkReal x203=(cj3*cj5);
IkReal x204=(((cj4*x203))+(((-1.0)*sj3*x196)));
IkReal x205=(((cj2*cj4))+(((-1.0)*x198*x201)));
IkReal x206=(x200+((cj3*cj4*sj5)));
IkReal x207=(x203+(((-1.0)*cj4*sj3*x196)));
IkReal x208=((((-1.0)*cj4*x200))+(((-1.0)*cj3*x196)));
IkReal x209=((((-1.0)*cj4*x199))+(((-1.0)*x197*x198)));
IkReal x210=(((cj2*x204))+(((-1.0)*cj5*sj4*x199)));
IkReal x211=(((cj5*x197))+((sj2*x204)));
IkReal x212=(((cj2*x206))+(((-1.0)*x196*x201)));
IkReal x213=(((sj2*x206))+((sj5*x197)));
new_r00=(((r20*x208))+((r00*x210))+((r10*x211)));
new_r01=(((r11*x211))+((r21*x208))+((r01*x210)));
new_r02=(((r22*x208))+((r12*x211))+((r02*x210)));
new_r10=(((r00*x209))+((r10*x205))+((r20*x202)));
new_r11=(((r11*x205))+((r01*x209))+((r21*x202)));
new_r12=(((r22*x202))+((r12*x205))+((r02*x209)));
new_r20=(((r20*x207))+((r00*x212))+((r10*x213)));
new_r21=(((r11*x213))+((r21*x207))+((r01*x212)));
new_r22=(((r22*x207))+((r12*x213))+((r02*x212)));
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
cj7array[0]=new_r22;
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j6eval[3];
j6eval[0]=sj7;
j6eval[1]=IKsign(sj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=new_r12;
j6eval[1]=sj7;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j8mul = 1;
j8=0;
j6mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].fmul = j6mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].fmul = j8mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j8mul = 1;
j8=0;
j6mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].fmul = j6mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].fmul = j8mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x214=new_r22*new_r22;
IkReal x215=((16.0)*new_r10);
IkReal x216=((16.0)*new_r01);
IkReal x217=((16.0)*new_r22);
IkReal x218=((8.0)*new_r11);
IkReal x219=((8.0)*new_r00);
IkReal x220=(x214*x215);
IkReal x221=(x214*x216);
j6eval[0]=((IKabs((((x214*x218))+(((-1.0)*new_r22*x219)))))+(IKabs(((((-32.0)*new_r00*x214))+(((16.0)*new_r00))+((new_r11*x217)))))+(IKabs((x220+(((-1.0)*x215)))))+(IKabs((x221+(((-1.0)*x216)))))+(IKabs((x215+(((-1.0)*x220)))))+(IKabs(((((-16.0)*new_r11*x214))+(((32.0)*new_r11))+(((-1.0)*new_r00*x217)))))+(IKabs((x216+(((-1.0)*x221)))))+(IKabs((((new_r22*x218))+(((-1.0)*x219))))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6, j8]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j6evalpoly[1];
IkReal x222=new_r22*new_r22;
IkReal x223=((16.0)*new_r10);
IkReal x224=(new_r11*new_r22);
IkReal x225=(x222*x223);
IkReal x226=((((8.0)*x224))+(((-8.0)*new_r00)));
op[0]=x226;
op[1]=(x223+(((-1.0)*x225)));
op[2]=((((16.0)*new_r00))+(((16.0)*x224))+(((-32.0)*new_r00*x222)));
op[3]=(x225+(((-1.0)*x223)));
op[4]=x226;
polyroots4(op,zeror,numroots);
IkReal j6array[4], cj6array[4], sj6array[4], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[4]={true,true,true,true};
_nj6 = 4;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x227=new_r22*new_r22;
IkReal x228=((16.0)*new_r01);
IkReal x229=(new_r00*new_r22);
IkReal x230=((8.0)*x229);
IkReal x231=(new_r11*x227);
IkReal x232=(x227*x228);
IkReal x233=((8.0)*x231);
j6evalpoly[0]=((((htj6*htj6*htj6)*((x232+(((-1.0)*x228))))))+(((htj6*htj6*htj6*htj6)*(((((-1.0)*x230))+x233))))+(((-1.0)*x230))+x233+(((htj6*htj6)*(((((32.0)*new_r11))+(((-16.0)*x229))+(((-16.0)*x231))))))+((htj6*(((((-1.0)*x232))+x228)))));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j8eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x234=cj6*cj6;
IkReal x235=(cj6*new_r22);
IkReal x236=((-1.0)+(((-1.0)*x234*(new_r22*new_r22)))+x234);
j8eval[0]=x236;
j8eval[1]=((IKabs((((new_r01*x235))+((new_r00*sj6)))))+(IKabs(((((-1.0)*new_r00*x235))+((new_r01*sj6))))));
j8eval[2]=IKsign(x236);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=new_r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x237=new_r22*new_r22;
j8eval[0]=(((cj6*x237))+(((-1.0)*cj6)));
j8eval[1]=((((-1.0)*sj6))+((sj6*x237)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x238=IKsin(j8);
IkReal x239=IKcos(j8);
evalcond[0]=x238;
evalcond[1]=((-1.0)*x239);
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x238)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r00, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x240=IKsin(j8);
IkReal x241=IKcos(j8);
evalcond[0]=x240;
evalcond[1]=((-1.0)*x241);
evalcond[2]=((((-1.0)*x240))+new_r00);
evalcond[3]=((((-1.0)*x241))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r10, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x242=IKsin(j8);
IkReal x243=IKcos(j8);
evalcond[0]=x242;
evalcond[1]=((-1.0)*x243);
evalcond[2]=((((-1.0)*x242))+new_r10);
evalcond[3]=((((-1.0)*x243))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x244=IKsin(j8);
IkReal x245=IKcos(j8);
evalcond[0]=x244;
evalcond[1]=((-1.0)*x245);
evalcond[2]=((((-1.0)*x244))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x245))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x246=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x246.valid){
continue;
}
if((x246.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x246.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst24)))))+(IKabs(((-1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj6=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
cj6=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=IKacos(gconst24);
CheckValue<IkReal> x247=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x247.valid){
continue;
}
if((x247.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x247.value)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x248=IKPowWithIntegerCheck(gconst24,-1);
if(!x248.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x248.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x248.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x248.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x249=IKcos(j8);
IkReal x250=IKsin(j8);
IkReal x251=((1.0)*x250);
IkReal x252=((1.0)*x249);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x253=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
IkReal x254=((1.0)*x253);
evalcond[0]=x250;
evalcond[1]=((-1.0)*x249);
evalcond[2]=((((-1.0)*gconst24*x252))+new_r11);
evalcond[3]=((((-1.0)*gconst24*x251))+new_r10);
evalcond[4]=(((x249*x253))+new_r01);
evalcond[5]=(((x250*x253))+new_r00);
evalcond[6]=(((gconst24*new_r10))+(((-1.0)*new_r00*x254))+(((-1.0)*x251)));
evalcond[7]=((((-1.0)*new_r01*x254))+((gconst24*new_r11))+(((-1.0)*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x255=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x255.valid){
continue;
}
CheckValue<IkReal> x256 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x256.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x255.value)))+(x256.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x257=IKcos(j8);
IkReal x258=IKsin(j8);
IkReal x259=((1.0)*x258);
IkReal x260=((1.0)*x257);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x261=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
IkReal x262=((1.0)*x261);
evalcond[0]=x258;
evalcond[1]=((-1.0)*x257);
evalcond[2]=(new_r11+(((-1.0)*gconst24*x260)));
evalcond[3]=((((-1.0)*gconst24*x259))+new_r10);
evalcond[4]=(((x257*x261))+new_r01);
evalcond[5]=(((x258*x261))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x262))+((gconst24*new_r10))+(((-1.0)*x259)));
evalcond[7]=((((-1.0)*new_r01*x262))+((gconst24*new_r11))+(((-1.0)*x260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x263=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x263.valid){
continue;
}
if((x263.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x263.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst24)))))+(IKabs(((1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj6=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))))));
cj6=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=((-1.0)*(IKacos(gconst24)));
CheckValue<IkReal> x264=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x264.valid){
continue;
}
if((x264.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x264.value)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x265=IKPowWithIntegerCheck(gconst24,-1);
if(!x265.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x265.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x265.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x265.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x266=IKcos(j8);
IkReal x267=IKsin(j8);
IkReal x268=((1.0)*x266);
IkReal x269=((1.0)*x267);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x270=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
evalcond[0]=x267;
evalcond[1]=((-1.0)*x266);
evalcond[2]=(new_r11+(((-1.0)*gconst24*x268)));
evalcond[3]=(new_r10+(((-1.0)*gconst24*x269)));
evalcond[4]=((((-1.0)*x268*x270))+new_r01);
evalcond[5]=((((-1.0)*x269*x270))+new_r00);
evalcond[6]=(((new_r00*x270))+((gconst24*new_r10))+(((-1.0)*x269)));
evalcond[7]=(((new_r01*x270))+((gconst24*new_r11))+(((-1.0)*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x271=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x271.valid){
continue;
}
CheckValue<IkReal> x272 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x272.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x271.value)))+(x272.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x273=IKcos(j8);
IkReal x274=IKsin(j8);
IkReal x275=((1.0)*x273);
IkReal x276=((1.0)*x274);
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
IkReal x277=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
evalcond[0]=x274;
evalcond[1]=((-1.0)*x273);
evalcond[2]=(new_r11+(((-1.0)*gconst24*x275)));
evalcond[3]=(new_r10+(((-1.0)*gconst24*x276)));
evalcond[4]=((((-1.0)*x275*x277))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x276*x277)));
evalcond[6]=(((new_r00*x277))+((gconst24*new_r10))+(((-1.0)*x276)));
evalcond[7]=(((new_r01*x277))+((gconst24*new_r11))+(((-1.0)*x275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x278=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x278.valid){
continue;
}
if((x278.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x278.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst25)))))+(IKabs(((-1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj6=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
cj6=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=IKacos(gconst25);
CheckValue<IkReal> x279=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x279.valid){
continue;
}
if((x279.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x279.value);
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x280=IKPowWithIntegerCheck(gconst25,-1);
if(!x280.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x280.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x280.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x280.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x281=IKcos(j8);
IkReal x282=IKsin(j8);
IkReal x283=((1.0)*x282);
IkReal x284=((1.0)*x281);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x285=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
IkReal x286=((1.0)*x285);
evalcond[0]=x282;
evalcond[1]=((-1.0)*x281);
evalcond[2]=((((-1.0)*gconst25*x284))+new_r11);
evalcond[3]=((((-1.0)*gconst25*x283))+new_r10);
evalcond[4]=(new_r01+((x281*x285)));
evalcond[5]=(new_r00+((x282*x285)));
evalcond[6]=(((gconst25*new_r10))+(((-1.0)*new_r00*x286))+(((-1.0)*x283)));
evalcond[7]=(((gconst25*new_r11))+(((-1.0)*new_r01*x286))+(((-1.0)*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x287=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x287.valid){
continue;
}
CheckValue<IkReal> x288 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x288.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x287.value)))+(x288.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x289=IKcos(j8);
IkReal x290=IKsin(j8);
IkReal x291=((1.0)*x290);
IkReal x292=((1.0)*x289);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x293=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
IkReal x294=((1.0)*x293);
evalcond[0]=x290;
evalcond[1]=((-1.0)*x289);
evalcond[2]=((((-1.0)*gconst25*x292))+new_r11);
evalcond[3]=((((-1.0)*gconst25*x291))+new_r10);
evalcond[4]=(((x289*x293))+new_r01);
evalcond[5]=(((x290*x293))+new_r00);
evalcond[6]=(((gconst25*new_r10))+(((-1.0)*x291))+(((-1.0)*new_r00*x294)));
evalcond[7]=((((-1.0)*new_r01*x294))+((gconst25*new_r11))+(((-1.0)*x292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x295=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x295.valid){
continue;
}
if((x295.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x295.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst25)))))+(IKabs(((1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj6=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))));
cj6=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=((-1.0)*(IKacos(gconst25)));
CheckValue<IkReal> x296=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x296.valid){
continue;
}
if((x296.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x296.value);
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x297=IKPowWithIntegerCheck(gconst25,-1);
if(!x297.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x297.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x297.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x297.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x298=IKcos(j8);
IkReal x299=IKsin(j8);
IkReal x300=((1.0)*x299);
IkReal x301=((1.0)*x298);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x302=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
evalcond[0]=x299;
evalcond[1]=((-1.0)*x298);
evalcond[2]=((((-1.0)*gconst25*x301))+new_r11);
evalcond[3]=((((-1.0)*gconst25*x300))+new_r10);
evalcond[4]=((((-1.0)*x301*x302))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x300*x302)));
evalcond[6]=(((new_r00*x302))+((gconst25*new_r10))+(((-1.0)*x300)));
evalcond[7]=(((gconst25*new_r11))+((new_r01*x302))+(((-1.0)*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x303=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x303.valid){
continue;
}
CheckValue<IkReal> x304 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x304.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x303.value)))+(x304.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x305=IKcos(j8);
IkReal x306=IKsin(j8);
IkReal x307=((1.0)*x306);
IkReal x308=((1.0)*x305);
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
IkReal x309=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
evalcond[0]=x306;
evalcond[1]=((-1.0)*x305);
evalcond[2]=((((-1.0)*gconst25*x308))+new_r11);
evalcond[3]=((((-1.0)*gconst25*x307))+new_r10);
evalcond[4]=((((-1.0)*x308*x309))+new_r01);
evalcond[5]=((((-1.0)*x307*x309))+new_r00);
evalcond[6]=(((new_r00*x309))+((gconst25*new_r10))+(((-1.0)*x307)));
evalcond[7]=(((gconst25*new_r11))+((new_r01*x309))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x310=new_r22*new_r22;
CheckValue<IkReal> x311=IKPowWithIntegerCheck((((cj6*x310))+(((-1.0)*cj6))),-1);
if(!x311.valid){
continue;
}
CheckValue<IkReal> x312=IKPowWithIntegerCheck(((((-1.0)*sj6))+((sj6*x310))),-1);
if(!x312.valid){
continue;
}
if( IKabs(((x311.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x312.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x311.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x312.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x311.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x312.value)*((((new_r10*new_r22))+new_r01))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x313=IKsin(j8);
IkReal x314=IKcos(j8);
IkReal x315=(cj6*new_r00);
IkReal x316=(cj6*new_r22);
IkReal x317=(new_r11*sj6);
IkReal x318=(new_r10*sj6);
IkReal x319=((1.0)*sj6);
IkReal x320=((1.0)*x314);
IkReal x321=((1.0)*x313);
IkReal x322=(new_r22*x313);
evalcond[0]=(x322+x317+((cj6*new_r01)));
evalcond[1]=(((new_r01*x316))+x313+((new_r22*x317)));
evalcond[2]=((((-1.0)*new_r00*x319))+(((-1.0)*x321))+((cj6*new_r10)));
evalcond[3]=((((-1.0)*x320))+((cj6*new_r11))+(((-1.0)*new_r01*x319)));
evalcond[4]=(((sj6*x314))+new_r01+((x313*x316)));
evalcond[5]=((((-1.0)*new_r22*x320))+x318+x315);
evalcond[6]=(((sj6*x313))+(((-1.0)*x316*x320))+new_r00);
evalcond[7]=((((-1.0)*cj6*x320))+((sj6*x322))+new_r11);
evalcond[8]=((((-1.0)*x320))+((new_r22*x318))+((new_r22*x315)));
evalcond[9]=((((-1.0)*cj6*x321))+(((-1.0)*new_r22*x314*x319))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x323=((1.0)*sj6);
CheckValue<IkReal> x324=IKPowWithIntegerCheck(new_r22,-1);
if(!x324.valid){
continue;
}
if( IKabs(((x324.value)*(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x323)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x323))+((cj6*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x324.value)*(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x323))))))+IKsqr(((((-1.0)*new_r01*x323))+((cj6*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x324.value)*(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x323))))), ((((-1.0)*new_r01*x323))+((cj6*new_r11))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x325=IKsin(j8);
IkReal x326=IKcos(j8);
IkReal x327=(cj6*new_r00);
IkReal x328=(cj6*new_r22);
IkReal x329=(new_r11*sj6);
IkReal x330=(new_r10*sj6);
IkReal x331=((1.0)*sj6);
IkReal x332=((1.0)*x326);
IkReal x333=((1.0)*x325);
IkReal x334=(new_r22*x325);
evalcond[0]=(x334+x329+((cj6*new_r01)));
evalcond[1]=(((new_r01*x328))+((new_r22*x329))+x325);
evalcond[2]=(((cj6*new_r10))+(((-1.0)*new_r00*x331))+(((-1.0)*x333)));
evalcond[3]=(((cj6*new_r11))+(((-1.0)*x332))+(((-1.0)*new_r01*x331)));
evalcond[4]=(((x325*x328))+((sj6*x326))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x332))+x330+x327);
evalcond[6]=((((-1.0)*x328*x332))+((sj6*x325))+new_r00);
evalcond[7]=((((-1.0)*cj6*x332))+((sj6*x334))+new_r11);
evalcond[8]=(((new_r22*x327))+((new_r22*x330))+(((-1.0)*x332)));
evalcond[9]=((((-1.0)*new_r22*x326*x331))+(((-1.0)*cj6*x333))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x335=cj6*cj6;
IkReal x336=(cj6*new_r22);
CheckValue<IkReal> x337=IKPowWithIntegerCheck(IKsign(((-1.0)+x335+(((-1.0)*x335*(new_r22*new_r22))))),-1);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338 = IKatan2WithCheck(IkReal((((new_r01*x336))+((new_r00*sj6)))),IkReal((((new_r01*sj6))+(((-1.0)*new_r00*x336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x338.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x337.value)))+(x338.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x339=IKsin(j8);
IkReal x340=IKcos(j8);
IkReal x341=(cj6*new_r00);
IkReal x342=(cj6*new_r22);
IkReal x343=(new_r11*sj6);
IkReal x344=(new_r10*sj6);
IkReal x345=((1.0)*sj6);
IkReal x346=((1.0)*x340);
IkReal x347=((1.0)*x339);
IkReal x348=(new_r22*x339);
evalcond[0]=(x343+x348+((cj6*new_r01)));
evalcond[1]=(((new_r22*x343))+((new_r01*x342))+x339);
evalcond[2]=(((cj6*new_r10))+(((-1.0)*new_r00*x345))+(((-1.0)*x347)));
evalcond[3]=(((cj6*new_r11))+(((-1.0)*new_r01*x345))+(((-1.0)*x346)));
evalcond[4]=(((sj6*x340))+new_r01+((x339*x342)));
evalcond[5]=(x341+x344+(((-1.0)*new_r22*x346)));
evalcond[6]=(((sj6*x339))+new_r00+(((-1.0)*x342*x346)));
evalcond[7]=((((-1.0)*cj6*x346))+((sj6*x348))+new_r11);
evalcond[8]=(((new_r22*x344))+((new_r22*x341))+(((-1.0)*x346)));
evalcond[9]=((((-1.0)*cj6*x347))+(((-1.0)*new_r22*x340*x345))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x350=IKPowWithIntegerCheck(sj7,-1);
if(!x350.valid){
continue;
}
IkReal x349=x350.value;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(new_r12,-1);
if(!x351.valid){
continue;
}
if( IKabs((x349*(x351.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x349)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x349*(x351.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x349))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x349*(x351.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x349));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x352=IKcos(j6);
IkReal x353=IKsin(j6);
IkReal x354=((1.0)*sj7);
IkReal x355=((1.0)*cj7);
IkReal x356=(new_r12*x353);
IkReal x357=(new_r02*x352);
evalcond[0]=(new_r02+(((-1.0)*x352*x354)));
evalcond[1]=((((-1.0)*x353*x354))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x353))+((new_r12*x352)));
evalcond[3]=((((-1.0)*x354))+x357+x356);
evalcond[4]=((((-1.0)*new_r22*x354))+((cj7*x356))+((cj7*x357)));
evalcond[5]=((((-1.0)*new_r10*x353*x354))+(((-1.0)*new_r00*x352*x354))+(((-1.0)*new_r20*x355)));
evalcond[6]=((((-1.0)*new_r11*x353*x354))+(((-1.0)*new_r01*x352*x354))+(((-1.0)*new_r21*x355)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x355))+(((-1.0)*x354*x356))+(((-1.0)*x354*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=sj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=cj6;
j8eval[1]=cj7;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x358=IKsin(j8);
IkReal x359=((1.0)*(IKcos(j8)));
evalcond[0]=(x358+new_r11);
evalcond[1]=((((-1.0)*x359))+new_r10);
evalcond[2]=((((-1.0)*x358))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x359))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x360=IKcos(j8);
IkReal x361=((1.0)*(IKsin(j8)));
evalcond[0]=(x360+new_r10);
evalcond[1]=((((-1.0)*x361))+new_r11);
evalcond[2]=((((-1.0)*x361))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x360))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x362=IKcos(j8);
IkReal x363=((1.0)*(IKsin(j8)));
evalcond[0]=(x362+new_r20);
evalcond[1]=((((-1.0)*x363))+new_r21);
evalcond[2]=((((-1.0)*x363))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x362))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x364=IKsin(j8);
IkReal x365=((1.0)*(IKcos(j8)));
evalcond[0]=(x364+new_r21);
evalcond[1]=((((-1.0)*x365))+new_r20);
evalcond[2]=((((-1.0)*x364))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x365))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x366=IKsin(j8);
IkReal x367=IKcos(j8);
IkReal x368=((-1.0)*x367);
evalcond[0]=x366;
evalcond[1]=(new_r22*x366);
evalcond[2]=x368;
evalcond[3]=(new_r22*x368);
evalcond[4]=((((-1.0)*x366))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x367))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(sj7,-1);
if(!x369.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x369.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x369.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x369.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x370=IKsin(j8);
IkReal x371=IKcos(j8);
IkReal x372=((1.0)*sj7);
IkReal x373=((1.0)*x371);
evalcond[0]=(((sj7*x371))+new_r20);
evalcond[1]=(((cj7*x370))+new_r11);
evalcond[2]=((((-1.0)*x370*x372))+new_r21);
evalcond[3]=((((-1.0)*cj7*x373))+new_r10);
evalcond[4]=((((-1.0)*x370))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x373))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x372))+x370+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x372))+(((-1.0)*x373))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x374=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x374.valid){
continue;
}
CheckValue<IkReal> x375 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x374.value)))+(x375.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x376=IKsin(j8);
IkReal x377=IKcos(j8);
IkReal x378=((1.0)*sj7);
IkReal x379=((1.0)*x377);
evalcond[0]=(((sj7*x377))+new_r20);
evalcond[1]=(((cj7*x376))+new_r11);
evalcond[2]=((((-1.0)*x376*x378))+new_r21);
evalcond[3]=((((-1.0)*cj7*x379))+new_r10);
evalcond[4]=((((-1.0)*x376))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x379))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x378))+x376+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x378))+(((-1.0)*x379))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x380=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x380.valid){
continue;
}
CheckValue<IkReal> x381 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x381.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x380.value)))+(x381.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x382=IKsin(j8);
IkReal x383=IKcos(j8);
IkReal x384=((1.0)*sj7);
IkReal x385=((1.0)*x383);
evalcond[0]=(new_r20+((sj7*x383)));
evalcond[1]=(((cj7*x382))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x382*x384)));
evalcond[3]=((((-1.0)*cj7*x385))+new_r10);
evalcond[4]=((((-1.0)*x382))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x385))+(((-1.0)*new_r01)));
evalcond[6]=(x382+(((-1.0)*new_r21*x384))+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x384))+(((-1.0)*x385))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r00, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x386=IKcos(j8);
IkReal x387=IKsin(j8);
IkReal x388=((1.0)*cj7);
IkReal x389=((1.0)*sj7);
IkReal x390=((1.0)*x386);
evalcond[0]=(new_r20+((sj7*x386)));
evalcond[1]=((((-1.0)*x387))+new_r00);
evalcond[2]=((((-1.0)*x390))+new_r01);
evalcond[3]=((((-1.0)*x387*x389))+new_r21);
evalcond[4]=(((cj7*x387))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x386*x388))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x388))+x387+(((-1.0)*new_r21*x389)));
evalcond[7]=((((-1.0)*new_r10*x388))+(((-1.0)*x390))+(((-1.0)*new_r20*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x391=IKcos(j8);
IkReal x392=IKsin(j8);
IkReal x393=((1.0)*sj6);
IkReal x394=((1.0)*x392);
IkReal x395=((1.0)*x391);
evalcond[0]=(x391+new_r20);
evalcond[1]=((((-1.0)*x394))+new_r21);
evalcond[2]=(((sj6*x391))+new_r01);
evalcond[3]=(((sj6*x392))+new_r00);
evalcond[4]=((((-1.0)*cj6*x395))+new_r11);
evalcond[5]=((((-1.0)*cj6*x394))+new_r10);
evalcond[6]=((((-1.0)*x394))+((cj6*new_r10))+(((-1.0)*new_r00*x393)));
evalcond[7]=((((-1.0)*new_r01*x393))+(((-1.0)*x395))+((cj6*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x396=IKcos(j8);
IkReal x397=IKsin(j8);
IkReal x398=((1.0)*sj6);
IkReal x399=((1.0)*x396);
IkReal x400=((1.0)*x397);
evalcond[0]=(x397+new_r21);
evalcond[1]=((((-1.0)*x399))+new_r20);
evalcond[2]=(((sj6*x396))+new_r01);
evalcond[3]=(((sj6*x397))+new_r00);
evalcond[4]=((((-1.0)*cj6*x399))+new_r11);
evalcond[5]=((((-1.0)*cj6*x400))+new_r10);
evalcond[6]=(((cj6*new_r10))+(((-1.0)*new_r00*x398))+(((-1.0)*x400)));
evalcond[7]=((((-1.0)*new_r01*x398))+(((-1.0)*x399))+((cj6*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x401=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*new_r00))+(((-1.0)*new_r01*x401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x401))))+IKsqr((((cj6*new_r00))+(((-1.0)*new_r01*x401))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x401))), (((cj6*new_r00))+(((-1.0)*new_r01*x401))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x402=IKsin(j8);
IkReal x403=IKcos(j8);
IkReal x404=((1.0)*sj6);
IkReal x405=((1.0)*x403);
IkReal x406=(sj6*x402);
IkReal x407=((1.0)*x402);
IkReal x408=(cj6*x405);
evalcond[0]=(((new_r11*sj6))+x402+((cj6*new_r01)));
evalcond[1]=(((sj6*x403))+new_r01+((cj6*x402)));
evalcond[2]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x405)));
evalcond[3]=(((cj6*new_r10))+(((-1.0)*new_r00*x404))+(((-1.0)*x407)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*new_r01*x404))+(((-1.0)*x405)));
evalcond[5]=(x406+new_r00+(((-1.0)*x408)));
evalcond[6]=(x406+new_r11+(((-1.0)*x408)));
evalcond[7]=((((-1.0)*cj6*x407))+(((-1.0)*x403*x404))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x409=((1.0)*new_r00);
if( IKabs((((cj6*new_r01))+(((-1.0)*sj6*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*new_r01))+(((-1.0)*sj6*x409))))+IKsqr(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x409))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((cj6*new_r01))+(((-1.0)*sj6*x409))), ((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x409))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x410=IKcos(j8);
IkReal x411=IKsin(j8);
IkReal x412=((1.0)*sj6);
IkReal x413=((1.0)*cj6);
IkReal x414=((1.0)*x411);
IkReal x415=(sj6*x410);
IkReal x416=(x411*x413);
evalcond[0]=(((new_r10*sj6))+x410+((cj6*new_r00)));
evalcond[1]=(((new_r11*sj6))+((cj6*new_r01))+(((-1.0)*x414)));
evalcond[2]=(((cj6*x410))+((sj6*x411))+new_r00);
evalcond[3]=(((cj6*new_r10))+(((-1.0)*new_r00*x412))+(((-1.0)*x414)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*new_r01*x412))+(((-1.0)*x410)));
evalcond[5]=(x415+new_r01+(((-1.0)*x416)));
evalcond[6]=(x415+new_r10+(((-1.0)*x416)));
evalcond[7]=((((-1.0)*x411*x412))+(((-1.0)*x410*x413))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r10, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x417=IKcos(j8);
IkReal x418=IKsin(j8);
IkReal x419=((1.0)*sj7);
IkReal x420=((1.0)*x417);
IkReal x421=((1.0)*x418);
evalcond[0]=(new_r20+((new_r02*x417)));
evalcond[1]=((((-1.0)*x421))+new_r10);
evalcond[2]=((((-1.0)*x420))+new_r11);
evalcond[3]=(((cj7*x418))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x421))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*cj7*x420)));
evalcond[6]=(x418+(((-1.0)*new_r21*x419))+((cj7*new_r01)));
evalcond[7]=((((-1.0)*x420))+(((-1.0)*new_r20*x419))+((cj7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=IKsign(new_r02);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x422=IKcos(j8);
IkReal x423=((1.0)*(IKsin(j8)));
evalcond[0]=(x422+new_r20);
evalcond[1]=((((-1.0)*x423))+new_r21);
evalcond[2]=((((-1.0)*x423))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x422))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x424=IKsin(j8);
IkReal x425=((1.0)*(IKcos(j8)));
evalcond[0]=(x424+new_r21);
evalcond[1]=((((-1.0)*x425))+new_r20);
evalcond[2]=((((-1.0)*x424))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x425))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs((cj7*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*new_r01))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((cj7*new_r01), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x426=IKsin(j8);
IkReal x427=IKcos(j8);
IkReal x428=((1.0)*new_r01);
IkReal x429=((1.0)*new_r00);
IkReal x430=((1.0)*x427);
evalcond[0]=(x426+(((-1.0)*cj7*x428)));
evalcond[1]=((((-1.0)*x426))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x430))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x428))+((cj7*x426)));
evalcond[4]=((((-1.0)*x429))+(((-1.0)*cj7*x430)));
evalcond[5]=((((-1.0)*x430))+(((-1.0)*cj7*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x431=IKsin(j8);
IkReal x432=IKcos(j8);
IkReal x433=((-1.0)*x432);
evalcond[0]=x431;
evalcond[1]=(new_r22*x431);
evalcond[2]=x433;
evalcond[3]=(new_r22*x433);
evalcond[4]=((((-1.0)*x431))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x432))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x434=IKPowWithIntegerCheck(new_r02,-1);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435=IKPowWithIntegerCheck(cj7,-1);
if(!x435.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x434.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x434.value)))+IKsqr(((-1.0)*new_r00*(x435.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21*(x434.value)), ((-1.0)*new_r00*(x435.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x436=IKsin(j8);
IkReal x437=IKcos(j8);
IkReal x438=((1.0)*new_r01);
IkReal x439=((1.0)*sj7);
IkReal x440=((1.0)*new_r00);
IkReal x441=((1.0)*x437);
evalcond[0]=(new_r21+((new_r02*x436)));
evalcond[1]=((((-1.0)*new_r02*x441))+new_r20);
evalcond[2]=((((-1.0)*x436))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x441))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x438))+((cj7*x436)));
evalcond[5]=((((-1.0)*x440))+(((-1.0)*cj7*x441)));
evalcond[6]=(x436+(((-1.0)*cj7*x438))+(((-1.0)*new_r21*x439)));
evalcond[7]=((((-1.0)*x441))+(((-1.0)*cj7*x440))+(((-1.0)*new_r20*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x442=IKPowWithIntegerCheck(new_r02,-1);
if(!x442.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x442.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x442.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x442.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x443=IKsin(j8);
IkReal x444=IKcos(j8);
IkReal x445=((1.0)*new_r01);
IkReal x446=((1.0)*sj7);
IkReal x447=((1.0)*new_r00);
IkReal x448=((1.0)*x444);
evalcond[0]=(((new_r02*x443))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x448))+new_r20);
evalcond[2]=((((-1.0)*x443))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x448))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x445))+((cj7*x443)));
evalcond[5]=((((-1.0)*x447))+(((-1.0)*cj7*x448)));
evalcond[6]=(x443+(((-1.0)*cj7*x445))+(((-1.0)*new_r21*x446)));
evalcond[7]=((((-1.0)*x448))+(((-1.0)*cj7*x447))+(((-1.0)*new_r20*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x449 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x449.valid){
continue;
}
CheckValue<IkReal> x450=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x450.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x449.value)+(((1.5707963267949)*(x450.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x451=IKsin(j8);
IkReal x452=IKcos(j8);
IkReal x453=((1.0)*new_r01);
IkReal x454=((1.0)*sj7);
IkReal x455=((1.0)*new_r00);
IkReal x456=((1.0)*x452);
evalcond[0]=(((new_r02*x451))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x456))+new_r20);
evalcond[2]=((((-1.0)*x451))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x456))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x453))+((cj7*x451)));
evalcond[5]=((((-1.0)*cj7*x456))+(((-1.0)*x455)));
evalcond[6]=((((-1.0)*new_r21*x454))+(((-1.0)*cj7*x453))+x451);
evalcond[7]=((((-1.0)*new_r20*x454))+(((-1.0)*cj7*x455))+(((-1.0)*x456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x458=IKPowWithIntegerCheck(sj7,-1);
if(!x458.valid){
continue;
}
IkReal x457=x458.value;
CheckValue<IkReal> x459=IKPowWithIntegerCheck(cj6,-1);
if(!x459.valid){
continue;
}
CheckValue<IkReal> x460=IKPowWithIntegerCheck(cj7,-1);
if(!x460.valid){
continue;
}
if( IKabs((x457*(x459.value)*(x460.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x457)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x457*(x459.value)*(x460.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))))+IKsqr(((-1.0)*new_r20*x457))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x457*(x459.value)*(x460.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))), ((-1.0)*new_r20*x457));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x461=IKsin(j8);
IkReal x462=IKcos(j8);
IkReal x463=(cj6*new_r00);
IkReal x464=((1.0)*sj7);
IkReal x465=(cj6*new_r01);
IkReal x466=(cj7*sj6);
IkReal x467=((1.0)*sj6);
IkReal x468=((1.0)*x462);
IkReal x469=(cj7*x461);
IkReal x470=((1.0)*x461);
IkReal x471=(sj6*x462);
evalcond[0]=(((sj7*x462))+new_r20);
evalcond[1]=((((-1.0)*x461*x464))+new_r21);
evalcond[2]=(((new_r11*sj6))+x469+x465);
evalcond[3]=((((-1.0)*x470))+((cj6*new_r10))+(((-1.0)*new_r00*x467)));
evalcond[4]=((((-1.0)*new_r01*x467))+(((-1.0)*x468))+((cj6*new_r11)));
evalcond[5]=(((cj6*x469))+x471+new_r01);
evalcond[6]=((((-1.0)*cj7*x468))+((new_r10*sj6))+x463);
evalcond[7]=(((sj6*x461))+new_r00+(((-1.0)*cj6*cj7*x468)));
evalcond[8]=(((x461*x466))+new_r11+(((-1.0)*cj6*x468)));
evalcond[9]=((((-1.0)*x466*x468))+new_r10+(((-1.0)*cj6*x470)));
evalcond[10]=((((-1.0)*new_r21*x464))+((new_r11*x466))+x461+((cj7*x465)));
evalcond[11]=(((new_r10*x466))+(((-1.0)*new_r20*x464))+(((-1.0)*x468))+((cj7*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x473=IKPowWithIntegerCheck(sj7,-1);
if(!x473.valid){
continue;
}
IkReal x472=x473.value;
CheckValue<IkReal> x474=IKPowWithIntegerCheck(sj6,-1);
if(!x474.valid){
continue;
}
if( IKabs((x472*(x474.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x472)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x472*(x474.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))))+IKsqr(((-1.0)*new_r20*x472))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x472*(x474.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))), ((-1.0)*new_r20*x472));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x475=IKsin(j8);
IkReal x476=IKcos(j8);
IkReal x477=(cj6*new_r00);
IkReal x478=((1.0)*sj7);
IkReal x479=(cj6*new_r01);
IkReal x480=(cj7*sj6);
IkReal x481=((1.0)*sj6);
IkReal x482=((1.0)*x476);
IkReal x483=(cj7*x475);
IkReal x484=((1.0)*x475);
IkReal x485=(sj6*x476);
evalcond[0]=(new_r20+((sj7*x476)));
evalcond[1]=((((-1.0)*x475*x478))+new_r21);
evalcond[2]=(((new_r11*sj6))+x483+x479);
evalcond[3]=((((-1.0)*x484))+(((-1.0)*new_r00*x481))+((cj6*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x481))+(((-1.0)*x482))+((cj6*new_r11)));
evalcond[5]=(x485+new_r01+((cj6*x483)));
evalcond[6]=(((new_r10*sj6))+x477+(((-1.0)*cj7*x482)));
evalcond[7]=(((sj6*x475))+(((-1.0)*cj6*cj7*x482))+new_r00);
evalcond[8]=(((x475*x480))+(((-1.0)*cj6*x482))+new_r11);
evalcond[9]=((((-1.0)*cj6*x484))+(((-1.0)*x480*x482))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x478))+((new_r11*x480))+x475+((cj7*x479)));
evalcond[11]=((((-1.0)*x482))+((new_r10*x480))+((cj7*x477))+(((-1.0)*new_r20*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x486=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x486.valid){
continue;
}
CheckValue<IkReal> x487 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x487.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x486.value)))+(x487.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x488=IKsin(j8);
IkReal x489=IKcos(j8);
IkReal x490=(cj6*new_r00);
IkReal x491=((1.0)*sj7);
IkReal x492=(cj6*new_r01);
IkReal x493=(cj7*sj6);
IkReal x494=((1.0)*sj6);
IkReal x495=((1.0)*x489);
IkReal x496=(cj7*x488);
IkReal x497=((1.0)*x488);
IkReal x498=(sj6*x489);
evalcond[0]=(((sj7*x489))+new_r20);
evalcond[1]=((((-1.0)*x488*x491))+new_r21);
evalcond[2]=(((new_r11*sj6))+x492+x496);
evalcond[3]=((((-1.0)*new_r00*x494))+(((-1.0)*x497))+((cj6*new_r10)));
evalcond[4]=((((-1.0)*x495))+(((-1.0)*new_r01*x494))+((cj6*new_r11)));
evalcond[5]=(((cj6*x496))+x498+new_r01);
evalcond[6]=(((new_r10*sj6))+x490+(((-1.0)*cj7*x495)));
evalcond[7]=(((sj6*x488))+new_r00+(((-1.0)*cj6*cj7*x495)));
evalcond[8]=(((x488*x493))+(((-1.0)*cj6*x495))+new_r11);
evalcond[9]=((((-1.0)*x493*x495))+(((-1.0)*cj6*x497))+new_r10);
evalcond[10]=(((cj7*x492))+(((-1.0)*new_r21*x491))+((new_r11*x493))+x488);
evalcond[11]=((((-1.0)*new_r20*x491))+(((-1.0)*x495))+((cj7*x490))+((new_r10*x493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x499=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x499.valid){
continue;
}
CheckValue<IkReal> x500 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x499.value)))+(x500.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj7*(IKcos(j8)))));
evalcond[1]=((((-1.0)*sj7*(IKsin(j8))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj7;
j6eval[1]=IKsign(sj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=cj8;
j6eval[1]=sj7;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x501=IKsin(j6);
IkReal x502=IKcos(j6);
IkReal x503=((1.0)*sj7);
IkReal x504=(new_r22*x502);
IkReal x505=(new_r22*x501);
IkReal x506=((1.0)*x501);
IkReal x507=(new_r00*x502);
IkReal x508=(new_r02*x502);
IkReal x509=(new_r01*x502);
evalcond[0]=(x501+new_r00);
evalcond[1]=(x504+new_r01);
evalcond[2]=(x505+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x502)));
evalcond[4]=((((-1.0)*x502*x503))+new_r02);
evalcond[5]=((((-1.0)*x501*x503))+new_r12);
evalcond[6]=(((new_r10*x501))+x507);
evalcond[7]=((((-1.0)*new_r02*x506))+((new_r12*x502)));
evalcond[8]=((((-1.0)*new_r01*x506))+((new_r11*x502)));
evalcond[9]=(((new_r11*x501))+x509+new_r22);
evalcond[10]=((-1.0)+(((-1.0)*new_r00*x506))+((new_r10*x502)));
evalcond[11]=(((new_r10*x505))+((new_r00*x504)));
evalcond[12]=((((-1.0)*x503))+x508+((new_r12*x501)));
evalcond[13]=((((-1.0)*x503*x507))+(((-1.0)*new_r10*x501*x503)));
evalcond[14]=(((new_r02*x504))+((new_r12*x505))+(((-1.0)*new_r22*x503)));
evalcond[15]=((((-1.0)*x503*x509))+(((-1.0)*new_r11*x501*x503))+(((-1.0)*cj7*new_r21)));
evalcond[16]=((1.0)+((new_r11*x505))+(((-1.0)*sj7*x503))+((new_r01*x504)));
evalcond[17]=((1.0)+(((-1.0)*x503*x508))+(((-1.0)*new_r12*x501*x503))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x510=IKcos(j6);
IkReal x511=IKsin(j6);
IkReal x512=(new_r22*sj7);
IkReal x513=((1.0)*sj7);
IkReal x514=((1.0)*new_r22);
IkReal x515=(new_r01*x510);
IkReal x516=(new_r22*x511);
IkReal x517=((1.0)*x511);
IkReal x518=(new_r00*x510);
IkReal x519=(new_r02*x510);
evalcond[0]=(x510+new_r10);
evalcond[1]=(new_r00+(((-1.0)*x517)));
evalcond[2]=(new_r02+(((-1.0)*x510*x513)));
evalcond[3]=((((-1.0)*x511*x513))+new_r12);
evalcond[4]=(new_r01+(((-1.0)*x510*x514)));
evalcond[5]=((((-1.0)*x511*x514))+new_r11);
evalcond[6]=(((new_r10*x511))+x518);
evalcond[7]=(((new_r12*x510))+(((-1.0)*new_r02*x517)));
evalcond[8]=(((new_r11*x510))+(((-1.0)*new_r01*x517)));
evalcond[9]=((1.0)+((new_r10*x510))+(((-1.0)*new_r00*x517)));
evalcond[10]=(((new_r10*x516))+((new_r22*x518)));
evalcond[11]=(((new_r12*x511))+x519+(((-1.0)*x513)));
evalcond[12]=(((new_r11*x511))+x515+(((-1.0)*x514)));
evalcond[13]=((((-1.0)*new_r10*x511*x513))+(((-1.0)*x513*x518)));
evalcond[14]=(((new_r12*x516))+(((-1.0)*x512))+((new_r22*x519)));
evalcond[15]=((-1.0)+((new_r11*x516))+(sj7*sj7)+((new_r22*x515)));
evalcond[16]=((((-1.0)*x513*x515))+x512+(((-1.0)*new_r11*x511*x513)));
evalcond[17]=((1.0)+(((-1.0)*x513*x519))+(((-1.0)*new_r22*x514))+(((-1.0)*new_r12*x511*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x520=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x520))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj8*new_r00))+(((-1.0)*sj8*x520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x520))+(((-1.0)*new_r00*sj8))))+IKsqr((((cj8*new_r00))+(((-1.0)*sj8*x520))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj8*x520))+(((-1.0)*new_r00*sj8))), (((cj8*new_r00))+(((-1.0)*sj8*x520))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x521=IKsin(j6);
IkReal x522=IKcos(j6);
IkReal x523=((1.0)*cj8);
IkReal x524=((1.0)*sj8);
IkReal x525=(sj8*x521);
IkReal x526=((1.0)*x521);
IkReal x527=(x522*x523);
evalcond[0]=(((new_r01*x522))+sj8+((new_r11*x521)));
evalcond[1]=(((sj8*x522))+((cj8*x521))+new_r01);
evalcond[2]=((((-1.0)*x527))+x525+new_r00);
evalcond[3]=((((-1.0)*x527))+x525+new_r11);
evalcond[4]=((((-1.0)*x523))+((new_r10*x521))+((new_r00*x522)));
evalcond[5]=((((-1.0)*x521*x523))+(((-1.0)*x522*x524))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x526))+(((-1.0)*x524))+((new_r10*x522)));
evalcond[7]=(((new_r11*x522))+(((-1.0)*x523))+(((-1.0)*new_r01*x526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x528=((1.0)*cj8);
if( IKabs(((((-1.0)*new_r01*x528))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj8))+(((-1.0)*new_r00*x528)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x528))+(((-1.0)*new_r00*sj8))))+IKsqr((((new_r01*sj8))+(((-1.0)*new_r00*x528))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r01*x528))+(((-1.0)*new_r00*sj8))), (((new_r01*sj8))+(((-1.0)*new_r00*x528))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x529=IKcos(j6);
IkReal x530=IKsin(j6);
IkReal x531=((1.0)*sj8);
IkReal x532=(cj8*x530);
IkReal x533=(cj8*x529);
IkReal x534=((1.0)*x530);
IkReal x535=(x529*x531);
evalcond[0]=(cj8+((new_r10*x530))+((new_r00*x529)));
evalcond[1]=(((sj8*x530))+x533+new_r00);
evalcond[2]=((((-1.0)*x535))+x532+new_r01);
evalcond[3]=((((-1.0)*x535))+x532+new_r10);
evalcond[4]=(((new_r01*x529))+((new_r11*x530))+(((-1.0)*x531)));
evalcond[5]=((((-1.0)*x533))+(((-1.0)*x530*x531))+new_r11);
evalcond[6]=((((-1.0)*new_r00*x534))+(((-1.0)*x531))+((new_r10*x529)));
evalcond[7]=(((new_r11*x529))+(((-1.0)*new_r01*x534))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x537 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x537.valid){
continue;
}
IkReal x536=x537.value;
j6array[0]=((-1.0)*x536);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x536)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x538=IKsin(j6);
IkReal x539=IKcos(j6);
IkReal x540=(new_r10*x538);
IkReal x541=((1.0)*x538);
IkReal x542=(new_r00*x539);
evalcond[0]=(((new_r01*x539))+((new_r11*x538)));
evalcond[1]=(x540+x542);
evalcond[2]=((((-1.0)*new_r00*x541))+((new_r10*x539)));
evalcond[3]=(((new_r11*x539))+(((-1.0)*new_r01*x541)));
evalcond[4]=(((new_r22*x542))+((new_r22*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
IkReal x543=x544.value;
j6array[0]=((-1.0)*x543);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x543)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x545=IKcos(j6);
IkReal x546=IKsin(j6);
IkReal x547=(new_r01*x545);
IkReal x548=((1.0)*x546);
IkReal x549=(new_r22*x546);
evalcond[0]=(((new_r11*x546))+x547);
evalcond[1]=((((-1.0)*new_r00*x548))+((new_r10*x545)));
evalcond[2]=(((new_r11*x545))+(((-1.0)*new_r01*x548)));
evalcond[3]=(((new_r11*x549))+((new_r22*x547)));
evalcond[4]=(((new_r00*new_r22*x545))+((new_r10*x549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x551.valid){
continue;
}
IkReal x550=x551.value;
j6array[0]=((-1.0)*x550);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x550)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x552=IKcos(j6);
IkReal x553=IKsin(j6);
IkReal x554=(new_r22*x552);
IkReal x555=(new_r22*x553);
IkReal x556=((1.0)*x553);
evalcond[0]=(((new_r10*x553))+((new_r00*x552)));
evalcond[1]=(((new_r10*x552))+(((-1.0)*new_r00*x556)));
evalcond[2]=(((new_r11*x552))+(((-1.0)*new_r01*x556)));
evalcond[3]=(((new_r11*x555))+((new_r01*x554)));
evalcond[4]=(((new_r10*x555))+((new_r00*x554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x558=IKPowWithIntegerCheck(sj7,-1);
if(!x558.valid){
continue;
}
IkReal x557=x558.value;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(cj8,-1);
if(!x559.valid){
continue;
}
if( IKabs((x557*(x559.value)*(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*new_r02*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x557)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x557*(x559.value)*(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*new_r02*sj8))))))+IKsqr((new_r02*x557))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x557*(x559.value)*(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*new_r02*sj8))))), (new_r02*x557));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x560=IKcos(j6);
IkReal x561=IKsin(j6);
IkReal x562=((1.0)*cj8);
IkReal x563=((1.0)*sj7);
IkReal x564=((1.0)*cj7);
IkReal x565=(cj7*sj8);
IkReal x566=((1.0)*sj8);
IkReal x567=(cj7*x561);
IkReal x568=((1.0)*x561);
IkReal x569=(new_r00*x560);
IkReal x570=(new_r02*x560);
IkReal x571=(new_r01*x560);
IkReal x572=(cj8*x560);
evalcond[0]=((((-1.0)*x560*x563))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x561*x563)));
evalcond[2]=((((-1.0)*new_r02*x568))+((new_r12*x560)));
evalcond[3]=(((cj8*x561))+((x560*x565))+new_r01);
evalcond[4]=(x570+((new_r12*x561))+(((-1.0)*x563)));
evalcond[5]=(x571+x565+((new_r11*x561)));
evalcond[6]=((((-1.0)*cj7*x560*x562))+((sj8*x561))+new_r00);
evalcond[7]=(((x561*x565))+(((-1.0)*x560*x562))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x568))+((new_r10*x560))+(((-1.0)*x566)));
evalcond[9]=(((new_r11*x560))+(((-1.0)*x562))+(((-1.0)*new_r01*x568)));
evalcond[10]=((((-1.0)*cj7*x562))+x569+((new_r10*x561)));
evalcond[11]=((((-1.0)*x562*x567))+(((-1.0)*x560*x566))+new_r10);
evalcond[12]=(((cj7*x570))+(((-1.0)*new_r22*x563))+((new_r12*x567)));
evalcond[13]=(sj8+((cj7*x571))+((new_r11*x567))+(((-1.0)*new_r21*x563)));
evalcond[14]=((((-1.0)*new_r20*x564))+(((-1.0)*new_r10*x561*x563))+(((-1.0)*x563*x569)));
evalcond[15]=((((-1.0)*x563*x571))+(((-1.0)*new_r21*x564))+(((-1.0)*new_r11*x561*x563)));
evalcond[16]=((1.0)+(((-1.0)*new_r12*x561*x563))+(((-1.0)*x563*x570))+(((-1.0)*new_r22*x564)));
evalcond[17]=((((-1.0)*new_r20*x563))+((cj7*x569))+((new_r10*x567))+(((-1.0)*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x573=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x573.value)))+(x574.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x575=IKcos(j6);
IkReal x576=IKsin(j6);
IkReal x577=((1.0)*cj8);
IkReal x578=((1.0)*sj7);
IkReal x579=((1.0)*cj7);
IkReal x580=(cj7*sj8);
IkReal x581=((1.0)*sj8);
IkReal x582=(cj7*x576);
IkReal x583=((1.0)*x576);
IkReal x584=(new_r00*x575);
IkReal x585=(new_r02*x575);
IkReal x586=(new_r01*x575);
IkReal x587=(cj8*x575);
evalcond[0]=((((-1.0)*x575*x578))+new_r02);
evalcond[1]=((((-1.0)*x576*x578))+new_r12);
evalcond[2]=(((new_r12*x575))+(((-1.0)*new_r02*x583)));
evalcond[3]=(((x575*x580))+((cj8*x576))+new_r01);
evalcond[4]=(((new_r12*x576))+(((-1.0)*x578))+x585);
evalcond[5]=(((new_r11*x576))+x580+x586);
evalcond[6]=((((-1.0)*cj7*x575*x577))+new_r00+((sj8*x576)));
evalcond[7]=((((-1.0)*x575*x577))+new_r11+((x576*x580)));
evalcond[8]=(((new_r10*x575))+(((-1.0)*x581))+(((-1.0)*new_r00*x583)));
evalcond[9]=((((-1.0)*new_r01*x583))+((new_r11*x575))+(((-1.0)*x577)));
evalcond[10]=(((new_r10*x576))+x584+(((-1.0)*cj7*x577)));
evalcond[11]=((((-1.0)*x577*x582))+(((-1.0)*x575*x581))+new_r10);
evalcond[12]=(((cj7*x585))+(((-1.0)*new_r22*x578))+((new_r12*x582)));
evalcond[13]=(sj8+((cj7*x586))+(((-1.0)*new_r21*x578))+((new_r11*x582)));
evalcond[14]=((((-1.0)*x578*x584))+(((-1.0)*new_r10*x576*x578))+(((-1.0)*new_r20*x579)));
evalcond[15]=((((-1.0)*new_r11*x576*x578))+(((-1.0)*x578*x586))+(((-1.0)*new_r21*x579)));
evalcond[16]=((1.0)+(((-1.0)*x578*x585))+(((-1.0)*new_r22*x579))+(((-1.0)*new_r12*x576*x578)));
evalcond[17]=(((cj7*x584))+(((-1.0)*x577))+(((-1.0)*new_r20*x578))+((new_r10*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x588=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x589.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x588.value)))+(x589.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x590=IKcos(j6);
IkReal x591=IKsin(j6);
IkReal x592=((1.0)*sj7);
IkReal x593=((1.0)*cj7);
IkReal x594=(new_r12*x591);
IkReal x595=(new_r02*x590);
evalcond[0]=((((-1.0)*x590*x592))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x591*x592)));
evalcond[2]=((((-1.0)*new_r02*x591))+((new_r12*x590)));
evalcond[3]=((((-1.0)*x592))+x595+x594);
evalcond[4]=((((-1.0)*new_r22*x592))+((cj7*x594))+((cj7*x595)));
evalcond[5]=((((-1.0)*new_r00*x590*x592))+(((-1.0)*new_r20*x593))+(((-1.0)*new_r10*x591*x592)));
evalcond[6]=((((-1.0)*new_r21*x593))+(((-1.0)*new_r11*x591*x592))+(((-1.0)*new_r01*x590*x592)));
evalcond[7]=((1.0)+(((-1.0)*x592*x595))+(((-1.0)*x592*x594))+(((-1.0)*new_r22*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=sj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=cj6;
j8eval[1]=cj7;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x596=IKsin(j8);
IkReal x597=((1.0)*(IKcos(j8)));
evalcond[0]=(x596+new_r11);
evalcond[1]=((((-1.0)*x597))+new_r10);
evalcond[2]=((((-1.0)*x596))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x597))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x598=IKcos(j8);
IkReal x599=((1.0)*(IKsin(j8)));
evalcond[0]=(x598+new_r10);
evalcond[1]=((((-1.0)*x599))+new_r11);
evalcond[2]=((((-1.0)*x599))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x598))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x600=IKcos(j8);
IkReal x601=((1.0)*(IKsin(j8)));
evalcond[0]=(x600+new_r20);
evalcond[1]=((((-1.0)*x601))+new_r21);
evalcond[2]=((((-1.0)*x601))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x600))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x602=IKsin(j8);
IkReal x603=((1.0)*(IKcos(j8)));
evalcond[0]=(x602+new_r21);
evalcond[1]=((((-1.0)*x603))+new_r20);
evalcond[2]=((((-1.0)*x602))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x603))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x604=IKsin(j8);
IkReal x605=IKcos(j8);
IkReal x606=((-1.0)*x605);
evalcond[0]=x604;
evalcond[1]=(new_r22*x604);
evalcond[2]=x606;
evalcond[3]=(new_r22*x606);
evalcond[4]=((((-1.0)*x604))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x605))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x607=IKPowWithIntegerCheck(sj7,-1);
if(!x607.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x607.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x607.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x607.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x608=IKsin(j8);
IkReal x609=IKcos(j8);
IkReal x610=((1.0)*sj7);
IkReal x611=((1.0)*x609);
evalcond[0]=(((sj7*x609))+new_r20);
evalcond[1]=(((cj7*x608))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x608*x610)));
evalcond[3]=(new_r10+(((-1.0)*cj7*x611)));
evalcond[4]=((((-1.0)*x608))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x611))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x610))+x608+((cj7*new_r11)));
evalcond[7]=((((-1.0)*x611))+(((-1.0)*new_r20*x610))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x612=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x612.value)))+(x613.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x614=IKsin(j8);
IkReal x615=IKcos(j8);
IkReal x616=((1.0)*sj7);
IkReal x617=((1.0)*x615);
evalcond[0]=(new_r20+((sj7*x615)));
evalcond[1]=(new_r11+((cj7*x614)));
evalcond[2]=((((-1.0)*x614*x616))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj7*x617)));
evalcond[4]=((((-1.0)*x614))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x617))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x616))+x614+((cj7*new_r11)));
evalcond[7]=((((-1.0)*x617))+(((-1.0)*new_r20*x616))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x618=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x618.value)))+(x619.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x620=IKsin(j8);
IkReal x621=IKcos(j8);
IkReal x622=((1.0)*sj7);
IkReal x623=((1.0)*x621);
evalcond[0]=(((sj7*x621))+new_r20);
evalcond[1]=(((cj7*x620))+new_r11);
evalcond[2]=((((-1.0)*x620*x622))+new_r21);
evalcond[3]=((((-1.0)*cj7*x623))+new_r10);
evalcond[4]=((((-1.0)*x620))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x623))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x622))+x620+((cj7*new_r11)));
evalcond[7]=((((-1.0)*x623))+(((-1.0)*new_r20*x622))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r00, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x624=IKcos(j8);
IkReal x625=IKsin(j8);
IkReal x626=((1.0)*cj7);
IkReal x627=((1.0)*sj7);
IkReal x628=((1.0)*x624);
evalcond[0]=(((sj7*x624))+new_r20);
evalcond[1]=((((-1.0)*x625))+new_r00);
evalcond[2]=((((-1.0)*x628))+new_r01);
evalcond[3]=((((-1.0)*x625*x627))+new_r21);
evalcond[4]=((((-1.0)*new_r11))+((cj7*x625)));
evalcond[5]=((((-1.0)*x624*x626))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r21*x627))+x625+(((-1.0)*new_r11*x626)));
evalcond[7]=((((-1.0)*x628))+(((-1.0)*new_r20*x627))+(((-1.0)*new_r10*x626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x629=IKcos(j8);
IkReal x630=IKsin(j8);
IkReal x631=((1.0)*sj6);
IkReal x632=((1.0)*x630);
IkReal x633=((1.0)*x629);
evalcond[0]=(x629+new_r20);
evalcond[1]=((((-1.0)*x632))+new_r21);
evalcond[2]=(((sj6*x629))+new_r01);
evalcond[3]=(((sj6*x630))+new_r00);
evalcond[4]=((((-1.0)*cj6*x633))+new_r11);
evalcond[5]=((((-1.0)*cj6*x632))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x631))+(((-1.0)*x632))+((cj6*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x631))+(((-1.0)*x633))+((cj6*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x634=IKcos(j8);
IkReal x635=IKsin(j8);
IkReal x636=((1.0)*sj6);
IkReal x637=((1.0)*x634);
IkReal x638=((1.0)*x635);
evalcond[0]=(x635+new_r21);
evalcond[1]=((((-1.0)*x637))+new_r20);
evalcond[2]=(((sj6*x634))+new_r01);
evalcond[3]=(((sj6*x635))+new_r00);
evalcond[4]=((((-1.0)*cj6*x637))+new_r11);
evalcond[5]=((((-1.0)*cj6*x638))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x636))+(((-1.0)*x638))+((cj6*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x636))+(((-1.0)*x637))+((cj6*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x639=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x639))+((cj6*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x639))))+IKsqr(((((-1.0)*new_r01*x639))+((cj6*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x639))), ((((-1.0)*new_r01*x639))+((cj6*new_r00))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x640=IKsin(j8);
IkReal x641=IKcos(j8);
IkReal x642=((1.0)*sj6);
IkReal x643=((1.0)*x641);
IkReal x644=(sj6*x640);
IkReal x645=((1.0)*x640);
IkReal x646=(cj6*x643);
evalcond[0]=(((new_r11*sj6))+((cj6*new_r01))+x640);
evalcond[1]=(((sj6*x641))+((cj6*x640))+new_r01);
evalcond[2]=(((new_r10*sj6))+(((-1.0)*x643))+((cj6*new_r00)));
evalcond[3]=(((cj6*new_r10))+(((-1.0)*x645))+(((-1.0)*new_r00*x642)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x643))+(((-1.0)*new_r01*x642)));
evalcond[5]=((((-1.0)*x646))+x644+new_r00);
evalcond[6]=((((-1.0)*x646))+x644+new_r11);
evalcond[7]=((((-1.0)*x641*x642))+(((-1.0)*cj6*x645))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x647=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj6*x647))+((cj6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x647)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x647))+((cj6*new_r01))))+IKsqr(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x647))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj6*x647))+((cj6*new_r01))), ((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x647))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x648=IKcos(j8);
IkReal x649=IKsin(j8);
IkReal x650=((1.0)*sj6);
IkReal x651=((1.0)*cj6);
IkReal x652=((1.0)*x649);
IkReal x653=(sj6*x648);
IkReal x654=(x649*x651);
evalcond[0]=(((new_r10*sj6))+((cj6*new_r00))+x648);
evalcond[1]=(((new_r11*sj6))+(((-1.0)*x652))+((cj6*new_r01)));
evalcond[2]=(((sj6*x649))+((cj6*x648))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x650))+(((-1.0)*x652))+((cj6*new_r10)));
evalcond[4]=((((-1.0)*x648))+((cj6*new_r11))+(((-1.0)*new_r01*x650)));
evalcond[5]=((((-1.0)*x654))+x653+new_r01);
evalcond[6]=((((-1.0)*x654))+x653+new_r10);
evalcond[7]=((((-1.0)*x649*x650))+new_r11+(((-1.0)*x648*x651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r10, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x655=IKcos(j8);
IkReal x656=IKsin(j8);
IkReal x657=((1.0)*sj7);
IkReal x658=((1.0)*x655);
IkReal x659=((1.0)*x656);
evalcond[0]=(((new_r02*x655))+new_r20);
evalcond[1]=((((-1.0)*x659))+new_r10);
evalcond[2]=((((-1.0)*x658))+new_r11);
evalcond[3]=(((cj7*x656))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x659))+new_r21);
evalcond[5]=((((-1.0)*cj7*x658))+new_r00);
evalcond[6]=(x656+(((-1.0)*new_r21*x657))+((cj7*new_r01)));
evalcond[7]=((((-1.0)*x658))+(((-1.0)*new_r20*x657))+((cj7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=IKsign(new_r02);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x660=IKcos(j8);
IkReal x661=((1.0)*(IKsin(j8)));
evalcond[0]=(x660+new_r20);
evalcond[1]=((((-1.0)*x661))+new_r21);
evalcond[2]=((((-1.0)*x661))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x660))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x662=IKsin(j8);
IkReal x663=((1.0)*(IKcos(j8)));
evalcond[0]=(x662+new_r21);
evalcond[1]=((((-1.0)*x663))+new_r20);
evalcond[2]=((((-1.0)*x662))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x663))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs((cj7*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*new_r01))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((cj7*new_r01), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x664=IKsin(j8);
IkReal x665=IKcos(j8);
IkReal x666=((1.0)*new_r01);
IkReal x667=((1.0)*new_r00);
IkReal x668=((1.0)*x665);
evalcond[0]=(x664+(((-1.0)*cj7*x666)));
evalcond[1]=((((-1.0)*x664))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x668))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x666))+((cj7*x664)));
evalcond[4]=((((-1.0)*x667))+(((-1.0)*cj7*x668)));
evalcond[5]=((((-1.0)*x668))+(((-1.0)*cj7*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x669=IKsin(j8);
IkReal x670=IKcos(j8);
IkReal x671=((-1.0)*x670);
evalcond[0]=x669;
evalcond[1]=(new_r22*x669);
evalcond[2]=x671;
evalcond[3]=(new_r22*x671);
evalcond[4]=((((-1.0)*x669))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x670))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x672=IKPowWithIntegerCheck(new_r02,-1);
if(!x672.valid){
continue;
}
CheckValue<IkReal> x673=IKPowWithIntegerCheck(cj7,-1);
if(!x673.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x672.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x673.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x672.value)))+IKsqr(((-1.0)*new_r00*(x673.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21*(x672.value)), ((-1.0)*new_r00*(x673.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x674=IKsin(j8);
IkReal x675=IKcos(j8);
IkReal x676=((1.0)*new_r01);
IkReal x677=((1.0)*sj7);
IkReal x678=((1.0)*new_r00);
IkReal x679=((1.0)*x675);
evalcond[0]=(((new_r02*x674))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x679))+new_r20);
evalcond[2]=((((-1.0)*x674))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x679)));
evalcond[4]=(((cj7*x674))+(((-1.0)*x676)));
evalcond[5]=((((-1.0)*cj7*x679))+(((-1.0)*x678)));
evalcond[6]=((((-1.0)*new_r21*x677))+(((-1.0)*cj7*x676))+x674);
evalcond[7]=((((-1.0)*cj7*x678))+(((-1.0)*new_r20*x677))+(((-1.0)*x679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x680=IKPowWithIntegerCheck(new_r02,-1);
if(!x680.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x680.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x680.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x680.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x681=IKsin(j8);
IkReal x682=IKcos(j8);
IkReal x683=((1.0)*new_r01);
IkReal x684=((1.0)*sj7);
IkReal x685=((1.0)*new_r00);
IkReal x686=((1.0)*x682);
evalcond[0]=(((new_r02*x681))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x686))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x681)));
evalcond[3]=((((-1.0)*x686))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x683))+((cj7*x681)));
evalcond[5]=((((-1.0)*x685))+(((-1.0)*cj7*x686)));
evalcond[6]=((((-1.0)*cj7*x683))+(((-1.0)*new_r21*x684))+x681);
evalcond[7]=((((-1.0)*x686))+(((-1.0)*cj7*x685))+(((-1.0)*new_r20*x684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
CheckValue<IkReal> x688=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x688.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x687.value)+(((1.5707963267949)*(x688.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x689=IKsin(j8);
IkReal x690=IKcos(j8);
IkReal x691=((1.0)*new_r01);
IkReal x692=((1.0)*sj7);
IkReal x693=((1.0)*new_r00);
IkReal x694=((1.0)*x690);
evalcond[0]=(((new_r02*x689))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x694)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x689)));
evalcond[3]=((((-1.0)*x694))+(((-1.0)*new_r11)));
evalcond[4]=(((cj7*x689))+(((-1.0)*x691)));
evalcond[5]=((((-1.0)*x693))+(((-1.0)*cj7*x694)));
evalcond[6]=(x689+(((-1.0)*new_r21*x692))+(((-1.0)*cj7*x691)));
evalcond[7]=((((-1.0)*x694))+(((-1.0)*cj7*x693))+(((-1.0)*new_r20*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x696=IKPowWithIntegerCheck(sj7,-1);
if(!x696.valid){
continue;
}
IkReal x695=x696.value;
CheckValue<IkReal> x697=IKPowWithIntegerCheck(cj6,-1);
if(!x697.valid){
continue;
}
CheckValue<IkReal> x698=IKPowWithIntegerCheck(cj7,-1);
if(!x698.valid){
continue;
}
if( IKabs((x695*(x697.value)*(x698.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x695)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x695*(x697.value)*(x698.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))))+IKsqr(((-1.0)*new_r20*x695))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x695*(x697.value)*(x698.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))), ((-1.0)*new_r20*x695));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x699=IKsin(j8);
IkReal x700=IKcos(j8);
IkReal x701=(cj6*new_r00);
IkReal x702=((1.0)*sj7);
IkReal x703=(cj6*new_r01);
IkReal x704=(cj7*sj6);
IkReal x705=((1.0)*sj6);
IkReal x706=((1.0)*x700);
IkReal x707=(cj7*x699);
IkReal x708=((1.0)*x699);
IkReal x709=(sj6*x700);
evalcond[0]=(new_r20+((sj7*x700)));
evalcond[1]=((((-1.0)*x699*x702))+new_r21);
evalcond[2]=(((new_r11*sj6))+x703+x707);
evalcond[3]=(((cj6*new_r10))+(((-1.0)*x708))+(((-1.0)*new_r00*x705)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x706))+(((-1.0)*new_r01*x705)));
evalcond[5]=(((cj6*x707))+x709+new_r01);
evalcond[6]=((((-1.0)*cj7*x706))+((new_r10*sj6))+x701);
evalcond[7]=(((sj6*x699))+new_r00+(((-1.0)*cj6*cj7*x706)));
evalcond[8]=((((-1.0)*cj6*x706))+new_r11+((x699*x704)));
evalcond[9]=((((-1.0)*cj6*x708))+(((-1.0)*x704*x706))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x702))+((cj7*x703))+x699+((new_r11*x704)));
evalcond[11]=((((-1.0)*new_r20*x702))+((cj7*x701))+(((-1.0)*x706))+((new_r10*x704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x711=IKPowWithIntegerCheck(sj7,-1);
if(!x711.valid){
continue;
}
IkReal x710=x711.value;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(sj6,-1);
if(!x712.valid){
continue;
}
if( IKabs((x710*(x712.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x710)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x710*(x712.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))))+IKsqr(((-1.0)*new_r20*x710))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x710*(x712.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))), ((-1.0)*new_r20*x710));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x713=IKsin(j8);
IkReal x714=IKcos(j8);
IkReal x715=(cj6*new_r00);
IkReal x716=((1.0)*sj7);
IkReal x717=(cj6*new_r01);
IkReal x718=(cj7*sj6);
IkReal x719=((1.0)*sj6);
IkReal x720=((1.0)*x714);
IkReal x721=(cj7*x713);
IkReal x722=((1.0)*x713);
IkReal x723=(sj6*x714);
evalcond[0]=(new_r20+((sj7*x714)));
evalcond[1]=(new_r21+(((-1.0)*x713*x716)));
evalcond[2]=(((new_r11*sj6))+x717+x721);
evalcond[3]=((((-1.0)*x722))+((cj6*new_r10))+(((-1.0)*new_r00*x719)));
evalcond[4]=((((-1.0)*x720))+((cj6*new_r11))+(((-1.0)*new_r01*x719)));
evalcond[5]=(x723+new_r01+((cj6*x721)));
evalcond[6]=(((new_r10*sj6))+x715+(((-1.0)*cj7*x720)));
evalcond[7]=((((-1.0)*cj6*cj7*x720))+new_r00+((sj6*x713)));
evalcond[8]=((((-1.0)*cj6*x720))+new_r11+((x713*x718)));
evalcond[9]=((((-1.0)*cj6*x722))+new_r10+(((-1.0)*x718*x720)));
evalcond[10]=((((-1.0)*new_r21*x716))+((cj7*x717))+((new_r11*x718))+x713);
evalcond[11]=((((-1.0)*new_r20*x716))+(((-1.0)*x720))+((cj7*x715))+((new_r10*x718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x724=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x724.value)))+(x725.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x726=IKsin(j8);
IkReal x727=IKcos(j8);
IkReal x728=(cj6*new_r00);
IkReal x729=((1.0)*sj7);
IkReal x730=(cj6*new_r01);
IkReal x731=(cj7*sj6);
IkReal x732=((1.0)*sj6);
IkReal x733=((1.0)*x727);
IkReal x734=(cj7*x726);
IkReal x735=((1.0)*x726);
IkReal x736=(sj6*x727);
evalcond[0]=(new_r20+((sj7*x727)));
evalcond[1]=((((-1.0)*x726*x729))+new_r21);
evalcond[2]=(((new_r11*sj6))+x734+x730);
evalcond[3]=(((cj6*new_r10))+(((-1.0)*x735))+(((-1.0)*new_r00*x732)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x733))+(((-1.0)*new_r01*x732)));
evalcond[5]=(((cj6*x734))+x736+new_r01);
evalcond[6]=((((-1.0)*cj7*x733))+((new_r10*sj6))+x728);
evalcond[7]=((((-1.0)*cj6*cj7*x733))+((sj6*x726))+new_r00);
evalcond[8]=(((x726*x731))+(((-1.0)*cj6*x733))+new_r11);
evalcond[9]=((((-1.0)*x731*x733))+(((-1.0)*cj6*x735))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x729))+((cj7*x730))+x726+((new_r11*x731)));
evalcond[11]=((((-1.0)*new_r20*x729))+((cj7*x728))+(((-1.0)*x733))+((new_r10*x731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "3719cdde07969dcda766910667d1aeb6"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
